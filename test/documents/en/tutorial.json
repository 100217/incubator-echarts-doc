{
  "$schema": "http://echarts.baidu.com/doc/json-schem",
  "option": {
    "type": "Object",
    "properties": {
      "Introduction of ECharts features\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<p>ECharts is a chart bank with pure Javascript, it can run smoothly on PC and mobile devices, compatible with most of current browser（IE8/9/10/11, Chrome, Firefox, Safari and so on）, it relies on underlying lightweight  Canvas bank <a href=\"https://github.com/ecomfe/zrender\" target=\"_blank\">ZRender</a> and provides data visualization map that is Direct, vivid, interactive, highly personalized.</p>\n<p>ECharts 3 adds even richer interactive function, visualization effects and optimizes deeper on mobile end.</p>\n<h2 id=\"rich-chart-types\">Rich chart types</h2>\n<p>ECharts provides routine <a href=\"option.html#series-line\" target=\"_blank\">line chart</a>, <a href=\"option.html#series-line\" target=\"_blank\">bar chart</a>, <a href=\"option.html#series-scatter\" target=\"_blank\">scatter chart</a>, <a href=\"#option.html#series-pie\">pie chart</a>, <a href=\"option.html#series-candlestick\" target=\"_blank\">K line chart</a>, <a href=\"option.html#series-boxplot\" target=\"_blank\">box chart</a> used for calculation, [map] (option.html#series-map)used for geo-data visualization, <a href=\"option.html#series-heatmap\" target=\"_blank\">thermal map</a>, <a href=\"option.html#series-lines\" target=\"_blank\">line chart</a>, <a href=\"option.html#series-graph\" target=\"_blank\">relationship map</a> used for connect data visualization, <a href=\"option.html#series-treemap\" target=\"_blank\">treemap</a>, <a href=\"option.html#series-parallel\" target=\"_blank\">parallel coordinates</a> of multi-dimensional data visualization, <a href=\"option.html#series-funnel\" target=\"_blank\">funnel map</a> used for BI, <a href=\"option.html#series-gauge\" target=\"_blank\">dashboard</a>, and supports mix between graphics.</p>\n<p>You can download build files of all charts in the dowbload interface, if you only need one or two charts and think the build files of all charts are too large, you can also choose needed chart types in the online building and build customerized. </p>\n<h2 id=\"support-of-multiple-coordinate-system\">Support of multiple coordinate system</h2>\n<p>ECharts 3 starts to seperate “coordinate system” concept, supporting right angle coordinate system（catesian, same as grid）、polar coordinate system（polar）、geographical coordinate system（geo）. Charts supports cross coordinate system, such as line chart, bar chart and scatter chart can be placed in right angle coordinate system or polar  coordinate system or even geographical coordinate system.</p>\n<p>Below is an example that a line chart in polar coordinate system：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=line-polar2&reset=1&edit=1\" width=\"60%\" height=\"400\" ></iframe>\n\n\n<p>Below is an example that a scatter chart in geographic coordinate system：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=scatter-map&reset=1&edit=1\" width=\"60%\" height=\"400\" ></iframe>\n\n\n\n<h2 id=\"optimization-of-mobile-end\">Optimization of mobile end</h2>\n<p>Mobile end with precious traffic needs chart bank to be as small as possible. Reconstructing ECharts and ZRender code minimizes core part size. ECharts has many components and they will be increasing in the future, therefore we provide more granular packaging ability on demand. The minimum size has shrunk to 40% of ECharts 2.</p>\n<p>Interaction on mobile end is also optimized, for example, zoom and translation in coordinates with fingers in small screen of mobile end. PC end can also use mouse （Using the mouse wheel）to zoom and translate. See in the picture below:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=area-simple&reset=1&edit=1\" width=\"60%\" height=\"400\" ></iframe>\n\n\n<h2 id=\"deep-exploration-of-interactive-data-exploration-of-depth\">Deep exploration of interactive data exploration of depth</h2>\n<p>Interaction is an important way to dig information from data. Overview, zoom and filter, check details based on needs are basic requirements of data visualization interaction.</p>\n<p>ECharts is constantly moving forward on the road of “interaction”, components like<a href=\"option.html#legend\" target=\"_blank\">legend</a> <a href=\"option.html#visualMap\" target=\"_blank\">visualMap</a> <a href=\"option.html#dataZoom\" target=\"_blank\">dataZoom</a> <a href=\"option.html#tooltip\" target=\"_blank\">tooltip</a> , roaming attached by chart and selection provide data screen, view zoom, detail showing and so on.</p>\n<p>ECharts 3 comprehensively strenghtens these components, such as supporting filtering and zooming on every data axis and dimension,and adopting these components in more graphics. As the example below</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=mix-zoom-on-value&reset=1&edit=1\" width=\"60%\" height=\"400\" ></iframe>\n\n\n<h2 id=\"display-of-large-amounts-of-data\">Display of large amounts of data</h2>\n<p>Helped by Canvas, ECharts can easily display tens of thousands and even hundreds of thousands data in scatter chart.</p>\n<p>Weibo sign in the graphic below displays 100k+ signing data.</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=scatter-weibo&reset=1&edit=1\" width=\"60%\" height=\"400\" ></iframe>\n\n\n<h2 id=\"multi-dimensional-data-support-and-rich-means-of-visual-coding\">Multi-dimensional data support and rich means of visual coding</h2>\n<p>ECharts 3 begins to reinforce support of multi-dimensional data, except adding common multi-dimensional data visualization tool as parallel coordinates, incoming data can also be mult-dimensional as for traditionl scatter chart. Cooperating with rich visual code provided by visual map component  <a href=\"option.html#visualMap\" target=\"_blank\">visualMap</a> , you can map data of different dimensions to color, size, transparency, lightness and other different visual tunnel.</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=scatter-aqi-color&reset=1&edit=1\" width=\"60%\" height=\"500\" ></iframe>\n\n\n<h2 id=\"dynamic-data\">dynamic data</h2>\n<p>ECharts is driven by data, change of data changes the presentation of chart, therefore dymatic data is much easier to realized.You only need to obtian data, enter them and  ECharts will find the difference between two data and present data change through proper animation. Cooperating <a href=\"option.html#timeline\" target=\"_blank\">timeline</a> component can present data information at higher time dimension.</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=scatter-life-expectancy-timeline&reset=1&edit=1\" width=\"60%\" height=\"400\" ></iframe>\n\n\n<h2 id=\"gorgeous-special-effect\">Gorgeous special effect</h2>\n<p>ECharts provides eye-catching special effect for visualization of line data, point data and other geo-data.</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=geo-lines&reset=1&edit=1\" width=\"60%\" height=\"400\" ></iframe>\n\n\n\n"
      },
      "Master ECharts in 5 minutes\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<h2 id=\"obtain-echarts\">Obtain ECharts</h2>\n<p>You can obtain ECharts through the following ways.</p>\n<ol>\n<li><p>Choose the version you need to download from <a href=\"http://echarts.baidu.com/download.html\" target=\"_blank\">Official download page</a>, based on developer&#39;s need of function and volume, we provide different download packages. If you have no need on volume, you can [download full version] directly(<a href=\"http://echarts.baidu.com/dist/echarts.min.js)。\" target=\"_blank\">http://echarts.baidu.com/dist/echarts.min.js)。</a></p>\n</li>\n<li><p>Download the lattest <code>release</code>in ECharts <a href=\"https://github.com/echarts\" target=\"_blank\">github</a> , you can find the lattest version of  echarts in the  <code>dist</code> catalog of the decompressing folder.</p>\n</li>\n<li><p>Obtain echarts through npm, <code>npm install echarts --save</code>, see details in “[use echarts in webpack]”(<a href=\"http://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts\" target=\"_blank\">http://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts</a>)</p>\n</li>\n</ol>\n<h2 id=\"introduce-echarts\">introduce ECharts</h2>\n<p>ECharts 3 no longer uses AMD as means of introducing mandatory, AMD loader is no longer placed in code. Therefore, it is much easier to introduce and you only need to introduce script label like normal JavaScript bank.</p>\n<pre><code class=\"lang-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;header&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;!-- incoming ECharts document --&gt;\n    &lt;script src=&quot;echarts.min.js&quot;&gt;&lt;/script&gt;\n&lt;/header&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"draw-a-simple-chart\">Draw a simple chart</h2>\n<p>Before drawing, we need to prepare a Dom with size(height and width) for ECharts.</p>\n<pre><code>&lt;body&gt;\n    &lt;!-- preparing a Dom with size(height and width) for ECharts --&gt;\n    &lt;div id=&quot;main&quot; style=&quot;width: 600px;height:400px;&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>Then through <a href=\"api.html#echarts.init\" target=\"_blank\">echarts.init</a> , we can initialize an echarts example and create a simple bar chart through <a href=\"api.html#echartsInstance.setOption\" target=\"_blank\">setOption</a>, below is the complete code.</p>\n<pre><code class=\"lang-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;ECharts&lt;/title&gt;\n    &lt;!-- 引入 echarts.js --&gt;\n    &lt;script src=&quot;echarts.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!--preparing a Dom with size(height and width) for ECharts --&gt;\n    &lt;div id=&quot;main&quot; style=&quot;width: 600px;height:400px;&quot;&gt;&lt;/div&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        // based on prepared dom, initialize echarts example\n        var myChart = echarts.init(document.getElementById(&#39;main&#39;));\n\n        // Specifies chart configuration item and data\n        var option = {\n            title: {\n                text: &#39;ECharts entry example&#39;\n            },\n            tooltip: {},\n            legend: {\n                data:[&#39;Sales&#39;]\n            },\n            xAxis: {\n                data: [&quot;shirt&quot;,cardign&quot;,&quot;chiffon shirt&quot;,&quot;pants&quot;,&quot;heels&quot;,&quot;socks&quot;]\n            },\n            yAxis: {},\n            series: [{\n                name: &#39;Sales&#39;,\n                type: &#39;bar&#39;,\n                data: [5, 20, 36, 10, 10, 20]\n            }]\n        };\n\n        // Use configuration item and data specified just now to show chart.\n        myChart.setOption(option);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here is your first chart!</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/getting-started&reset=1&edit=1\" width=\"600\" height=\"300\" ></iframe>\n\n\n<p>You can also enter <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/getting-started\" target=\"_blank\">ECharts Gallery</a> directly to view editing samples.</p>\n"
      },
      "Use ECharts  in webpack \r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<p><a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> is a relatively popular module packing tool, you can easily introduce and pack echarts while using webpack project on the assumption that you already have certain understanding and have used webpack in your project.</p>\n<h2 id=\"npm-installs-echarts\">npm installs ECharts</h2>\n<p>Before <code>3.1.1</code> version,  echarts on npm package is maintained unoffically, from <code>3.1.1</code> echarts on npm and zrender package are maintained officially by <a href=\"https://github.com/ecomfe/\" target=\"_blank\">EFE</a>. </p>\n<p>You can use the following order to install echarts through npm </p>\n<pre><code class=\"lang-shell\">npm install echarts --save\n</code></pre>\n<h2 id=\"introduce-echarts\">introduce ECharts</h2>\n<p>Echarts and zrender installed through npm will be placed under <code>node_modules</code>. You can obtain echarts directly in project code <code>require(&#39;echarts&#39;)</code>.</p>\n<pre><code class=\"lang-js\">var echarts = require(&#39;echarts&#39;);\n\n// based on prepared dom, initialize echarts example\nvar myChart = echarts.init(document.getElementById(&#39;main&#39;));\n// draw chart\nmyChart.setOption({\n    title: { text: &#39;ECharts entry example&#39; },\n    tooltip: {},\n    xAxis: {\n        data: [&quot;shirt&quot;,cardign&quot;,&quot;chiffon shirt&quot;,&quot;pants&quot;,&quot;heels&quot;,&quot;socks&quot;]\n    },\n    yAxis: {},\n    series: [{\n        name: &#39;sales&#39;,\n        type: &#39;bar&#39;,\n        data: [5, 20, 36, 10, 10, 20]\n    }]\n});\n</code></pre>\n<h2 id=\"introduce-echarts-chart-and-component-based-on-need\">introduce ECharts chart and component based on need</h2>\n<p>Use <code>require(&#39;echarts&#39;)</code> by default, you will get echarts bag loaded with all charts and component. so the volume will be large. If volume requirement is strict in project, you can also introduce needed module.</p>\n<p>For example, the code above only uses bar chart, tooltip and title component, so you only need to introduce these modules to minimize package from more than 400 KB to 170 KB or some effectively.</p>\n<pre><code class=\"lang-js\">// introduce ECharts main module\nvar echarts = require(&#39;echarts/lib/echarts&#39;);\n// introduce bar chart\nrequire(&#39;echarts/lib/chart/bar&#39;);\n// introduce tooltip and title component\nrequire(&#39;echarts/lib/component/tooltip&#39;);\nrequire(&#39;echarts/lib/component/title&#39;);\n\n// based on prepared dom, initialize echarts example\nvar myChart = echarts.init(document.getElementById(&#39;main&#39;));\n// Draw chart\nmyChart.setOption({\n    title: { text: &#39;ECharts introductory example&#39; },\n    tooltip: {},\n    xAxis: {\n        data: [&quot;shirt&quot;,cardign&quot;,&quot;chiffon shirt&quot;,&quot;pants&quot;,&quot;heels&quot;,&quot;socks&quot;]\n    },\n    yAxis: {},\n    series: [{\n        name: &#39;sales&#39;,\n        type: &#39;bar&#39;,\n        data: [5, 20, 36, 10, 10, 20]\n    }]\n});\n</code></pre>\n<p>Same method is used on another popular module packaging tools <a href=\"http://browserify.org/\" target=\"_blank\">browserify</a>, so details will not be elaborated here.</p>\n"
      },
      "Customized chart format\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<p>ECharts provides rich custom configuration options and you can set data graphic format from three layers, namely, global, series and data.Next we are going to learn how to use ECharts to realize the following Nightingale chart:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-styling-step5&edit=1&reset=1\" width=\"500\" height=\"400\" ></iframe>\n\n\n<h2 id=\"draw-nightingale-chart\">Draw Nightingale chart</h2>\n<p><a href=\"#getting-started\">In the previous chapter</a> we learnt to draw a simple bar chart, this time we learn the pie chart. Pie chart mainly displays percentage of different categories data to the total sum through sector arc, its format is easier than bar chart with one-dimensional data value and no category. Since it is not in right angle coordinate system, so there is no need for <code>xAxis</code> and <code>yAxis</code>.</p>\n<pre><code class=\"lang-js\">myChart.setOption({\n    series : [\n        {\n            name: &#39;access source &#39;,\n            type: &#39;pie&#39;,\n            radius: &#39;55%&#39;,\n            data:[\n                {value:400, name:&#39;search engine&#39;},\n                {value:335, name:&#39;direct access&#39;},\n                {value:310, name:&#39;email marketing&#39;},\n                {value:274, name:&#39;Affiliate advertisement&#39;},\n                {value:235, name:&#39;video advertisement&#39;}\n            ]\n        }\n    ]\n})\n</code></pre>\n<p>code above can draw a simple pie chart:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-styling-step0&edit=1&reset=1\" width=\"400\" height=\"300\" ></iframe>\n\n\n<p>Attribute value of <code>data</code> here is not the single data value for each item as it showd in introductory tutorial, but an object including attributes of <code>name</code> and <code>value</code>. Data item in ECharts can all be set to data value as well as an object including name, format configuration of the data chart and label configuration object, see details in <a href=\"option.html#series-pie.data\" target=\"_blank\">data</a>.</p>\n<p><a href=\"option.html#series-pie\" target=\"_blank\">pie chart</a> in ECharts  also supports to display Nightingale chart through setting <a href=\"option.html#series-pie.roseType\" target=\"_blank\">roseType</a>.</p>\n<pre><code class=\"lang-js\">roseType: &#39;angle&#39;\n</code></pre>\n<p>Nightingale chart show data size through radius.</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-styling-step1&edit=1&reset=1\" width=\"400\" height=\"300\" ></iframe>\n\n\n<h2 id=\"shadow-configuration\">shadow configuration</h2>\n<p>There are some universal formats in ECharts such as shadow, transparency, color, border color, border width and so on, these formats are usually set in <a href=\"#series-pie.itemStyle\">itemStyle</a> of series. For example, shadow format can be set through the following configuration items: </p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        // shadow size\n        shadowBlur: 200,\n        // Shadow is offset horizontally\n        shadowOffsetX: 0,\n        // Shadow is offset vertically\n        shadowOffsetY: 0,\n        // shadow color\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;\n    }\n}\n</code></pre>\n<p>Effect after adding shadow:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-styling-step2&edit=1&reset=1\" width=\"400\" height=\"300\" ></iframe>\n\n\n<p><code>itemStyle</code> has two options as <code>normal</code> and <code>emphasis</code>, <code>normal</code> is format of normal display, <code>emphasis</code> is the highlight format when mouse hovers. This example is normal format adds shadow, but more often it stands out through shadow when hovering. </p>\n<pre><code class=\"lang-js\">itemStyle: {\n    emphasis: {\n        shadowBlur: 200,\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;\n    }\n}\n</code></pre>\n<h2 id=\"dark-background-and-light-label\">Dark background and light label</h2>\n<p>Now we need change the whole theme into the dark one as in the example, this needs to change background color and text color.</p>\n<p>Background color is universal, so you can directly set [backgroundColor] under option.(option.html#backgroundColor)</p>\n<pre><code class=\"lang-js\">setOption({\n    backgroundColor: &#39;#2c343c&#39;\n})\n</code></pre>\n<p>text format can set overall <a href=\"option.html#textStyle\" target=\"_blank\">textStyle</a>。</p>\n<pre><code class=\"lang-js\">setOption({\n    textStyle: {\n        color: &#39;rgba(255, 255, 255, 0.3)&#39;\n    }\n})\n</code></pre>\n<p>You can also set each series respectively, text of each series is located in<a href=\"option.html#series-pie.label.normal.textStyle\" target=\"_blank\">label.normal.textStyle</a>。</p>\n<pre><code class=\"lang-js\">label: {\n    normal: {\n        textStyle: {\n            color: &#39;rgba(255, 255, 255, 0.3)&#39;\n        }\n    }\n}\n</code></pre>\n<p>Pie charts need to set the color of visual guides to light color.</p>\n<pre><code class=\"lang-js\">labelLine: {\n    normal: {\n        lineStyle: {\n            color: &#39;rgba(255, 255, 255, 0.3)&#39;\n        }\n    }\n}\n</code></pre>\n<p>For example：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-styling-step3&edit=1&reset=1\" width=\"400\" height=\"300\" ></iframe>\n\n\n<p>Same as <code>itemStyle</code>, formats of <code>label</code> and <code>labelLine</code> also have two status as <code>normal</code> and <code>emphasis</code>.</p>\n<h2 id=\"set-color-of-sector\">set color of sector</h2>\n<p>sector color is also set in itemStyle：</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        // set color of sector\n        color: &#39;#c23531&#39;,\n        shadowBlur: 200,\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;\n    }\n}\n</code></pre>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-styling-step4&edit=1&reset=1\" width=\"400\" height=\"300\" ></iframe>\n\n\n<p>This is very close to the effect we want, apart from color of each sector, sectors under  shading have darker color as light is being blocked to display layer and space. </p>\n<p>Color of each sector in ECharts can be reakized through setting data item under data respectively. </p>\n<pre><code class=\"lang-js\">data: [{\n    value:400,\n    name:&#39;search engine&#39;,\n    itemStyle: {\n        normal: {\n            color: &#39;c23531&#39;\n        }\n    }\n}, ...]\n</code></pre>\n<p>But because this time there is only a change in shading, so the faster way to map data value to shading is through <a href=\"#option.html#visualMap\">visualMap</a> component.</p>\n<pre><code class=\"lang-js\">visualMap: {\n    // does not show visualMap component, only used to map shading\n    show: false,\n    // minimum value of map 80\n    min: 80,\n    // Maximum value of map is 600\n    max: 600,\n    inRange: {\n        // shading range from 0 to 1\n        colorLightness: [0, 1]\n    }\n}\n</code></pre>\n<p>final effect：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-styling-step5&edit=1&reset=1\" width=\"500\" height=\"400\" ></iframe>\n\n\n\n\n\n\n"
      },
      "loading and updating of asynchronous data\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<h2 id=\"asynchronous-load\">Asynchronous load</h2>\n<p>[Entry example]data in (~getting-started) is directly entered in <code>setOption</code> after initializing, but data can only enter after  asynchronous load on many occasions. Asynchronous data updating in <code>ECharts</code> is very easy, after charts initializing, you can enter data and configuration item through <code>setOption</code> after obtaining data through  jQuery and other tools at any time.</p>\n<pre><code class=\"lang-js\">var myChart = echarts.init(document.getElementById(&#39;main&#39;));\n\n$.get(&#39;data.json&#39;).done(function (data) {\n    myChart.setOption({\n        title: {\n            text: &#39;asynchronous data loading example&#39;\n        },\n        tooltip: {},\n        legend: {\n            data:[&#39;Sales&#39;]\n        },\n        xAxis: {\n            data: [&quot;shirts&quot;,&quot;cardigan&quot;,&quot;chiffon shirt&quot;,&quot;pants&quot;,&quot;heels&quot;,&quot;sockes&quot;]\n        },\n        yAxis: {},\n        series: [{\n            name: &#39;Sales&#39;,\n            type: &#39;bar&#39;,\n            data: [5, 20, 36, 10, 10, 20]\n        }]\n    });\n});\n</code></pre>\n<p>Or you can finish setting other patterns, show an empty right angle axes, and then enter data  after obtaining.</p>\n<pre><code class=\"lang-js\">var myChart = echarts.init(document.getElementById(&#39;main&#39;));\n// show title. legend adn empty axis\nmyChart.setOption({\n    title: {\n        text: &#39;asynchronous data loading example&#39;\n    },\n    tooltip: {},\n    legend: {\n        data:[&#39;Sales&#39;]\n    },\n    xAxis: {\n        data: []\n    },\n    yAxis: {},\n    series: [{\n        name: &#39;Sales&#39;,\n        type: &#39;bar&#39;,\n        data: []\n    }]\n});\n\n// Asynchronous data loading \n$.get(&#39;data.json&#39;).done(function (data) {\n    // enter data\n    myChart.setOption({\n        xAxis: {\n            data: data.categories\n        },\n        series: [{\n            // correspond to the corresponding series by name\n            name: &#39;Sales&#39;,\n            data: data.data\n        }]\n    });\n});\n</code></pre>\n<p>For example：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-async&edit=1&reset=1\" width=\"400\" height=\"300\" ></iframe>\n\n\n<p>In ECharts, updating data need to correspond to the corresponding series through <code>name</code>. In the above example, normal update can be carried out according to series order if <code>name</code> doesn&#39;t exist, but adding series <code>name</code>data when updating data is recommended more often. </p>\n<h2 id=\"loading-animation\">loading animation</h2>\n<p>If data loading went long, an empty axis on the canvas may make user think that there is a bug, so a loading animation is needed to remind user of data loading. </p>\n<p>ECharts provides a simple loading animation by default.You only use <a href=\"api.html#echartsInstance.showLoading\" target=\"_blank\">showLoading</a> to show, and then use <a href=\"api.html#echartsInstance.hideLoading\" target=\"_blank\">hideLoading</a> to hide loading animation after data loading.</p>\n<pre><code class=\"lang-js\">myChart.showLoading();\n$.get(&#39;data.json&#39;).done(function (data) {\n    myChart.hideLoading();\n    myChart.setOption(...);\n});\n</code></pre>\n<p>Effects are as followed：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-loading&edit=1&reset=1\" width=\"400\" height=\"300\" ></iframe>\n\n\n<h2 id=\"dynamic-update-of-data\">Dynamic update of data</h2>\n<p>ECharts is driven by data, change of data changes the presentation of chart, therefore dymatic data is much easier to realized.</p>\n<p>All data updating are achieved through <a href=\"#api.html#echartsInstance.setOption\">setOption</a>, you only need to obtian data regularly, enter data in<a href=\"#api.html#echartsInstance.setOption\">setOption</a> and you don&#39;t need to consider the changes brought by data, ECharts will find the difference between two data and present data change through proper animation. </p>\n<blockquote>\n<p>In ECharts 3, addData in ECharts 2 is removed.If a single data needs to be added, you can first data.push(value) and then setOption.</p>\n</blockquote>\n<p>See details in the following example:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/tutorial-dynamic-data&edit=1&reset=1\" width=\"400\" height=\"300\" ></iframe>\n\n\n\n\n"
      },
      "Add interaction to the chart component\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<p>Except charts, Echarts provide many interaction components, For example:</p>\n<p><code>legend component</code> <a href=\"option.html#legend\" target=\"_blank\">legend</a>、<code>title component</code> <a href=\"option.html#title\" target=\"_blank\">title</a>、<code>visualmap component</code> <a href=\"option.html#visualMap\" target=\"_blank\">visualMap</a>、<code>datazoom component</code> <a href=\"option.html#dataZoom\" target=\"_blank\">dataZoom</a>、<code>dataline component</code> <a href=\"option.html#timeline\" target=\"_blank\">timeline</a></p>\n<p>Following is an example of <code>datazoom component</code> <a href=\"option.html#dataZoom\" target=\"_blank\">dataZoom</a> as an introduction of how to add this component.</p>\n<p><br></p>\n<h2>Introduction of data zoom component（dataZoom）</h2>\n\n<p>『overview data and pay close attention yo details according to need』is a basic interaction need of data visualization. <code>dataZoom</code> component can realize this function in rectangular coordinate system（<a href=\"option.html#grid\" target=\"_blank\">grid</a>）and polar coordinate system（<a href=\"option.html#polar\" target=\"_blank\">polar</a>）.</p>\n<p><strong>For example：</strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/scatter-dataZoom-all&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n<p><br></p>\n<ul>\n<li><code>dataZoom</code> operate『data window zoom』『data window tanslate』on <code>axis（axis）</code>.</li>\n</ul>\n<blockquote>\n<p>Specifies which axis <code>dataZoom</code>controls through <a href=\"option.html#dataZoom.xAxisIndex\" target=\"_blank\">dataZoom.xAxisIndex</a> or <a href=\"option.html#dataZoom.yAxisIndex\" target=\"_blank\">dataZoom.yAxisIndex</a> or <a href=\"option.html#dataZoom.radiusAxisIndex\" target=\"_blank\">dataZoom.radiusAxisIndex</a> or <a href=\"option.html#dataZoom.angleAxisIndex\" target=\"_blank\">dataZoom.angleAxisIndex</a>  </p>\n</blockquote>\n<ul>\n<li><p>Multiple <code>dataZoom</code> components can exist at the same time as a jointly control function. Components controling the same axis will be linked automatically. The example below will explain in detail.</p>\n</li>\n<li><p>Operation principle of <code>dataZoom</code> achieves 『data window zoom』through『data filtering』.</p>\n<p>  Different settings of data filtering modes can achieve different effects, please see：<a href=\"option.html#dataZoom.filterMode\" target=\"_blank\">dataZoom.filterMode</a>。</p>\n</li>\n</ul>\n<p>+Setting of <code>dataZoom</code> data zoom range only supports two formats：</p>\n<pre><code>+ Percentage：see [dataZoom.start](option.html#dataZoom.start) and [dataZoom.end](option.html#dataZoom.end)。\n\n+ Absolute value：see [dataZoom.startValue](option.html#dataZoom.startValue) and [dataZoom.endValue](option.html#dataZoom.endValue)。\n</code></pre><p><strong>dataZoom component supports several seed components：</strong></p>\n<ul>\n<li><p><a href=\"option.html#dataZoom-inside\" target=\"_blank\">Inside data zoom component（dataZoomInside）</a>：inside coordinates.</p>\n</li>\n<li><p><a href=\"option.html#dataZoom-slider\" target=\"_blank\">Slider data zoom component（dataZoomSlider）</a>：has seperate slide option.</p>\n</li>\n<li><p><a href=\"option.html#toolbox.feature.dataZoom\" target=\"_blank\">Select data zoom component（dataZoomSelect）</a>：full-screen box to zoom data area. Entrance and configuration item are in <code>toolbox</code>.</p>\n</li>\n</ul>\n<p><br></p>\n<h2>Add dataZoom component in code</h2>\n\n<p>First, only add dataZoom component to a horizontal axis, code is as followed:</p>\n<pre><code class=\"lang-javascript\">\noption = {\n    xAxis: {\n        type: &#39;value&#39;\n    },\n    yAxis: {\n        type: &#39;value&#39;\n    },\n    dataZoom: [\n        {   // This dataZoom component controls X axis by dafault.\n            type: &#39;slider&#39;, // This dataZoom component is dataZoom component of slider\n            start: 10,      // The left is located at 10%.\n            end: 60         // The right is located at 60%.\n        }\n    ],\n    series: [\n        {\n            type: &#39;scatter&#39;, // This is『scatter chart』\n            itemStyle: {\n                normal: {\n                    opacity: 0.8\n                }\n            },\n            symbolSize: function (val) {\n                return val[2] * 40;\n            },\n            data: [[&quot;14.616&quot;,&quot;7.241&quot;,&quot;0.896&quot;],[&quot;3.958&quot;,&quot;5.701&quot;,&quot;0.955&quot;],[&quot;2.768&quot;,&quot;8.971&quot;,&quot;0.669&quot;],[&quot;9.051&quot;,&quot;9.710&quot;,&quot;0.171&quot;],[&quot;14.046&quot;,&quot;4.182&quot;,&quot;0.536&quot;],[&quot;12.295&quot;,&quot;1.429&quot;,&quot;0.962&quot;],[&quot;4.417&quot;,&quot;8.167&quot;,&quot;0.113&quot;],[&quot;0.492&quot;,&quot;4.771&quot;,&quot;0.785&quot;],[&quot;7.632&quot;,&quot;2.605&quot;,&quot;0.645&quot;],[&quot;14.242&quot;,&quot;5.042&quot;,&quot;0.368&quot;]]\n        }\n    ]\n}\n</code></pre>\n<p>Following results can be seen：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/scatter-tutorial-dataZoom-1&edit=1&reset=1\" width=\"600\" height=\"300\" ></iframe>\n\n\n<p><br></p>\n<p>The grahpics above can only change window by dragging dataZoom component. If you want to drag in coordinate system, use wheel(or move two fingers on a touch screen slide ) to zoom, then another dataZoom component of inside needs to be added. You can just add in the <code>option.dataZoom</code> above：</p>\n<pre><code class=\"lang-javascript\">option = {\n    ...,\n    dataZoom: [\n        {   // This dataZoom component controls X axis by dafault.\n            type: &#39;slider&#39;, // This dataZoom component is dataZoom component of slider\n            start: 10,      // The left is located at 10%.\n            end: 60         //  The right is located at 60%.\n        },\n        {   // This dataZoom component controls X axis by dafault.\n            type: &#39;inside&#39;, // This dataZoom component is dataZoom component of inside \n            start: 10,      // The left is located at 10%.\n            end: 60         //  The right is located at 60%.\n        }\n    ],\n    ...\n}\n</code></pre>\n<p>Following results can be seen（you can carry out slide and wheel zoom in coordinate system）：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/scatter-tutorial-dataZoom-2&edit=1&reset=1\" width=\"600\" height=\"300\" ></iframe>\n\n\n\n<p><br></p>\n<p>If you want y axis to zoom too, then you need to add dataZoom componet on y axis:</p>\n<pre><code class=\"lang-javascript\">option = {\n    ...,\n    dataZoom: [\n        {\n            type: &#39;slider&#39;,\n            xAxisIndex: 0,\n            start: 10,\n            end: 60\n        },\n        {\n            type: &#39;inside&#39;,\n            xAxisIndex: 0,\n            start: 10,\n            end: 60\n        },\n        {\n            type: &#39;slider&#39;,\n            yAxisIndex: 0,\n            start: 30,\n            end: 80\n        },\n        {\n            type: &#39;inside&#39;,\n            yAxisIndex: 0,\n            start: 30,\n            end: 80\n        }\n    ],\n    ...\n}\n</code></pre>\n<p>Following results can be seen：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/scatter-tutorial-dataZoom-3&edit=1&reset=1\" width=\"600\" height=\"300\" ></iframe>\n\n\n\n\n\n\n\n"
      },
      "Adaptive mobile end\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<p>ECharts works in dom node with user assigned height and width, ECharts『component』and『series』are all in this dom node, location of every node can be assigned by user. Dom document flow may not be used for layout inside chart bank, but similar and simole absolute layout can be realized. Sometimes when container size are extreme, this method can not avoid overlapping component automatically, especially on small screens of mobile end.</p>\n<p>Besides, sometimes one chart may need to be displayed on PC and mobile end at the same time, this needs inner components of ECharts to change along with container size.</p>\n<p>To solve this problem, ECharts has improved location setting of component and realized self-adaptive ability similiar to <a href=\"http://www.w3.org/TR/css3-mediaqueries/\" target=\"_blank\">CSS Media Query</a>.</p>\n<p><br></p>\n<h2>Location and layout of ECharts component</h2>\n\n\n<p>Most『component』and『series』follow two locating methods：</p>\n<p><br>\n<strong>left/right/top/bottom/width/height locating method：</strong></p>\n<p>In the six measures, each one can be 『absolute value』or『percentage』or『location description』.</p>\n<ul>\n<li><p>Absolute value</p>\n<p>  unit is browser pixels（px）, write with <code>number</code>（no unit）, such as <code>{left: 23, height: 400}</code>。</p>\n</li>\n<li><p>percentage</p>\n<p>  representing the percentage of height and width of dom container, write with <code>string</code>, such as <code>{right: &#39;30%&#39;, bottom: &#39;40%&#39;}</code>.</p>\n</li>\n<li><p>location description</p>\n<ul>\n<li>capable to set <code>left: &#39;center&#39;</code>, stands for centered horizontally.</li>\n<li>capable to set <code>top: &#39;middle&#39;</code>, stands for centered vertically.</li>\n</ul>\n</li>\n</ul>\n<p>The concept of these six measures is similar to the six ones in css：</p>\n<ul>\n<li>left：distance to left border of dom container.</li>\n<li>right：distance to right border of dom container.</li>\n<li>top：distance to top border of dom container.</li>\n<li>bottom：distance to bottom border of dom container.</li>\n<li>width：width.</li>\n<li>height：height.</li>\n</ul>\n<p>In the three horizontal measures of <code>left</code>、<code>right</code>、<code>width</code> , two is enough, because any two values can determine component location and size, such as <code>left</code> and <code>right</code> or <code>right</code> and <code>width</code> can all determine component location and size.\nThree vertical measures of<code>top</code>,<code>bottom</code> and <code>height</code> are same as the horizontal one, details will not be elaborated here.</p>\n<p><br>\n<strong>Locating method of center/radius ：</strong></p>\n<ul>\n<li><p><code>center</code></p>\n<p>  is an array, representing <code>[x, y]</code>, among which x、y can be『absolute value』or『percentage』, meaning is the same as described before.</p>\n</li>\n<li><p><code>radius</code></p>\n<p>  is an array, representing <code>[inner radius, outer radius]</code>, , among which inner and outer radius can be『absolute value』or『percentage』, meaning is the same as described before.</p>\n<p>  When adapting to container size, perventage setting turns out to be very useful.</p>\n</li>\n</ul>\n<p><br>\n<strong>Horizontal（horizontal）and vertical（vertical）</strong></p>\n<p>『narrow appearance』ECharts component（such as <code>legend</code>,<code>visualMap</code>,<code>dataZoom</code>,<code>timeline</code> and so on）, mostly provide options like『horizontal layout』『vertical layout』.For example, on a narrow and long screen of mobile end,『vertical layout』may be more appropriate；『horizontal layout』may be more appropriate on PC wide screen.</p>\n<p>Settings of horizontal and vertical layout are usually located in『component』or <code>orient</code> or <code>layout</code> configuration of『series』, set to <code>&#39;horizontal&#39;</code> or <code>&#39;vertical&#39;</code>.</p>\n<p><br>\n<strong>About ECharts2 compatibility：</strong></p>\n<p>Naming of <code>x/x2/y/y2</code> in ECharts2 is still compatible, corresponding to <code>left/right/top/bottom</code>. But <code>left/right/top/bottom</code> is recommended.</p>\n<p>In the position description is compatible  ECharts2, some weirdly-looking setting is also  supported: <code>left: &#39;right&#39;</code>,<code>left: &#39;left&#39;</code>,<code>top: &#39;bottom&#39;</code>,<code>top: &#39;top&#39;</code>. These words equal to: <code>right: 0</code>、<code>left: 0</code>、<code>bottom: 0</code>、<code>top: 0</code>, when written in the later way, it is not weird.</p>\n<p><br></p>\n<h2>Media Query</h2>\n\n<p><a href=\"http://www.w3.org/TR/css3-mediaqueries/#media1\" target=\"_blank\">Media Query</a> provides the ability『change along with container size』</p>\n<p>In the example below you can try to drag <strong>point in the lower right corner</strong>, along with the size change, legend and series will change layout position and method automatically. </p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/pie-media&edit=1&reset=1\" width=\"750\" height=\"600\" ></iframe>\n\n\n<p>If you want to set Media Query in option, the framework below must be followed：</p>\n<pre><code class=\"lang-javascript\">option = {\n    baseOption: { // Here is the basic『atom option』.\n        title: {...},\n        legend: {...},\n        series: [{...}, {...}, ...],\n        ...\n    },\n    media: [ // every rule of media query is defined here.\n        {\n            query: {...},   // write rule here.\n            option: {       // write options met this rule here.\n                legend: {...},\n                ...\n            }\n        },\n        {\n            query: {...},   // second rule.\n            option: {       // corresponding option of the second rule.\n                legend: {...},\n                ...\n            }\n        },\n        {                   // There is no rule written here, meaning『by default』,\n            option: {       // when all rules are not met, adopt this option.\n                legend: {...},\n                ...\n            }\n        }\n    ]\n};\n</code></pre>\n<p>In the exemplary framework, <code>baseOption</code> and every option in <code>media</code> is『atom option』, namely normal option that includes all components and series definition. <code>baseOption</code> must be used, besides when certain <code>query</code> is met, corresponding option will be merged by using chart.mergeOption().</p>\n<p><strong>query：</strong></p>\n<p>Each <code>query</code> is like this to some extend：</p>\n<pre><code class=\"lang-javascript\">{\n    minWidth: 200,\n    maxHeight: 300,\n    minAspectRatio: 1.3\n}\n</code></pre>\n<p>By now three attributes are supported:<code>width</code>、<code>height</code>、<code>aspectRatio</code>（lenght-to-width ratio）. Every attribute can add prefix of <code>min</code> or <code>max</code>, such as <code>minWidth: 200</code> stands for『greater than or equal to 200px width』.When two attributes are written together means『and』, for example：<code>{minWidth: 200, maxHeight: 300}</code> stands for『greater than or equal to 200px width and smaller than or equal to 300px height』.</p>\n<p><strong>option：</strong></p>\n<p>Since option in <code>media</code> is『atom option』, theoratically configuration item of any optioncan be written. But usually we only write those related to layout, such as intercepting part of query option in the example above：</p>\n<pre><code class=\"lang-javascript\">media: [\n    ...,\n    {\n        query: {\n            maxAspectRatio: 1           // when length-to-width ratio is less than 1.\n        },\n        option: {\n            legend: {                   // legend is placed in the middle of the bottom.\n                right: &#39;center&#39;,\n                bottom: 0,\n                orient: &#39;horizontal&#39;    // horizontal layout of legend.\n            },\n            series: [                   // left and right layout of two pie charts.\n                {\n                    radius: [20, &#39;50%&#39;],\n                    center: [&#39;50%&#39;, &#39;30%&#39;]\n                },\n                {\n                    radius: [30, &#39;50%&#39;],\n                    center: [&#39;50%&#39;, &#39;70%&#39;]\n                }\n            ]\n        }\n    },\n    {\n        query: {\n            maxWidth: 500               // when container width is less than 500.\n        },\n        option: {\n            legend: {\n                right: 10,              // legend is placed in the middle of the right.\n                top: &#39;15%&#39;,\n                orient: &#39;vertical&#39;      // vertical layout.\n            },\n            series: [                   // up and down layout of two pie charts.\n                {\n                    radius: [20, &#39;50%&#39;],\n                    center: [&#39;50%&#39;, &#39;30%&#39;]\n                },\n                {\n                    radius: [30, &#39;50%&#39;],\n                    center: [&#39;50%&#39;, &#39;75%&#39;]\n                }\n            ]\n        }\n    },\n    ...\n]\n</code></pre>\n<p><strong>Priority when multiple query are satisfied：</strong></p>\n<p>Attention: When multiple <code>query</code> are being satisfied at the same time, all will be defined by mergeOption and those are difined later will be merged（those with higher priority）.</p>\n<p><strong>query by default：</strong></p>\n<p>If certain item in <code>media</code> is not <code>query</code>, then it means『default value』, namely when all the rules are not met,  dapot this option.</p>\n<p><strong>Pay attention when container size changes with time：</strong></p>\n<p>In many circumstances, the container DOM node doesn&#39;t need to change size with dragging, but only need to set several classic size based on different end.</p>\n<p>But if the container DOM node needs to change size with dragging, attention needs to be paied to this: if certain configuration item appears in certain <code>query option</code>, then it should also appeared in other <code>query option</code>, or it would not return to the original state.（<code>left/right/top/bottom/width/height</code> does not subject to the restrictions）</p>\n<p><br>\nLast let&#39;s see an example combined with time:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/bar-media-timeline&edit=1&reset=1\" width=\"750\" height=\"700\" ></iframe>\n\n\n\n\n\n\n"
      },
      "Data visual map\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<p>Data visualization is the mapping process from  <strong>data</strong> to <strong>visual element</strong>（this process can also be called visual code, visual element can also be called visual tunnel）.</p>\n<p>Each chart in ECharts has this mapping process in itself, such as line chart maps data to『line』and bar chart maps data to『length』.Some more complicated charts, such as <code>graph</code>, <code>event river map</code> and <code>treemap</code> all does inner mapping.</p>\n<p>Besides, ECharts also uses <a href=\"option.html#visualMap\" target=\"_blank\">viusalMap component</a> to provide universal visual mapping. Visual elements available in <code>visualMap</code> component are：<br>\n<code>graphic category（symbol）</code>,<code>graphic size（symbolSize）</code><br>\n<code>color（color）</code>,<code>color transparency（colorAlpha）</code>,<br>\n<code>color lightness（colorLightness）</code>,<code>color saturation（colorSaturation）</code> and <code>hue（colorHue）</code></p>\n<p>Below is a brief introduction of how to use <code>visualMap</code> component.</p>\n<p><br></p>\n<h2>Data and dimension</h2>\n\n<p>Data in ECharts are usually stored in<a href=\"option.html#series.data\" target=\"_blank\">series.data</a>. Specific format of data may differ based on different chart type, such as『line chart』,『tree』,『chart』 and so on. But they all something in common: they are all collection of 『data item（dataItem）』. Every data item has『data value（value）』and other information（if needed）. Every data value can be a single value（one-dimensional）or an array（multi-dimensional）.</p>\n<p>For example, <a href=\"option.html#series.data\" target=\"_blank\">series.data</a> is the most common format ,『line chart』, namely a common array:</p>\n<pre><code class=\"lang-javascript\">series: {\n    data: [\n        {       // every item here is a data item（dataItem）\n            value: 2323, // this is data value（value） of data item\n            itemStyle: {...}\n        },\n        1212,   // it can also be value of dataItem, which is more common.\n        2323,   // each value is『one-dimensional』\n        4343,\n        3434\n    ]\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">series: {\n    data: [\n        {                        // every item here is a data item（dataItem）\n            value: [3434, 129,  &#39;San Marino&#39;], // this is data value（value） of data item\n            itemStyle: {...}\n        },\n        [1212, 5454, &#39;Vatican&#39;],   //  it can also be value of dataItem, which is more common.\n        [2323, 3223, &#39;Nauru&#39;],     // each value is『three-dimensional』, each column is a dimension.\n        [4343, 23,   &#39;Tuvalu&#39;]    // if it is『bubble chart』, mapping the first dimension to x axis is very common,\n                                 // map the second dimension to y axis,\n                                 // map the third dimension to bubble radius（symbolSize）\n    ]\n}\n</code></pre>\n<p>In chart, first two dimensions of value are always mapped by default, such as map the first dimension to x axis and map the second dimension to y axis. If you want to display more dimensions, can use <code>visualMap</code> to help. The most common situation is <a href=\"option.html#scatter\" target=\"_blank\">bubble chart（scatter）</a> using radius to display the third dimension.</p>\n<p><br></p>\n<h2>visualMap component</h2>\n\n<p>visualMap component defines map『which dimension』of data to『what visual element』.</p>\n<p>Now there are two types of visualMap component below, which can be distinguished through <a href=\"option.html#visualMap.type\" target=\"_blank\">visualMap.type</a> .</p>\n<p>Here is the example of definition structure:</p>\n<pre><code class=\"lang-javascript\">option = {\n    visualMap: [ // capable of defining multiple visualMap component at the same time.\n        { // first visualMap component\n            type: &#39;continuous&#39;, // define as continuous viusalMap\n            ...\n        },\n        { // second visualMap component\n            type: &#39;piecewise&#39;, // define as segmented visualMap\n            ...\n        }\n    ],\n    ...\n};\n</code></pre>\n<p><br>\n<a href=\"option.html#visualMap-continuous\" target=\"_blank\">Continuous（visualMapContinuous）</a>：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/map-visualMap-continuous&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n<p><a href=\"option.html#visualMap-piecewise\" target=\"_blank\">Segmented（visualMapPiecewise）</a>：</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/scatter-visualMap-piecewise&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n<p><br>\nThere are three pattern of segmented visual map component（visualMapPiecewise）:</p>\n<ul>\n<li>Average segment of continuous data : based on <a href=\"option.html#visualMap-piecewise.splitNumber\" target=\"_blank\">visualMap-piecewise.splitNumber</a> to segment into several pieces automatically.</li>\n<li>Customizedsegment of continuous data: based on <a href=\"option.html#visualMap-piecewise.pieces\" target=\"_blank\">visualMap-piecewise.pieces</a> to define range of each piece. </li>\n<li>Discrete data（category data）: category is defined in <a href=\"option.html#visualMap-piecewise.categories\" target=\"_blank\">visualMap-piecewise.categories</a> .</li>\n</ul>\n<p><br>\n<strong>configuration of visual mapping method</strong></p>\n<p>Since it is the map from『data』to『visual element』,so in<code>visualMap</code> data of『which dimension』can be assigned（see <a href=\"#visualMap.dimension\">visualMap.dimension</a>）can map to which『visual element』（please see in <a href=\"option.html#visualMap.inRange\" target=\"_blank\">visualMap.inRange</a> and <a href=\"option.html#visualMap.outOfRange\" target=\"_blank\">visualMap.outOfRange</a>）.</p>\n<p>Example 1：</p>\n<pre><code class=\"lang-javascript\">option = {\n    visualMap: [\n        {\n            type: &#39;piecewise&#39;\n            min: 0,\n            max: 5000,\n            dimension: 3,       // the fourth dimension（ value[3]） of series.data is mapped\n            seriesIndex: 4,     // map the fourth series.\n            inRange: {          // visual configuration within selected range\n                color: [&#39;blue&#39;, &#39;#121122&#39;, &#39;red&#39;], // define color list of graphic color mapping,\n                                                    // map the minimum data value to &#39;blue&#39;, \n                                                    // map the maximum data value to&#39;red&#39;, \n                                                    // the rest will be linear calculated automatically.\n                symbolSize: [30, 100]               // define map range of graphic size,\n                                                    // map the minimum data value to 30, \n                                                    // map the maximum data value to 100, \n                                                    //  the rest will be linear calculated automatically.\n            },\n            outOfRange: {       // visual configuration outside selected range\n                symbolSize: [30, 100]\n            }\n        },\n        ...\n    ]\n};\n</code></pre>\n<p>Example 2：</p>\n<pre><code class=\"lang-javascript\">option = {\n    visualMap: [\n        {\n            ...,\n            inRange: {          // visual configuration within selected range\n                colorLightness: [0.2, 1], // map to transparency, which manages intensity of the original color.\n                                          // Original color may be chosen from global swatch, which has nothing to do with visualMap component.\n                symbolSize: [30, 100]\n            },\n            ...\n        },\n        ...\n    ]\n};\n</code></pre>\n<p>For more details, please see<a href=\"option.html#visualMap.inRange\" target=\"_blank\">visualMap.inRange</a> and<a href=\"option.html#visualMap.outOfRange\" target=\"_blank\">visualMap.outOfRange</a>.</p>\n"
      },
      "Events and actions in ECharts\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<p>User&#39;s operation all trigger corresponding event in ECharts, developer can monitor these events and handle accordingly through callback function, such as jump to an address or pop up dialog box, or drill down data and so on.</p>\n<p>Bind events in ECharts 3 and 2 all use <a href=\"api.html#EChartsInstance.on\" target=\"_blank\">on</a> ,  but event name is much simpler than it is in 2, events that are same as dom events all use string of lowercase, below is an example of binding click operation.</p>\n<pre><code class=\"lang-js\">myChart.on(&#39;click&#39;, function (params) {\n    // data name console prints\n    console.log(params.name);\n});\n</code></pre>\n<p>Events in ECharts are divided into two types, one is events triggered by user&#39;s mouse clicking or hovering chart graphic, another is action events triggered by user&#39;s using of interactive component, such as  <a href=\"api.html#events.legendselectchanged\" target=\"_blank\">&#39;legendselectchanged&#39;</a> event （attention: change legend switch will not trigger <code>&#39;legendselected&#39;</code> event） triggered by changing legend switch, <a href=\"api.html#events.legendselectchanged\" target=\"_blank\">&#39;datazoom&#39;</a> event triggered by zooming data area and so on.</p>\n<h2 id=\"handling-of-mouse-event\">Handling of mouse event</h2>\n<p>ECharts support normal mouse event type including <code>&#39;click&#39;</code>, <code>&#39;dblclick&#39;</code>, <code>&#39;mousedown&#39;</code>, <code>&#39;mousemove&#39;</code>, <code>&#39;mouseup&#39;</code>, <code>&#39;mouseover&#39;</code>, <code>&#39;mouseout&#39;</code> event, next let&#39;s see an example of Baidu search page after opening a simple click bar chart.</p>\n<pre><code class=\"lang-js\">// Based on prepared dom, initialize ECharts example\nvar myChart = echarts.init(document.getElementById(&#39;main&#39;));\n\n// data and configuration item of specified chart\nvar option = {\n    xAxis: {\n        data: [&quot;shirt&quot;,&quot;cardign&quot;,&quot;chiffon shirt&quot;,&quot;pants&quot;,&quot;heels&quot;,&quot;socks&quot;]\n    },\n    yAxis: {},\n    series: [{\n        name: &#39;sales&#39;,\n        type: &#39;bar&#39;,\n        data: [5, 20, 36, 10, 10, 20]\n    }]\n};\n// Use specified configuration item and data to show chart.\nmyChart.setOption(option);\n// handle click event and adjust to corresponding Baidu search page\nmyChart.on(&#39;click&#39;, function (params) {\n    window.open(&#39;https://www.baidu.com/s?wd=&#39; + encodeURIComponent(params.name));\n});\n</code></pre>\n<p><code>params</code> of all mouse events is an object that contains data information of charts, format is as followed：</p>\n<pre><code class=\"lang-js\">{\n    // series index in incoming option.series \n    seriesIndex: number,\n    // series name\n    seriesName: string,\n    // data name, category name\n    name: string,\n    // data index in incoming data array\n    dataIndex: number,\n    // incoming rwa data item\n    data: Object,\n    // incoming data value\n    value: number|Array\n}\n</code></pre>\n<p>After getting data name and series name of this object in callback function, and other information in the data index, you can update charts, show floating layer and so on, Sample code is as followed：</p>\n<pre><code class=\"lang-js\">myChart.on(&#39;click&#39;, function (parmas) {\n    $.get(&#39;detail?q=&#39; + params.name, function (detail) {\n        myChart.setOption({\n            series: [{\n                name: &#39;pie&#39;,\n                // display data distribution in single post through pie chart \n                data: [detail.data]\n            }]\n        });\n    });\n});\n</code></pre>\n<h2 id=\"component-interaction-event\">component interaction event</h2>\n<p>Basically all component interaction in ECharts trigger corresponding event, frequently used events and corresponding parameters are listed in <a href=\"api.html#events\" target=\"_blank\">events</a>.</p>\n<p>Below is example that monitors a legend switch:</p>\n<pre><code class=\"lang-js\">// Action of legend switch only trigger legendselectchanged event\nmyChart.on(&#39;legendselectchanged&#39;, function (params) {\n    // obtain selected status of clicked legend\n    var isSelected = params.selected[params.name];\n    // print console.log((isSelected ? &#39;select&#39; : &#39;unselect&#39;) + &#39;legend&#39; + params.name);\n    // print all legend status\n    console.log(params.selected);\n});\n</code></pre>\n<h2 id=\"actions-of-code-triggering-components-in-echarts\">Actions of code triggering components in ECharts</h2>\n<p>Events like<code>&#39;legendselectchanged&#39;</code> mentioned above wil be triggered by component interaction, except user&#39;s interaction operation, sometimes methods needed to be called to trigger chart, such as show tooltipand select legend.</p>\n<p>ECharts 2.x uses corresponding interface to trigger chart through  <code>myChart.component.tooltip.showTip</code>, entrance is deep and involves organization of inner component. So ECharts 3 triggers chart through <code>myChart.dispatchAction({ type: &#39;&#39; })</code> , by that, ECharts 3 can not only manage all actions but also record user paths based on needs. \nFrequently used actions and the parameters of actions are listed in <a href=\"api.html#action\" target=\"_blank\">action</a>.</p>\n<p>Below display how to take turns to highlight each sector of pie chart through<code>dispatchAction</code>.</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/pie-highlight&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n\n\n"
      }
    }
  }
}