{
  "$schema": "http://echarts.baidu.com/doc/json-schem",
  "option": {
    "type": "Object",
    "properties": {
      "echarts": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>Global echarts object, can be obtained by introducing <code>echarts.js</code> in script label or through  <code>require(&#39;echarts&#39;)</code> in AMD environment.</p>\n",
        "properties": {
          "init": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(dom: HTMLDivElement|HTMLCanvasElement, theme?: Object|string, opts?: {\n    devicePixelRatio?: number\n    renderer?: string\n}) =&gt; ECharts\n</code></pre>\n<p>Create a ECharts example, go back to <a href=\"#echartsInstance\">echartsInstance</a>, but you can not initialize multiple ECharts examples on a single container.</p>\n<p><strong>parameter</strong></p>\n<ul>\n<li><p><code>dom</code></p>\n<p>  Example container, usually is an element <code>div</code> with height and width. </p>\n<p>  <strong>Attention：</strong>if <code>div</code> is hidden, ECharts is likely to fail initializing, then you can explicitly specified <code>style.width</code> and <code>style.height</code> of <code>div</code>, or manually adjust sizes of <a href=\"echartsInstance.resize\" target=\"_blank\">echartsInstance.resize</a> after showing <code>div</code>.</p>\n<p>  ECharts 3 supports using <code>canvas</code> element as container directly, thus canvas can be applied somewhere elses as pictures directly after completing chart, for example, canvas can be used as map in WebGL, compared to picture links generated by using  <a href=\"#echartsInstance.getDataURL\">echartsInstance.getDataURL</a> ,this supports hourly update of charts.</p>\n</li>\n<li><p><code>theme</code></p>\n<p>  Theme applied.This can be a configuration object of a theme, or a theme name registered through <a href=\"#echarts.registerTheme\">echarts.registerTheme</a>.</p>\n</li>\n<li><p><code>opts</code></p>\n<p>  Attached parameter.There are several options below:</p>\n<ul>\n<li><p><code>devicePixelRatio</code></p>\n<p> Device pixels, take browser values <code>window.devicePixelRatio</code> by default.</p>\n</li>\n<li><p><code>renderer</code></p>\n<p>  The renderer only supports <code>&#39;canvas&#39;</code> by now.</p>\n</li>\n</ul>\n</li>\n</ul>\n"
          },
          "connect": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(group:string|Array)\n</code></pre>\n<p>Multiple examples of the graph realize linkage.</p>\n<p><strong>parameter：</strong></p>\n<ul>\n<li><code>group</code>\n  group id, or array of chart example.</li>\n</ul>\n<p><strong>For example：</strong></p>\n<pre><code class=\"lang-js\">// set group id of each example respectively.\nchart1.group = &#39;group1&#39;;\nchart2.group = &#39;group1&#39;;\necharts.connect(&#39;group1&#39;);\n// or incoming example array that need to be linked.\necharts.connect([chart1, chart2]);\n</code></pre>\n"
          },
          "disConnect": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(group:string)\n</code></pre>\n<p>Disconnect chart example. If only a single example need to be removed,  you can set this chart example <code>group</code> to empty.</p>\n<p><strong>parameter：</strong></p>\n<ul>\n<li><p><code>group</code></p>\n<p>  group id.</p>\n</li>\n</ul>\n"
          },
          "dispose": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(target: ECharts|HTMLDivElement|HTMLCanvasElement)\n</code></pre>\n<p>Destroy example, this example will not be able to used once destroyed.</p>\n"
          },
          "getInstanceByDom": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(target: HTMLDivElement|HTMLCanvasElement) =&gt; ECharts\n</code></pre>\n<p>Obtain example from dom container.</p>\n"
          },
          "registerMap": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(mapName: string, geoJson: Object, specialAreas?: Object)\n</code></pre>\n<p>Register maps that are available, which can only be used when it includes <a href=\"option.html#geo\" target=\"_blank\">geo</a> component or  chart category of <a href=\"option.html#series-map\" target=\"_blank\">map</a>.</p>\n<p>Ways of usage can refer to <a href=\"option.html#geo.map\" target=\"_blank\">option.geo</a>。</p>\n<p><strong>parameter：</strong></p>\n<ul>\n<li><p><code>mapName</code></p>\n<p>  Map name,  <code>map</code> set in <a href=\"option.html#geo\" target=\"_blank\">geo</a> component or <a href=\"option.html#series-map\" target=\"_blank\">map</a>chart category is value concerned.</p>\n</li>\n<li><p><code>geoJson</code></p>\n<p>  Data if GeoJson format, specific format can refer to <a href=\"http://geojson.org/\" target=\"_blank\">http://geojson.org/</a>.</p>\n</li>\n<li><p><code>specialAreas</code></p>\n<p>  Options.Zoom part of areas in the map to suitbable location can make the whole map look better. </p>\n<p>  <strong>For example <a href=\"http://echarts.baidu.com/gallery/editor.html?c=map-usa\" target=\"_blank\">USA Population Estimates</a>：</strong></p>\n<pre><code class=\"lang-js\">echarts.registerMap(&#39;USA&#39;, usaJson, {\n  // Move Alaska to the bottom left of United States \n  Alaska: {\n      // Upper left longitude\n      left: -131,\n      // Upper left latitude\n      top: 25,\n      // Range of longitude \n      width: 15\n  },\n  // Hawaii\n  Hawaii: {\n      left: -110,\n      top: 28,\n      width: 5\n  },\n  // Puerto Rico\n  &#39;Puerto Rico&#39;: {\n      left: -76,\n      top: 26,\n      width: 2\n  }\n});\n</code></pre>\n</li>\n</ul>\n"
          },
          "registerTheme": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(themeName: string, theme: Object)\n</code></pre>\n<p>register theme, which is specified when<a href=\"#echarts.init\">initialize example</a>.</p>\n"
          }
        }
      },
      "echartsInstance": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>Example created through <a href=\"#echarts.init\">echarts.init</a>.</p>\n",
        "properties": {
          "group": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>chart group is used to <a href=\"#echarts.connect\">linkage</a></p>\n"
          },
          "setOption": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(option: Object, notMerge: boolean, notRefreshImmediately: boolean)\n</code></pre>\n<p>set the configuration item, data and universal interface of chart example, all parameters and data can all be modified through <code>setOption</code>, ECharts will according merge new parameters and data, then refresh chart. If enable <a href=\"#option.animation\">animation</a>, ECharts will find the difference between two data and show data change through proper animation.</p>\n<p><strong>For example：</strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=dynamic-data&reset=1&edit=1\" width=\"500\" height=\"400\" ></iframe>\n\n\n<p><strong>Attention：</strong> Through <code>addData</code> in ECharts 2.x, use <code>setSeries</code> to set configuration item is no longer supported, so need to use <code>setOption</code> in ECharts 3, you can refer to the above example.</p>\n<p><strong>parameter：</strong></p>\n<ul>\n<li><p><code>option</code></p>\n<p>  configuration item and data of chart can refer to <a href=\"option.html\" target=\"_blank\">configuration item manual</a>。</p>\n</li>\n<li><p><code>notMerge</code></p>\n<p>  Option. Specifies whether not to merge with <code>option</code> set before, set to<code>false</code> by defualt, namely merge.</p>\n</li>\n<li><p><code>notRefreshImmediately</code></p>\n<p>  Option.Specifies whether not to refresh cavas immediately,set to<code>false</code> by defualt, namely refresh immediately.</p>\n</li>\n</ul>\n"
          },
          "getWidth": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">() =&gt; number\n</code></pre>\n<p>Get width of ECharts example container.</p>\n"
          },
          "getHeight": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">() =&gt; number\n</code></pre>\n<p>Get height of ECharts example container.</p>\n"
          },
          "getDom": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">() =&gt; HTMLCanvasElement|HTMLDivElement\n</code></pre>\n<p>Get dom node of ECharts example container.</p>\n"
          },
          "getOption": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">() =&gt; Object\n</code></pre>\n<p>Get <code>option</code> object maintained in previous example, <code>option</code> returned includes configuration item and data obtained from multiple <code>setOption</code> merge by users, interactive status of users are also recorded, for example, graphic switch, zoom range of data area and so on. Therefore, from this option you can recover or get a brand new but same example.</p>\n<p><strong>Attention：</strong>Attribute value in each component of the returned option is an array, no matter incoming <code>setOption</code> is single component or array of multiple components.\nFor example：</p>\n<pre><code class=\"lang-js\">{\n    title: [{...}],\n    legend: [{...}],\n    grid: [{...}]\n}\n</code></pre>\n"
          },
          "resize": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<p>Resize graphic, but need to adjust manually when container size changes.</p>\n<p><strong>Tip:</strong> Sometimes charts will be placed in multiple label pages, those initially hidden label could have drawing failures because actual height and width of container can not be obtained. So you need to manually use <code>resize</code> to get right height and width and then refresh canvas when switch to this label page.</p>\n"
          },
          "dispatchAction": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(payload: Object)\n</code></pre>\n<p>Trigger graphic action, for example graphic switch <code>legendToggleSelect</code>,zoom data area <code>dataZoom</code> , show tooltip <code>showTip</code> and so on.See more in <a href=\"#action\">action</a> and <a href=\"#events\">events</a> document.</p>\n<p><code>payload</code>parameter can trigger multiple actions through <code>batch</code> attribute simultaneously.</p>\n<p><strong>Attention：</strong>In ECharts 2.x,through <code>myChart.component.tooltip.showTip</code>, this form invokes related interface to trigger graphic action,entrance is deep and involves organization in inner component. So switch to  <code>dispatchAction</code> in ECharts 3.</p>\n<p><strong>For example</strong></p>\n<pre><code class=\"lang-js\">myChart.dispatchAction({\n    type: &#39;dataZoom&#39;,\n    start: 20,\n    end: 30\n});\n// Through batch parameter you can dispatch many action \nmyChart.dispatchAction({\n    type: &#39;dataZoom&#39;,\n    batch: [{\n        // first dataZoom component\n        start: 20,\n        end: 30\n    }, {\n        // second dataZoom component\n        dataZoomIndex: 1,\n        start: 10,\n        end: 20\n    }]\n})\n</code></pre>\n"
          },
          "on": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(eventName: string, handler: Function, context?: Object)\n</code></pre>\n<p>Bind event-handling function.</p>\n<p>There are two kinds of events in ECharts, one is mouse event, which will trigger when mouse click certain picture, another kind triggers event after dispatches <a href=\"#echartsInstance.dispatchAction\">dispatchAction</a>. Every action has cooresponding event, details can be referred to in <a href=\"#action\">action</a> and<a href=\"#events\">events</a> document.</p>\n<p>If event is triggered by <a href=\"#echartsInstance.dispatchAction\">dispatchAction</a>, and there are bulk actions triggered by batch attribute in action, then related event parameter will also put all attribute in batch.</p>\n<p><strong>parameter：</strong></p>\n<ul>\n<li><p><code>eventName</code></p>\n<p>  Event names are all in lowecase, for example <code>&#39;click&#39;</code>, <code>&#39;mousemove&#39;</code>, <code>&#39;legendselected&#39;</code></p>\n<p>  <strong>Attention：</strong> In ECharts 2.x <code>CLICK</code> attribut in <code>config</code> object can be used as event name. In ECharts 3,use the same lowercase string as dom event as event name.</p>\n</li>\n<li><p><code>handler</code></p>\n<p>  Event-handling function, format is as followed:</p>\n<pre><code class=\"lang-js\">  (event: Object)\n</code></pre>\n</li>\n<li><p><code>context</code></p>\n<p>  Option. <code>context</code> inside callback function is what <code>this</code> refers.</p>\n</li>\n</ul>\n"
          },
          "off": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(eventName: string, handler?: Function)\n</code></pre>\n<p>Unbind event-handler function.</p>\n<p><strong>parameter：</strong></p>\n<ul>\n<li><p><code>eventName</code></p>\n<p>  Event name.</p>\n</li>\n<li><p><code>handler</code></p>\n<p>  Option.You can incoming handler function that needs to be unbound, if not, unbind all event functions of this category.</p>\n</li>\n</ul>\n"
          },
          "showLoading": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(type?: string, opts?: Object)\n</code></pre>\n<p>Show loading animation effect. You can manually adjust interface before loading data, and use <a href=\"#echartsInstance.hideLoading\">hideLoading</a> to hide loading animation after completing animation loading.</p>\n<p><strong>parameter：</strong></p>\n<ul>\n<li><p><code>type</code></p>\n<p>  Option. types of loading animation, there is only <code>&#39;default&#39;</code> by far.</p>\n</li>\n<li><p><code>opts</code></p>\n<p>  Option. Configuration item of loading animation, which is related to <code>type</code>, followings are the default configuration item ：</p>\n<pre><code class=\"lang-js\">default: {\n  text: &#39;loading&#39;,\n  color: &#39;#c23531&#39;,\n  textColor: &#39;#000&#39;,\n  maskColor: &#39;rgba(255, 255, 255, 0.8)&#39;,\n  zlevel: 0\n}\n</code></pre>\n</li>\n</ul>\n"
          },
          "hideLoading": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<p>Hide animation loading effect.</p>\n"
          },
          "getDataURL": {
            "type": [
              "Function"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(opts: {\n    // Exporting format can be chosen between png, jpeg\n    type?: string,\n    // Resolution ratio of exporting picture is 1 by default.\n    pixelRatio?: number,\n    // Background color of exporting picture use backgroundColor in option by default.\n    backgroundColor?: string\n}) =&gt; string\n</code></pre>\n<p>Exporting picture chart , return a base64 url, can set to <code>src</code> in <code>Image</code>.</p>\n<p><strong>For example：</strong></p>\n<pre><code class=\"lang-js\">var img = new Image();\nimg.src = myChart.getDataURL({\n    pixelRatio: 2,\n    backgroundColor: &#39;#fff&#39;\n});\n</code></pre>\n"
          },
          "getConnectedDataURL\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">(opts: {\n    // Exporting format can be chosen between png, jpeg\n    type: string,\n    // Resolution ratio of exporting picture is 1 by default.\n    pixelRatio: number,\n    // Background color of exporting picture use backgroundColor in option by default.\n    backgroundColor: string\n}) =&gt; string\n</code></pre>\n<p>Exporting linked chart picture, return a base64 url, you can set to <code>src</code> in <code>Image</code>.Relative location of each chart in exporting picture is related to that of container.</p>\n"
          },
          "clear\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p>Clear current example will remove all components and charts in current example.After clearing, use <a href=\"#echartsInstance.getOption\">getOption</a> to return <code>{}</code>.</p>\n"
          },
          "isDisposed\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<pre><code class=\"lang-js\">() =&gt; boolean\n</code></pre>\n<p>Specifies whether current example is disposed.</p>\n"
          },
          "dispose\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p>Dispose example, once disposed, example can not be used again.</p>\n"
          }
        }
      },
      "action\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<p>Charts supported in ECharts are triggered through <a href=\"#echartsInstance.dispatchAction\">dispatchAction</a> .</p>\n<p><strong>Attention：</strong>  <code>?:</code>in code representing that  this attribute is optional. <em>EVENT:</em> is the event that action triggers accordingly. </p>\n",
        "properties": {
          "highlight": {
            "type": [
              "Action"
            ],
            "descriptionCN": "<p>Data graphics assigned by highlight.</p>\n<p>Specify series through <code>seriesName</code> or <code>seriesIndex</code>. If another data needs to be specified, then assign another <code>dataIndex</code>or<code>name</code>.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;highlight&#39;,\n    // Series index can be chosen, this can be an array specifying multiple series.\n    seriesIndex?: number|Array,\n    // Series names can be chosen, this can be an array assigning multiple series.\n    seriesName?: string|Array,\n    // options are index of data\n    dataIndex?: number,\n    // options are data name\n    name?: string\n})\n</code></pre>\n"
          },
          "downplay": {
            "type": [
              "Action"
            ],
            "descriptionCN": "<p>Cancel data garphic assigned by highlight. </p>\n<p>Specify series through <code>seriesName</code>or<code>seriesIndex</code>.If another data needs to be assigned , then assign another <code>dataIndex</code>or<code>name</code>.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;downplay&#39;,\n    // Series index can be chosen, this can be an array specifying multiple series.\n    seriesIndex?: number|Array,\n    // Series names can be chosen, this can be an array assigning multiple series.\n    seriesName?: string|Array,\n    // options are index of data\n    dataIndex?: number,\n    // options are data name\n    name?: string\n})\n</code></pre>\n<!--============= legend ==========-->\n"
          },
          "legend\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p><a href=\"option.html#legend\" target=\"_blank\">legend component</a> related acts can not be used before introducing <a href=\"option.html#legend\" target=\"_blank\">legend component</a>.</p>\n",
            "properties": {
              "legendSelect": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Select legend.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;legendSelect&#39;,\n    // Legend name\n    name: string\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.legendselected\">legendselected</a></p>\n"
              },
              "legendUnSelect": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Uncheck the legend.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;legendUnSelect&#39;,\n    // legend name\n    name: string\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.legendunselected\">legendunselected</a></p>\n"
              },
              "legendToggleSelect": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Change the legend selected.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;legendToggleSelect&#39;,\n    // legend name\n    name: string\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.legendselectchanged\">legendselectchanged</a></p>\n<!--============= tooltip ==========-->\n"
              }
            }
          },
          "tooltip\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p><a href=\"option.html#tooltip\" target=\"_blank\">tooltip component</a>related acts can not be used before introducing <a href=\"option.html#tooltip\" target=\"_blank\">tooltip component</a>.</p>\n",
            "properties": {
              "showTip": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Show tip.</p>\n<p>There are two ways as followed. </p>\n<p>1 Display a tooltip at the specified location  in the relative container, if it cannot be displayed at the specified location,then it  is not valid.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;showTip&#39;,\n    // x coordinate on screen\n    x: number,\n    // y coordinate on screen\n    y: number\n})\n</code></pre>\n<p>2 Specifying the data graphics, display a tooltip according to the tooltip configuration items.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;showTip&#39;,\n    // index of series, which is optional when trigger of tooltip is axis.\n    seriesIndex?: number,\n    //If index of data is not specified, data can also be specified through name attribute based on name. \n    dataIndex?: number,\n    // Data names can be chosen, but can be ingored when dataIndex exists.\n    name?: string\n})\n</code></pre>\n"
              },
              "hideTip": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Hide tip.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;hideTip&#39;\n})\n</code></pre>\n<!--============= dataZoom ==========-->\n"
              }
            }
          },
          "dataZoom\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p><a href=\"option.html#dataZoom\" target=\"_blank\">data region zoom component</a>related acts can not be used before introducing <a href=\"option.html#dataZoom\" target=\"_blank\">data region zoom component</a>.</p>\n",
            "properties": {
              "dataZoom": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Zoom data region.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;dataZoom&#39;,\n    // Options are open, index of dataZoom component, available when there are multiple dataZoom components, it is 0 by default.\n    dataZoomIndex: number,\n    // data value at starting location, 0 - 100\n    start: number,\n    // data value at finishing location, 0 - 100\n    end: number,\n    // data value at starting location\n    startValue: number,\n    // data value at finishing location\n    endValue: number\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.datazoom\">datazoom</a></p>\n<!--============= visualMap ==========-->\n"
              }
            }
          },
          "visualMap\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p><a href=\"option.html#visualMap\" target=\"_blank\">visual mapping component</a>related acts can not be used before introducing<a href=\"option.html#visualMap\" target=\"_blank\">visual mapping component</a>.</p>\n",
            "properties": {
              "selectDataRange": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Select data value range of map.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;selectDataRange&#39;,\n    // Options are open, index of visualMap component, available when there are multiple visualMap components, it is 0 by default.\n    visualMapIndex: number,\n    // Continuous visualMap is different from discrete visualMap \n    // Continuous visualMap is an array that representing data value range.\n    // Discrete visualMap is an object, the key value is the index of the category or section.Value is `true`, `false`\n    selected: Object|Array\n})\n</code></pre>\n<p>?\n<strong>For example：</strong></p>\n<pre><code class=\"lang-js\">myChart.dispatchAction({\n    type: &#39;selectDataRange&#39;,\n    // Select a value range between 20 and 40 \n    selected: [20, 40],\n    // Cancel selecting second paragraph\n    selected: { 1: false },\n    // Cancel the selected category `excellent`\n    selected: { &#39;excellent&#39;: false }\n});\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.datarangeselected\">datarangeselected</a></p>\n<!--============= timeline ==========-->\n"
              }
            }
          },
          "timeline\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p><a href=\"option.html#timeline\" target=\"_blank\">timeline component</a>related acts can not be used before introducing<a href=\"option.html#timeline\" target=\"_blank\">timeline component</a>.</p>\n",
            "properties": {
              "timelineChange": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Set the current time point.。</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;timelineChange&#39;,\n    // index of time point\n    currentIndex: number\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.timelinechanged\">timelinechanged</a></p>\n"
              },
              "timelinePlayChange": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Switch timeline to play status.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;timelinePlayChange&#39;,\n    // state of play, true is auto-play\n    playState: boolean\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.timelineplaychanged\">timelineplaychanged</a></p>\n<!--============= toolbox ==========-->\n"
              }
            }
          },
          "toolbox\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p><a href=\"option.html#toolbox\" target=\"_blank\">toolbar component</a>related acts can not be used before introducing<a href=\"option.html#toolbox\" target=\"_blank\">toolbar component</a>.</p>\n",
            "properties": {
              "restore": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Reset option.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;restore&#39;\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.restore\">restore</a>\n<!--============= pie ==========--></p>\n"
              }
            }
          },
          "pie\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p><a href=\"option.html#series-pie\" target=\"_blank\">pie chart</a>related acts can not be used before introducing<a href=\"option.html#series-pie\" target=\"_blank\">pie chart</a>.</p>\n",
            "properties": {
              "pieSelect": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Select the specified pie chart.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;pieSelect&#39;,\n    // Series index can be chosen, this can be an array specifying multiple series.\n    seriesIndex?: number|Array,\n    // Series names can be chosen, this can be an array assigning multiple series.\n    seriesName?: string|Array,\n    //If index of data is not specified, data can also be specified through name attribute based on name. \n    dataIndex?: number,\n    // Data names can be chosen, but can be ingored when dataIndex exists.\n    name?: string\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.pieselected\">pieselected</a></p>\n"
              },
              "pieUnSelect": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Cancel the selected specified pie chart.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;pieUnSelect&#39;,\n    // Series index can be chosen, this can be an array specifying multiple series.\n    seriesIndex?: number|Array,\n    // Series names can be chosen, this can be an array assigning multiple series.\n    seriesName?: string|Array,\n    //If index of data is not specified, data can also be specified through name attribute based on name. \n    dataIndex?: number,\n    // Data names can be chosen, but can be ingored when dataIndex exists.\n    name?: string\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.pieunselected\">pieunselected</a></p>\n"
              },
              "pieToggleSelect": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Change the selected status of specified pie chart.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;pieToggleSelect&#39;,\n    // Series index can be chosen, this can be an array specifying multiple series.\n    seriesIndex?: number|Array,\n    // Series names can be chosen, this can be an array assigning multiple series.\n    seriesName?: string|Array,\n    //If index of data is not specified, data can also be specified through name attribute based on name. \n    dataIndex?: number,\n    // Data names can be chosen, but can be ingored when dataIndex exists.\n    name?: string\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.pieselectchanged\">pieselectchanged</a></p>\n<!--============= map ==========-->\n"
              }
            }
          },
          "map\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p><a href=\"option.html#series-map\" target=\"_blank\">map</a>related acts can not be used before introducing <a href=\"option.html#series-map\" target=\"_blank\">map</a>.</p>\n",
            "properties": {
              "mapSelect": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Select the specified map area.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;mapSelect&#39;,\n    // Series index can be chosen, this can be an array specifying multiple series.\n    seriesIndex?: number|Array,\n    // Series names can be chosen, this can be an array assigning multiple series.\n    seriesName?: string|Array,\n    //If index of data is not specified, data can also be specified through name attribute based on name. \n    dataIndex?: number,\n    // Data names can be chosen, but can be ingored when dataIndex exists.\n    name?: string\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.mapselected\">mapselected</a></p>\n"
              },
              "mapUnSelect": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Cancel the selected specified map area.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;mapUnSelect&#39;,\n    // Series index can be chosen, this can be an array specifying multiple series.\n    seriesIndex?: number|Array,\n    // Series names can be chosen, this can be an array assigning multiple series.\n    seriesName?: string|Array,\n    //If index of data is not specified, data can also be specified through name attribute based on name. \n    dataIndex?: number,\n    // Data names can be chosen, but can be ingored when dataIndex exists.\n    name?: string\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.mapunselected\">mapunselected</a></p>\n"
              },
              "mapToggleSelect": {
                "type": [
                  "Action"
                ],
                "descriptionCN": "<p>Change the selected status of specified map area.</p>\n<pre><code class=\"lang-js\">dispatchAction({\n    type: &#39;mapToggleSelect&#39;,\n    // Series index can be chosen, this can be an array specifying multiple series.\n    seriesIndex?: number|Array,\n    // Series names can be chosen, this can be an array assigning multiple series.\n    seriesName?: string|Array,\n    //If index of data is not specified, data can also be specified through name attribute based on name. \n    dataIndex?: number,\n    // Data names can be chosen, but can be ingored when dataIndex exists.\n    name?: string\n})\n</code></pre>\n<p><strong>EVENT:</strong> <a href=\"#events.mapselectchanged\">mapselectchanged</a></p>\n"
              }
            }
          }
        }
      },
      "events\r": {
        "type": [
          "*"
        ],
        "descriptionCN": "<p>ECharts mainly adds event-handling function through <a href=\"#echartsInstance.on\">on</a>, this document describes all event list in ECharts.</p>\n<p>Event list in ECharts can be divided in two kinds, one is mouse event, which is triggered when mouse clicking certain graphic, another is event triggered after dispatches<a href=\"#echartsInstance.dispatchAction\">dispatchAction</a>.</p>\n",
        "properties": {
          "Mouse event\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "<p>Event parameter is each attribute of event data, See label formatter callback function for each chart type params parameters.</p>\n",
            "properties": {
              "click": {
                "type": [
                  "Event"
                ],
                "descriptionCN": ""
              },
              "dblclick": {
                "type": [
                  "Event"
                ],
                "descriptionCN": ""
              },
              "mousedown": {
                "type": [
                  "Event"
                ],
                "descriptionCN": ""
              },
              "mousemove": {
                "type": [
                  "Event"
                ],
                "descriptionCN": ""
              },
              "mouseup": {
                "type": [
                  "Event"
                ],
                "descriptionCN": ""
              },
              "mouseover": {
                "type": [
                  "Event"
                ],
                "descriptionCN": ""
              },
              "mouseout": {
                "type": [
                  "Event"
                ],
                "descriptionCN": ""
              }
            }
          },
          "legendselectchanged": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.legend.legendToggleSelect\">legendToggleSelect</a>\nChange event after selecting legend.</p>\n<p><strong>Attention：</strong> This event will be triggered when legend component users change legend switch.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;legendselectchanged&#39;,\n    // change legend name\n    name: string\n    // Table of all selected legend.\n    selected: Object\n}\n</code></pre>\n"
          },
          "legendselected": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.legend.legendSelect\">legendSelect</a>\nEvent after selecting legend.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;legendselected&#39;,\n    // Name of selected legend\n    name: string\n    // Table of all selected legend\n    selected: Object\n}\n</code></pre>\n<p><strong>Attention：</strong> In ECharts 2.x, event related to user switch lengend changes from  <code>legendselected</code> to <a href=\"#events.legendselectchanged\">legendselectchanged</a>。</p>\n"
          },
          "legendunselected": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.legend.legendUnSelect\">legendUnSelect</a>\nEvent after unselecting legend.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;legendunselected&#39;,\n    // Name of unselected legend\n    name: string\n    // Table of all selected legend\n    selected: Object\n}\n</code></pre>\n"
          },
          "datazoom": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.dataZoom.dataZoom\">dataZoom</a></p>\n<p>Event after data area zoom.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;datazoom&#39;,\n    // Percentage of zoom of start position, 0 - 100\n    start: number\n    //Percentage of zoom of finish position, 0 - 100\n    end: number\n    // Data value of zoom of start position, only exist in event of zooming toolbar.\n    startValue?: number\n    // Data value of zoom of finish position, only exist in event of zooming toolbar.\n    endValue?: number\n}\n</code></pre>\n"
          },
          "datarangeselected": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.dataRange.selectDataRange\">selectDataRange</a>\nSelected event of data value range of map in visual map component.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;datarangeselected&#39;,\n    // Continuous visualMap is different from discrete visualMap \n    // Continuous visualMap is an array representing range of data value.\n    // Discrete visualMap is an object, key value is the index of category or subparagraph. Value is `true`, `false`\n    selected: Object|Array\n}\n</code></pre>\n"
          },
          "timelinechanged": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.timeline.timelineChange\">timelineChange</a>\nEvent after time point in timeline changes. </p>\n<pre><code class=\"lang-js\">{\n    type: &#39;timelinechanged&#39;,\n    // index of time point\n    currentIndex: number\n}\n</code></pre>\n"
          },
          "timelineplaychanged": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.timeline.timelinePlayChange\">timelinePlayChange</a>\nSwitch event of play state in timeline.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;timelineplaychanged&#39;,\n    // play state, true is auto play\n    playState: boolean\n}\n</code></pre>\n"
          },
          "restore": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.toolbox.restore\">restore</a>\nReset option event.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;restore&#39;\n}\n</code></pre>\n"
          },
          "dataviewchanged": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><a href=\"option.html#toolbox.feature.dataView\" target=\"_blank\">Data view in toolbox</a> change event.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;dataviewchanged&#39;\n}\n</code></pre>\n"
          },
          "magictypechanged": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><a href=\"option.html#toolbox.feature.magicType\" target=\"_blank\">magic type in toolbox</a> change event. </p>\n<pre><code class=\"lang-js\">{\n    type: &#39;magictypechanged&#39;,\n    // click to change current type, same as type attribute in echarts 2.x \n    currentType: string\n}\n</code></pre>\n"
          },
          "pieselectchanged": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.pie.pieToggleSelect\">pieToggleSelect</a></p>\n<p>pie chartchange selected event.</p>\n<p>User will trigger this event by clicking select.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;pieselectchanged&#39;,\n    // series ID, can incoming in option\n    seriesId: string\n    // data name\n    name: name,\n    // table of all selected data.\n    selected: Object\n}\n</code></pre>\n<p><strong>Attention：</strong> This event is the same as event <code>pieSelected</code> in ECharts 2.</p>\n"
          },
          "pieselected": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.pie.pieSelect\">pieSelect</a></p>\n<p>pie chartEvent after selecting.</p>\n<p>Use <code>dispatchAction</code> can trigger this event, but user clicking this event won&#39;t trigger this（User clicking event please use <a href=\"#events.pieselectchanged\">pieselectchanged</a>）.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;pieselected&#39;,\n    // series ID, can incoming in option\n    seriesId: string\n    // data name\n    name: name,\n    // table of all selected data.\n    selected: Object\n}\n</code></pre>\n<p><strong>Attention：</strong>Events corresponding to user switch legend in ECharts 2.x change from <code>pieselected</code> to <a href=\"#events.pieselectchanged\">pieselectchanged</a>.</p>\n"
          },
          "pieunselected": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.pie.pieUnSelect\">pieUnSelect</a></p>\n<p>pie chartCancel selected event.</p>\n<p>Use <code>dispatchAction</code> can trigger this event, but user clicking this event won&#39;t trigger this（User clicking event please use <a href=\"#events.pieselectchanged\">pieselectchanged</a>）.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;pieunselected&#39;,\n    // series ID, can incoming in option\n    seriesId: string\n    // data name\n    name: name,\n    // table of all selected data.\n    selected: Object\n}\n</code></pre>\n"
          },
          "mapselectchanged": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.map.mapToggleSelect\">mapToggleSelect</a></p>\n<p>map regionchange selected event.</p>\n<p>User will trigger this event by clicking select.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;mapselectchanged&#39;,\n    // series ID, can incoming in option\n    seriesId: string\n    // data name\n    name: name,\n    // table of all selected data.\n    selected: Object\n}\n</code></pre>\n<p><strong>Attention：</strong> This event is the same as event <code>mapSelected</code> in ECharts 2.</p>\n"
          },
          "mapselected": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.map.mapSelect\">mapSelect</a></p>\n<p>map regionEvent after selecting.</p>\n<p>Use <code>dispatchAction</code> can trigger this event, but user clicking this event won&#39;t trigger this（User clicking event please use <a href=\"#events.mapselectchanged\">mapselectchanged</a>）.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;mapselected&#39;,\n    // series ID, can incoming in option\n    seriesId: string\n    // data name\n    name: name,\n    // table of all selected data.\n    selected: Object\n}\n</code></pre>\n<p><strong>Attention：</strong>Events corresponding to user switch legend in ECharts 2.x change from <code>mapselected</code> to <a href=\"#events.mapselectchanged\">mapselectchanged</a>.</p>\n"
          },
          "mapunselected": {
            "type": [
              "Event"
            ],
            "descriptionCN": "<p><strong>ACTION:</strong> <a href=\"#action.map.mapUnSelect\">mapUnSelect</a></p>\n<p>map regionCancel selected event.</p>\n<p>Use <code>dispatchAction</code> can trigger this event, but user clicking this event won&#39;t trigger this（User clicking event please use <a href=\"#events.mapselectchanged\">mapselectchanged</a>）.</p>\n<pre><code class=\"lang-js\">{\n    type: &#39;mapunselected&#39;,\n    // series ID, can incoming in option\n    seriesId: string\n    // data name\n    name: name,\n    // table of all selected data.\n    selected: Object\n}\n</code></pre>\n"
          }
        }
      }
    }
  }
}