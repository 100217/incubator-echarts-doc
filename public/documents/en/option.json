{
  "$schema": "http://echarts.baidu.com/doc/json-schem",
  "option": {
    "type": "Object",
    "properties": {
      "title": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>title component, including main heading and subtitle. </p>\n<p>In ECharts 2.x, a single example of ECharts could contains one title component at most. However, in ECharts 3, there could be one or more than one title components which needs layout. It is more useful when multiple diagrams in one example all need titles. </p>\n<p><strong>Here are some examples of different slow-motion functions, among which every slow-motion function has a title component: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=line-easing&edit=1&reset=1\" width=\"700\" height=\"400\" ></iframe>\n\n\n\n",
        "properties": {
          "show": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Secifies whether to show the title component.</p>\n",
            "default": false
          },
          "text": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>the main heading text, supporting <code>\\n</code> to line feed. </p>\n",
            "default": "''"
          },
          "link": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>the hyper link of main heading text.</p>\n",
            "default": "''"
          },
          "target": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>open the hyper link of main heading text in specified window.</p>\n<p><strong>options: </strong></p>\n<ul>\n<li><p><code>&#39;self&#39;</code> opening the current window</p>\n</li>\n<li><p><code>&#39;blank&#39;</code> opening a new window</p>\n</li>\n</ul>\n",
            "default": "'blank'"
          },
          "textStyle\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "",
            "properties": {
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>main headingtext color.</p>\n",
                "default": "'#333'"
              },
              "fontStyle": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>main headingFont style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                "default": "'normal'"
              },
              "fontWeight": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>main headingFont thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                "default": "'border'"
              },
              "fontFamily": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>main headingFont series</p>\n",
                "default": "'sans-serief'"
              },
              "fontSize": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>main headingFont size</p>\n",
                "default": 18
              }
            }
          },
          "subtext": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>subtitle text, supporting <code>\\n</code> to line feed.</p>\n",
            "default": "''"
          },
          "sublink": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>the hyper link of subtitle text.</p>\n",
            "default": "''"
          },
          "subtarget": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p> open the hyper link of main heading text in specified window, options: </p>\n<ul>\n<li><p><code>&#39;self&#39;</code> opening the current window</p>\n</li>\n<li><p><code>&#39;blank&#39;</code> opening a new window</p>\n</li>\n</ul>\n",
            "default": "'blank'"
          },
          "subtextStyle\r": {
            "type": [
              "*"
            ],
            "descriptionCN": "",
            "properties": {
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>subtitletext color.</p>\n",
                "default": "'#aaa'"
              },
              "fontStyle": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>subtitleFont style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                "default": "'normal'"
              },
              "fontWeight": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>subtitleFont thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                "default": "normal"
              },
              "fontFamily": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>subtitleFont series</p>\n",
                "default": "'sans-serief'"
              },
              "fontSize": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>subtitleFont size</p>\n",
                "default": 12
              }
            }
          },
          "padding": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>title internal margin, unit as px,set internal margin of each directions to 5 by default, set the internal margin of four directions of accepting array.</p>\n<p>Examples: </p>\n<pre><code class=\"lang-js\">// Set internal margin to 5\npadding: 5\n// Set the upper and lower margins to 5, left and right margins to 10\npadding: [5, 10]\n// Set each of the four margins as the followings\npadding: [\n    5,  // up\n    10, // right\n    5,  // down\n    10, // left\n]\n</code></pre>\n",
            "default": 5
          },
          "itemGap": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>the gap between the main heading and subtitle. </p>\n",
            "default": 10
          },
          "zlevel": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
            "default": 0
          },
          "z": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
            "default": 2
          },
          "left": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "top": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "right": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "bottom": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "backgroundColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>title background color, transparent by default.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>   , if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code></p>\n</blockquote>\n",
            "default": "'transparent'"
          },
          "borderColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>border color of title. Support the same color format as backgroundColor.</p>\n",
            "default": "'#ccc'"
          },
          "borderWidth": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>border line width of title.</p>\n",
            "default": 1
          },
          "shadowBlur": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n"
          },
          "shadowColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n"
          },
          "shadowOffsetX": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n",
            "default": 0
          },
          "shadowOffsetY": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n",
            "default": 0
          }
        }
      },
      "legend": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>Legend component.</p>\n<p>Legend component shows the symbol(symbol),  color and name of different series. You can click legend to specify which serise could not be shown. </p>\n<p>In a single echarts instance of ECharts 3, multiple legend components could exist at the same time, which would be convinient for the layout of multiple legend components.</p>\n",
        "properties": {
          "show": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "",
            "default": true
          },
          "zlevel": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
            "default": 0
          },
          "z": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
            "default": 2
          },
          "left": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>legend distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "top": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>legend distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "right": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>legend distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "bottom": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>legend distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "width": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>legend width of component.self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "height": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>legend height of component.self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "orient": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The layout orientation of legend. </p>\n<p>Option: </p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n",
            "default": "'horizontal'"
          },
          "align": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Legend mrker and text aligning. It defaults to align automatically, which is decided by the component location and orient. as the <a href=\"#legend.left\">left</a> value of this component is &#39;right&#39; , and the vertical layout (<a href=\"#legend.orient\">orient</a> is  &#39;vertical&#39;), it would be right align,&#39;right&#39;.</p>\n<p>Option: </p>\n<ul>\n<li>&#39;auto&#39;</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n</ul>\n",
            "default": "'auto'"
          },
          "padding": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>legend internal margin, unit as px,set internal margin of each directions to 5 by default, set the internal margin of four directions of accepting array.</p>\n<p>Examples: </p>\n<pre><code class=\"lang-js\">// Set internal margin to 5\npadding: 5\n// Set the upper and lower margins to 5, left and right margins to 10\npadding: [5, 10]\n// Set each of the four margins as the followings\npadding: [\n    5,  // up\n    10, // right\n    5,  // down\n    10, // left\n]\n</code></pre>\n",
            "default": 5
          },
          "itemGap": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The interval between each legend. There is  horizontal interval in horizontal layout, while vertical layout in vertical layout.</p>\n",
            "default": 10
          },
          "itemWidth": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Image width of legend symbol.</p>\n",
            "default": 25
          },
          "itemHeight": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Image height of legend symbol.</p>\n",
            "default": 14
          },
          "formatter": {
            "type": [
              "string",
              "Function"
            ],
            "descriptionCN": "<p>Content formatter of legend text, which supports string template and callback function.</p>\n<p>Example: </p>\n<pre><code class=\"lang-js\">// using string template, the template variable is legend name {name}\nformatter: &#39;Legend {name}&#39;\n// using callback function\nformatter: function (name) {\n    return &#39;Legend &#39; + name;\n}\n</code></pre>\n",
            "default": null
          },
          "selectedMode": {
            "type": [
              "string",
              "boolean"
            ],
            "descriptionCN": "<p>Selected mode of legend, defaulting to be set as turning on legend select. And it could be set as <code>false</code> turning off.</p>\n<p>Beyond that, it could be set also as  <code>&#39;single&#39;</code> or <code>&#39;multiple&#39;</code> which refer to single selection and multiple selection.</p>\n",
            "default": true
          },
          "selected": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>State table of selected legend.</p>\n<p>example: </p>\n<pre><code>selected: {\n    // selected&#39;series 1&#39;\n    &#39;series 1&#39;: true,\n    // unselected&#39;series 2&#39;\n    &#39;series 2&#39;: false\n}\n</code></pre>"
          },
          "textStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>Public text style of legend.</p>\n",
            "properties": {
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>text color.</p>\n",
                "default": "\"#fff\""
              },
              "fontStyle": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                "default": "'normal'"
              },
              "fontWeight": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                "default": "normal"
              },
              "fontFamily": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>Font series</p>\n",
                "default": "'sans-serief'"
              },
              "fontSize": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>Font size</p>\n",
                "default": 12
              }
            }
          },
          "data": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>Data array of legend. An array item is usually a string and every item represents the <code>name</code> (if it is<a href=\"#series-pie\">pie chart</a>, it would also be the <code>name</code> of a single data in the pie chart)  of a series . Legend component would automatically acquire the color of the corresponding series. As the automatically drawn color and symbol, special string <code>&#39;&#39;</code> (null string) or <code>&#39;\\n&#39;</code> (line feed string), diagram symbol (symbol) is used in lind feedof legend.</p>\n<p>If you want to set the style of a single item, this item could be written as the object to the configuration item. At this time, you must use the <code>name</code>  property to correspond with the <code>name</code> of series.   </p>\n<p>Example</p>\n<pre><code>data: [{\n    name: &#39;series 1&#39;,\n    // compulsorily set the image as a circle\n    icon: &#39;circle&#39;,\n    // set up the text in red\n    textStyle: {\n        color: &#39;red&#39;\n    }\n}]\n</code></pre>",
            "items": {
              "type": "Object",
              "properties": {
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Name of legend item, corresponding with the <code>name</code>of series (if it was pie diagram, it could be the <code>name</code> of singel data in the pie diagram).</p>\n"
                },
                "icon": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p> icon of the legend item</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                },
                "textStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Text style of legend item</p>\n"
                }
              }
            }
          },
          "backgroundColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>legend background color, transparent by default.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>   , if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code></p>\n</blockquote>\n",
            "default": "'transparent'"
          },
          "borderColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>border color of legend. Support the same color format as backgroundColor.</p>\n",
            "default": "'#ccc'"
          },
          "borderWidth": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>border line width of legend.</p>\n",
            "default": 1
          },
          "shadowBlur": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n"
          },
          "shadowColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n"
          },
          "shadowOffsetX": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n",
            "default": 0
          },
          "shadowOffsetY": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n",
            "default": 0
          }
        }
      },
      "grid": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>Drawing grid in rectangular coordinate. In a single grid, 2 x axis above and below and 2 y axis righ and left could be placed at most.  <a href=\"#series-line\">broken line chart</a>, <a href=\"#series-bar\">bar chart</a>, <a href=\"#series-scatter\">scatter diagram (bubble diagram)</a> could be drawn in grid.</p>\n<p>In ECharts 2.x , there is one grid component at most in a single echarts example; while in ECharts 3, there is no limitation about the quantity of grid component in a single echarts example.</p>\n<p><strong>see the below example of Anscombe Quartet: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=scatter-anscombe-quartet&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n",
        "properties": {
          "show": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Specify whether to show the grid in rectangular coordinate.</p>\n",
            "default": false
          },
          "zlevel": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
            "default": 0
          },
          "z": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
            "default": 2
          },
          "left": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "top": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": 60
          },
          "right": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
            "default": "'10%'"
          },
          "bottom": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
            "default": 60
          },
          "width": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  width of component.self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "height": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>grid  height of component.self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "containLabel": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Specify whether the grid region contains <a href=\"#yAxis.axisLabel\">tick label</a> of coordinate axis. When the width of coordinate axis label can not be confirmed and there is no space could be left in a small container, you can set it as  <code>true</code> to prevent the label from overflowing the container.</p>\n",
            "default": false
          },
          "backgroundColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>grid background color, transparent by default.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>   , if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code></p>\n</blockquote>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n",
            "default": "'transparent'"
          },
          "borderColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>border color of grid. Support the same color format as backgroundColor.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n",
            "default": "'#ccc'"
          },
          "borderWidth": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>border line width of grid.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n",
            "default": 1
          },
          "shadowBlur": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n"
          },
          "shadowColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n"
          },
          "shadowOffsetX": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n",
            "default": 0
          },
          "shadowOffsetY": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n<p><strong>Caution</strong>: This property works only if <code>show: true</code> configured.</p>\n",
            "default": 0
          }
        }
      },
      "xAxis": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>the x axis in cartesian(rectangular) coordinate. A single grid component could place 2 x axis above and below at most. </p>\n",
        "properties": {
          "gridIndex": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The index of grid which the x axis belongs to defaults to be in the first grid.</p>\n",
            "default": 0
          },
          "position": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>the position of x axis.</p>\n<p>options: </p>\n<ul>\n<li><code>&#39;top&#39;</code></li>\n<li><code>&#39;bottom&#39;</code></li>\n</ul>\n<p>The first x axis in grid defaults to be under (<code>&#39;bottom&#39;</code>)  the grid, and the second x axis is on the other side against the first x axis. </p>\n"
          },
          "type": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Type of axis</p>\n<p>Option: </p>\n<ul>\n<li><p><code>&#39;value&#39;</code>\n  numerical axis, suitable for continuous data.</p>\n</li>\n<li><p><code>&#39;category&#39;</code>\n  category axis, suitable for discrete category data, only can set category data through <a href=\"#xAxis.data\">data</a>. </p>\n</li>\n<li><p><code>&#39;time&#39;</code>\n  timeaxis, suitable for continuous time series data, has a feature of time formatting  and a different tick calculation method when compared with numerical axis.For instance, it would decide to adopt month, week, day or hour to be the tick unit in terms of the range of span.  </p>\n</li>\n<li><p><code>&#39;log&#39;</code>\n  log axis,suitable for log data.</p>\n</li>\n</ul>\n",
            "default": "'category'"
          },
          "name": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The name of coordinate axis.</p>\n"
          },
          "nameLocation": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The name&#39;s location of coordinate axis.</p>\n<p><strong>Option: </strong></p>\n<ul>\n<li><code>&#39;start&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;end&#39;</code></li>\n</ul>\n",
            "default": "'start'"
          },
          "nameTextStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The text style of the name for coordinate axis.</p>\n",
            "properties": {
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>the name of coordinate axistext color.</p>\n",
                "default": "\"#fff\""
              },
              "fontStyle": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                "default": "'normal'"
              },
              "fontWeight": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                "default": "normal"
              },
              "fontFamily": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont series</p>\n",
                "default": "'sans-serief'"
              },
              "fontSize": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont size</p>\n",
                "default": 12
              }
            }
          },
          "nameGap": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The distance between the name of coordinate axis and axis line. </p>\n",
            "default": 15
          },
          "inverse": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Specify whether it is inverse coordinate axis. New option in ECharts 3. </p>\n",
            "default": false
          },
          "boundaryGap": {
            "type": [
              "boolean",
              "Array"
            ],
            "descriptionCN": "<p>The boundary gap on both sides of the coordinate axis. The setting and performance of category axis and non-category axis are different.</p>\n<p>The <code>boundaryGap</code> of category axis can be allocated as <code>true</code> and <code>false</code>, which defauts to be allocated as <code>true</code>.  Meanwhile,  <a href=\"#xAxis.axisTick\">axisTick</a>can be used only as splitline. Both the label and data marker exist on the band between 2 <a href=\"#xAxis.axisTick\">axis tick</a>. </p>\n<p>non-category axis includes time, numerical value, log axis. <code>boundaryGap</code> is an array consisting of 2 values which individually refer to the span range between the maximun and minimum value. The value and the percentage can be directly set. <code>boundaryGap</code> is not available after the <a href=\"#xAxis.min\">min</a> and <a href=\"#xAxis.max\">max</a> being set. <strong>example: </strong></p>\n<pre><code class=\"lang-js\">boundaryGap: [&#39;20%&#39;, &#39;20%&#39;]\n</code></pre>\n"
          },
          "min": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The minimun value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMin&#39;</code>. Meanwhile, the minmum value in this axis is fetched as the minmun tick.</p>\n",
            "default": "'auto'"
          },
          "max": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The maximum value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMax&#39;</code>. Meanwhile, the maximum value in this axis is fetched as the maximum tick.</p>\n<p>without a particular setting, the maximum value would be caculated automatically to make sure the uniform distribution of axis ticks.</p>\n",
            "default": "'auto'"
          },
          "scale": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>It is available only in numerical axis (<a href=\"#xAxis.type\">type</a>: &#39;value&#39;). </p>\n<p>specify whether to get rid of 0 value porpotion. As it is set as <code>true</code>, the axis tick would not compulsorily contains 0 scale, which is more useful in the scatter diagram of double-numerical axis.</p>\n<p>This configuration item is unavailable as the <a href=\"#xAxis.min\">min</a> and <a href=\"#xAxis.max\">max</a> are set.</p>\n",
            "default": false
          },
          "splitNumber": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>SplitNumber. It should be noticed that this splitNumber is just a predicted value. The finally displayed split number results from the adjustment based on the readability of axis tick which is shown after being segmented.<br>unavailable in category axis.</p>\n",
            "default": 5
          },
          "interval": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The segmented interval of coordinate axis. </p>\n<p>As <a href=\"#xAxis.splitNumber\">splitNumber</a>  is a predicted value, the scale caculated through pratical strategy may not achieve the desired effect. Under such condition, interval can be set with <a href=\"#xAxis.min\">min</a>, <a href=\"#xAxis.max\">max</a> to compulsorily divide the scale, which is generally not recommended.   </p>\n<p>Unavailable in category axis. The timestamp need to be transmitted in timeaxis (<a href=\"#xAxis.type\">type</a>: &#39;time&#39;), and the index value need to be transmitted in logaxis. (<a href=\"#xAxis.type\">type</a>: &#39;log&#39;).</p>\n"
          },
          "axisLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about axis line.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the axis line or not.</p>\n",
                "default": true
              },
              "onZero": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify whether x axis or y axis are in the scale of 0 degree. Only available if another one is numerical axis and contains scale of 0 degree.   </p>\n",
                "default": true
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisLineline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisTick": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axis tick </p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the axis tick.</p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick, available in category axis. defaults to be the same as <a href=\"#xAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify the axis tick are inside oriented. It defauts to be outside oriented.</p>\n",
                "default": false
              },
              "length": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The length of the axis tick </p>\n",
                "default": 5
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisTickline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisTickline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisTickline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisLabel": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axistick lable</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the label of axis tick label or not. </p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick label, available in category axis.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether the axisTick label is inside oriented. It defaults to be outside oriented.</p>\n",
                "default": false
              },
              "rotate": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The rotation angle of the tick label. As the category labels in the category axis cannot be shown completely, you can rotate the tick labels to prevent them from overlapping each other.   </p>\n<p>The rotation angle is from -90 degree to 90 degree.</p>\n",
                "default": 0
              },
              "margin": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The margin between the tick lable and the axis.</p>\n",
                "default": 8
              },
              "formatter": {
                "type": [
                  "string",
                  "Function"
                ],
                "descriptionCN": "<p>The formatter of axi stick label, supporting both string template and callback fuction.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">//using string template, the template variable is the default label of axistick  {value}\nformatter: &#39;{value} kg&#39;\n\n// using callback function template, function parameters are individually\nformatter: function (value, index) {\n    // formatting to be Month/day, the particular year display only in the first scale\n    var date = new Date(value);\n    var texts = [(date.getMonth() + 1), date.getDate()];\n    if (idx === 0) {\n        texts.unshift(date.getYear());\n    }\n    return texts.join(&#39;/&#39;);\n}\n</code></pre>\n",
                "default": null
              },
              "textStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>text color.</p>\n",
                    "default": "'#333'"
                  },
                  "fontStyle": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                    "default": "'normal'"
                  },
                  "fontWeight": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                    "default": "normal"
                  },
                  "fontFamily": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font series</p>\n",
                    "default": "'sans-serief'"
                  },
                  "fontSize": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Font size</p>\n",
                    "default": 12
                  }
                }
              }
            }
          },
          "splitLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The splitLine of coordinate axis in <a href=\"#grid\">grid</a> area defaults to show.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the splitLine.</p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axis splitLine, available in category axis. defaults to be the same as <a href=\"#xAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Array",
                      "string"
                    ],
                    "descriptionCN": "<p>The color of the splitLine, which could be set as single color. </p>\n<p>The splitLines color could also be set as color array, from which the split lines would circularly set their colors according to the color order in the array. </p>\n<p>example</p>\n<pre><code>splitLine: {\n    lineStyle: {\n        // adopt interval color between deep and light\n        color: [&#39;#aaa&#39;, &#39;#ddd&#39;]\n    }\n}\n</code></pre>",
                    "default": "['#ccc']"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>splitLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>splitLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n<!-- overwrite color -->\n"
                  }
                }
              }
            }
          },
          "splitArea": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The split area of coordinate axis in <a href=\"#grid\">grid</a> area defaults not to show.</p>\n",
            "properties": {
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>splitArea of coordinate axis, available in category axis. defaults to be the same as <a href=\"#xAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify whether to show the splitArea.</p>\n",
                "default": true
              },
              "areaStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The style settings about split area</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Array"
                    ],
                    "descriptionCN": "<p>The color of split area. \nThe color of split area would circularly set their colors according to the color order in the array, which defaults to adopt a interval color between the deep and light one.</p>\n",
                    "default": "['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "data": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>Category data, available in category axis (<a href=\"#xAxis.type\">type</a>: &#39;category&#39;).</p>\n<p>Example: </p>\n<pre><code class=\"lang-js\">//Name list of all categories\ndata: [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n// Each item could also be a specific configuration item. Under this condition, `value` in the configuration should be adopted as the category name \ndata: [{\n    value: &#39;Monday&#39;,\n    // highlight Monday\n    textStyle: {\n        fontSize: 20,\n        color: &#39;red&#39;\n    }\n}, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n</code></pre>\n",
            "items": {
              "type": "Object",
              "properties": {
                "value": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Single category name</p>\n"
                },
                "textStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Text style of the category label.</p>\n",
                  "properties": {
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>text color.</p>\n",
                      "default": "\"#fff\""
                    },
                    "align": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Horizontal Alignment of text, automatic by default.</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;left&#39;</code></li>\n<li><code>&#39;center&#39;</code></li>\n<li><code>&#39;right&#39;</code></li>\n</ul>\n"
                    },
                    "baseline": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Baseline Alignment of text, automatic by default.\nOptions are: </p>\n<ul>\n<li><code>&#39;top&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;bottom&#39;</code></li>\n</ul>\n"
                    },
                    "fontStyle": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                      "default": "'normal'"
                    },
                    "fontWeight": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                      "default": "normal"
                    },
                    "fontFamily": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font series</p>\n",
                      "default": "'sans-serief'"
                    },
                    "fontSize": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Font size</p>\n<p>The display interval of </p>\n",
                      "default": 12
                    }
                  }
                }
              }
            }
          }
        }
      },
      "yAxis": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>The y axis in cartesian(rectangular) coordinate. A single grid component could place 2 y axis right and left at most. </p>\n",
        "properties": {
          "gridIndex": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The index of grid which the y axis belongs to defaults to be in the first grid.</p>\n",
            "default": 0
          },
          "position": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>the position of y axis.</p>\n<p>options: </p>\n<ul>\n<li><code>&#39;left&#39;</code></li>\n<li><code>&#39;right&#39;</code></li>\n</ul>\n<p>The first y axis in grid defaults to be the left (<code>&#39;left&#39;</code>)  of the grid, and the second y axis is on the other side against the first y axis. </p>\n"
          },
          "type": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Type of axis</p>\n<p>Option: </p>\n<ul>\n<li><p><code>&#39;value&#39;</code>\n  numerical axis, suitable for continuous data.</p>\n</li>\n<li><p><code>&#39;category&#39;</code>\n  category axis, suitable for discrete category data, only can set category data through <a href=\"#yAxis.data\">data</a>. </p>\n</li>\n<li><p><code>&#39;time&#39;</code>\n  timeaxis, suitable for continuous time series data, has a feature of time formatting  and a different tick calculation method when compared with numerical axis.For instance, it would decide to adopt month, week, day or hour to be the tick unit in terms of the range of span.  </p>\n</li>\n<li><p><code>&#39;log&#39;</code>\n  log axis,suitable for log data.</p>\n</li>\n</ul>\n",
            "default": "'value'"
          },
          "name": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The name of coordinate axis.</p>\n"
          },
          "nameLocation": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The name&#39;s location of coordinate axis.</p>\n<p><strong>Option: </strong></p>\n<ul>\n<li><code>&#39;start&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;end&#39;</code></li>\n</ul>\n",
            "default": "'start'"
          },
          "nameTextStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The text style of the name for coordinate axis.</p>\n",
            "properties": {
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>the name of coordinate axistext color.</p>\n",
                "default": "\"#fff\""
              },
              "fontStyle": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                "default": "'normal'"
              },
              "fontWeight": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                "default": "normal"
              },
              "fontFamily": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont series</p>\n",
                "default": "'sans-serief'"
              },
              "fontSize": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont size</p>\n",
                "default": 12
              }
            }
          },
          "nameGap": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The distance between the name of coordinate axis and axis line. </p>\n",
            "default": 15
          },
          "inverse": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Specify whether it is inverse coordinate axis. New option in ECharts 3. </p>\n",
            "default": false
          },
          "boundaryGap": {
            "type": [
              "boolean",
              "Array"
            ],
            "descriptionCN": "<p>The boundary gap on both sides of the coordinate axis. The setting and performance of category axis and non-category axis are different.</p>\n<p>The <code>boundaryGap</code> of category axis can be allocated as <code>true</code> and <code>false</code>, which defauts to be allocated as <code>true</code>.  Meanwhile,  <a href=\"#yAxis.axisTick\">axisTick</a>can be used only as splitline. Both the label and data marker exist on the band between 2 <a href=\"#yAxis.axisTick\">axis tick</a>. </p>\n<p>non-category axis includes time, numerical value, log axis. <code>boundaryGap</code> is an array consisting of 2 values which individually refer to the span range between the maximun and minimum value. The value and the percentage can be directly set. <code>boundaryGap</code> is not available after the <a href=\"#yAxis.min\">min</a> and <a href=\"#yAxis.max\">max</a> being set. <strong>example: </strong></p>\n<pre><code class=\"lang-js\">boundaryGap: [&#39;20%&#39;, &#39;20%&#39;]\n</code></pre>\n"
          },
          "min": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The minimun value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMin&#39;</code>. Meanwhile, the minmum value in this axis is fetched as the minmun tick.</p>\n",
            "default": "'auto'"
          },
          "max": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The maximum value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMax&#39;</code>. Meanwhile, the maximum value in this axis is fetched as the maximum tick.</p>\n<p>without a particular setting, the maximum value would be caculated automatically to make sure the uniform distribution of axis ticks.</p>\n",
            "default": "'auto'"
          },
          "scale": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>It is available only in numerical axis (<a href=\"#yAxis.type\">type</a>: &#39;value&#39;). </p>\n<p>specify whether to get rid of 0 value porpotion. As it is set as <code>true</code>, the axis tick would not compulsorily contains 0 scale, which is more useful in the scatter diagram of double-numerical axis.</p>\n<p>This configuration item is unavailable as the <a href=\"#yAxis.min\">min</a> and <a href=\"#yAxis.max\">max</a> are set.</p>\n",
            "default": false
          },
          "splitNumber": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>SplitNumber. It should be noticed that this splitNumber is just a predicted value. The finally displayed split number results from the adjustment based on the readability of axis tick which is shown after being segmented.<br>unavailable in category axis.</p>\n",
            "default": 5
          },
          "interval": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The segmented interval of coordinate axis. </p>\n<p>As <a href=\"#yAxis.splitNumber\">splitNumber</a>  is a predicted value, the scale caculated through pratical strategy may not achieve the desired effect. Under such condition, interval can be set with <a href=\"#yAxis.min\">min</a>, <a href=\"#yAxis.max\">max</a> to compulsorily divide the scale, which is generally not recommended.   </p>\n<p>Unavailable in category axis. The timestamp need to be transmitted in timeaxis (<a href=\"#yAxis.type\">type</a>: &#39;time&#39;), and the index value need to be transmitted in logaxis. (<a href=\"#yAxis.type\">type</a>: &#39;log&#39;).</p>\n"
          },
          "axisLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about axis line.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the axis line or not.</p>\n",
                "default": true
              },
              "onZero": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify whether x axis or y axis are in the scale of 0 degree. Only available if another one is numerical axis and contains scale of 0 degree.   </p>\n",
                "default": true
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisLineline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisTick": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axis tick </p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the axis tick.</p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick, available in category axis. defaults to be the same as <a href=\"#yAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify the axis tick are inside oriented. It defauts to be outside oriented.</p>\n",
                "default": false
              },
              "length": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The length of the axis tick </p>\n",
                "default": 5
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisTickline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisTickline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisTickline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisLabel": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axistick lable</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the label of axis tick label or not. </p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick label, available in category axis.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether the axisTick label is inside oriented. It defaults to be outside oriented.</p>\n",
                "default": false
              },
              "rotate": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The rotation angle of the tick label. As the category labels in the category axis cannot be shown completely, you can rotate the tick labels to prevent them from overlapping each other.   </p>\n<p>The rotation angle is from -90 degree to 90 degree.</p>\n",
                "default": 0
              },
              "margin": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The margin between the tick lable and the axis.</p>\n",
                "default": 8
              },
              "formatter": {
                "type": [
                  "string",
                  "Function"
                ],
                "descriptionCN": "<p>The formatter of axi stick label, supporting both string template and callback fuction.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">//using string template, the template variable is the default label of axistick  {value}\nformatter: &#39;{value} kg&#39;\n\n// using callback function template, function parameters are individually\nformatter: function (value, index) {\n    // formatting to be Month/day, the particular year display only in the first scale\n    var date = new Date(value);\n    var texts = [(date.getMonth() + 1), date.getDate()];\n    if (idx === 0) {\n        texts.unshift(date.getYear());\n    }\n    return texts.join(&#39;/&#39;);\n}\n</code></pre>\n",
                "default": null
              },
              "textStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>text color.</p>\n",
                    "default": "'#333'"
                  },
                  "fontStyle": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                    "default": "'normal'"
                  },
                  "fontWeight": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                    "default": "normal"
                  },
                  "fontFamily": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font series</p>\n",
                    "default": "'sans-serief'"
                  },
                  "fontSize": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Font size</p>\n",
                    "default": 12
                  }
                }
              }
            }
          },
          "splitLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The splitLine of coordinate axis in <a href=\"#grid\">grid</a> area defaults to show.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the splitLine.</p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axis splitLine, available in category axis. defaults to be the same as <a href=\"#yAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Array",
                      "string"
                    ],
                    "descriptionCN": "<p>The color of the splitLine, which could be set as single color. </p>\n<p>The splitLines color could also be set as color array, from which the split lines would circularly set their colors according to the color order in the array. </p>\n<p>example</p>\n<pre><code>splitLine: {\n    lineStyle: {\n        // adopt interval color between deep and light\n        color: [&#39;#aaa&#39;, &#39;#ddd&#39;]\n    }\n}\n</code></pre>",
                    "default": "['#ccc']"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>splitLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>splitLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n<!-- overwrite color -->\n"
                  }
                }
              }
            }
          },
          "splitArea": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The split area of coordinate axis in <a href=\"#grid\">grid</a> area defaults not to show.</p>\n",
            "properties": {
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>splitArea of coordinate axis, available in category axis. defaults to be the same as <a href=\"#yAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify whether to show the splitArea.</p>\n",
                "default": true
              },
              "areaStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The style settings about split area</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Array"
                    ],
                    "descriptionCN": "<p>The color of split area. \nThe color of split area would circularly set their colors according to the color order in the array, which defaults to adopt a interval color between the deep and light one.</p>\n",
                    "default": "['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "data": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>Category data, available in category axis (<a href=\"#yAxis.type\">type</a>: &#39;category&#39;).</p>\n<p>Example: </p>\n<pre><code class=\"lang-js\">//Name list of all categories\ndata: [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n// Each item could also be a specific configuration item. Under this condition, `value` in the configuration should be adopted as the category name \ndata: [{\n    value: &#39;Monday&#39;,\n    // highlight Monday\n    textStyle: {\n        fontSize: 20,\n        color: &#39;red&#39;\n    }\n}, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n</code></pre>\n",
            "items": {
              "type": "Object",
              "properties": {
                "value": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Single category name</p>\n"
                },
                "textStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Text style of the category label.</p>\n",
                  "properties": {
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>text color.</p>\n",
                      "default": "\"#fff\""
                    },
                    "align": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Horizontal Alignment of text, automatic by default.</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;left&#39;</code></li>\n<li><code>&#39;center&#39;</code></li>\n<li><code>&#39;right&#39;</code></li>\n</ul>\n"
                    },
                    "baseline": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Baseline Alignment of text, automatic by default.\nOptions are: </p>\n<ul>\n<li><code>&#39;top&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;bottom&#39;</code></li>\n</ul>\n"
                    },
                    "fontStyle": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                      "default": "'normal'"
                    },
                    "fontWeight": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                      "default": "normal"
                    },
                    "fontFamily": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font series</p>\n",
                      "default": "'sans-serief'"
                    },
                    "fontSize": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Font size</p>\n<p>The display interval of </p>\n",
                      "default": 12
                    }
                  }
                }
              }
            }
          }
        }
      },
      "polar": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>polar coordinate, applied in scatter diagram and line chart. Every polar coordinate has a <a href=\"#angleAxis\">angleAxis</a> and <a href=\"#radiusAxis\">radiusAxis</a>. </p>\n<p><strong>Sample: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=scatter-polar-punchCard&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n\n\n\n",
        "properties": {
          "zlevel": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
            "default": 0
          },
          "z": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
            "default": 2
          },
          "center": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>The center coordinates of , the first item of array is the abscissa, the second item is ordinate.</p>\n<p>Support set to percentage, the first item when setting to percentage is the width relative to the container, the second item is the height.</p>\n<p><strong>Example: </strong></p>\n<pre><code>// Set to absolute pixel values\ncenter: [400, 300]\n// Set to relative percent\ncenter: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>",
            "default": "['50%', '50%']"
          },
          "radius": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>the radius of , the first item of array is inner radius,the second item is outer radius.</p>\n<p>Support set to percentage, equal to half of the smaller item between height and width of the container. </p>\n"
          }
        }
      },
      "radiusAxis": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>The radius Axis of polar coordinate.</p>\n",
        "properties": {
          "polarIndex": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The index of polar coordinate which the radius Axis belongs to defaults to use the first polar coordinate. </p>\n",
            "default": 0
          },
          "type": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Type of axis</p>\n<p>Option: </p>\n<ul>\n<li><p><code>&#39;value&#39;</code>\n  numerical axis, suitable for continuous data.</p>\n</li>\n<li><p><code>&#39;category&#39;</code>\n  category axis, suitable for discrete category data, only can set category data through <a href=\"#radiusAxis.data\">data</a>. </p>\n</li>\n<li><p><code>&#39;time&#39;</code>\n  timeaxis, suitable for continuous time series data, has a feature of time formatting  and a different tick calculation method when compared with numerical axis.For instance, it would decide to adopt month, week, day or hour to be the tick unit in terms of the range of span.  </p>\n</li>\n<li><p><code>&#39;log&#39;</code>\n  log axis,suitable for log data.</p>\n</li>\n</ul>\n",
            "default": "'value'"
          },
          "name": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The name of coordinate axis.</p>\n"
          },
          "nameLocation": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The name&#39;s location of coordinate axis.</p>\n<p><strong>Option: </strong></p>\n<ul>\n<li><code>&#39;start&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;end&#39;</code></li>\n</ul>\n",
            "default": "'start'"
          },
          "nameTextStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The text style of the name for coordinate axis.</p>\n",
            "properties": {
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>the name of coordinate axistext color.</p>\n",
                "default": "\"#fff\""
              },
              "fontStyle": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                "default": "'normal'"
              },
              "fontWeight": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                "default": "normal"
              },
              "fontFamily": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont series</p>\n",
                "default": "'sans-serief'"
              },
              "fontSize": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont size</p>\n",
                "default": 12
              }
            }
          },
          "nameGap": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The distance between the name of coordinate axis and axis line. </p>\n",
            "default": 15
          },
          "inverse": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Specify whether it is inverse coordinate axis. New option in ECharts 3. </p>\n",
            "default": false
          },
          "boundaryGap": {
            "type": [
              "boolean",
              "Array"
            ],
            "descriptionCN": "<p>The boundary gap on both sides of the coordinate axis. The setting and performance of category axis and non-category axis are different.</p>\n<p>The <code>boundaryGap</code> of category axis can be allocated as <code>true</code> and <code>false</code>, which defauts to be allocated as <code>true</code>.  Meanwhile,  <a href=\"#radiusAxis.axisTick\">axisTick</a>can be used only as splitline. Both the label and data marker exist on the band between 2 <a href=\"#radiusAxis.axisTick\">axis tick</a>. </p>\n<p>non-category axis includes time, numerical value, log axis. <code>boundaryGap</code> is an array consisting of 2 values which individually refer to the span range between the maximun and minimum value. The value and the percentage can be directly set. <code>boundaryGap</code> is not available after the <a href=\"#radiusAxis.min\">min</a> and <a href=\"#radiusAxis.max\">max</a> being set. <strong>example: </strong></p>\n<pre><code class=\"lang-js\">boundaryGap: [&#39;20%&#39;, &#39;20%&#39;]\n</code></pre>\n"
          },
          "min": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The minimun value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMin&#39;</code>. Meanwhile, the minmum value in this axis is fetched as the minmun tick.</p>\n",
            "default": "'auto'"
          },
          "max": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The maximum value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMax&#39;</code>. Meanwhile, the maximum value in this axis is fetched as the maximum tick.</p>\n<p>without a particular setting, the maximum value would be caculated automatically to make sure the uniform distribution of axis ticks.</p>\n",
            "default": "'auto'"
          },
          "scale": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>It is available only in numerical axis (<a href=\"#radiusAxis.type\">type</a>: &#39;value&#39;). </p>\n<p>specify whether to get rid of 0 value porpotion. As it is set as <code>true</code>, the axis tick would not compulsorily contains 0 scale, which is more useful in the scatter diagram of double-numerical axis.</p>\n<p>This configuration item is unavailable as the <a href=\"#radiusAxis.min\">min</a> and <a href=\"#radiusAxis.max\">max</a> are set.</p>\n",
            "default": false
          },
          "splitNumber": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>SplitNumber. It should be noticed that this splitNumber is just a predicted value. The finally displayed split number results from the adjustment based on the readability of axis tick which is shown after being segmented.<br>unavailable in category axis.</p>\n",
            "default": 5
          },
          "interval": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The segmented interval of coordinate axis. </p>\n<p>As <a href=\"#radiusAxis.splitNumber\">splitNumber</a>  is a predicted value, the scale caculated through pratical strategy may not achieve the desired effect. Under such condition, interval can be set with <a href=\"#radiusAxis.min\">min</a>, <a href=\"#radiusAxis.max\">max</a> to compulsorily divide the scale, which is generally not recommended.   </p>\n<p>Unavailable in category axis. The timestamp need to be transmitted in timeaxis (<a href=\"#radiusAxis.type\">type</a>: &#39;time&#39;), and the index value need to be transmitted in logaxis. (<a href=\"#radiusAxis.type\">type</a>: &#39;log&#39;).</p>\n"
          },
          "axisLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about axis line.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the axis line or not.</p>\n",
                "default": true
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisLineline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisTick": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axis tick </p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the axis tick.</p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick, available in category axis. defaults to be the same as <a href=\"#radiusAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify the axis tick are inside oriented. It defauts to be outside oriented.</p>\n",
                "default": false
              },
              "length": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The length of the axis tick </p>\n",
                "default": 5
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisTickline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisTickline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisTickline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisLabel": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axistick lable</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the label of axis tick label or not. </p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick label, available in category axis.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether the axisTick label is inside oriented. It defaults to be outside oriented.</p>\n",
                "default": false
              },
              "rotate": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The rotation angle of the tick label. As the category labels in the category axis cannot be shown completely, you can rotate the tick labels to prevent them from overlapping each other.   </p>\n<p>The rotation angle is from -90 degree to 90 degree.</p>\n",
                "default": 0
              },
              "margin": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The margin between the tick lable and the axis.</p>\n",
                "default": 8
              },
              "formatter": {
                "type": [
                  "string",
                  "Function"
                ],
                "descriptionCN": "<p>The formatter of axi stick label, supporting both string template and callback fuction.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">//using string template, the template variable is the default label of axistick  {value}\nformatter: &#39;{value} kg&#39;\n\n// using callback function template, function parameters are individually\nformatter: function (value, index) {\n    // formatting to be Month/day, the particular year display only in the first scale\n    var date = new Date(value);\n    var texts = [(date.getMonth() + 1), date.getDate()];\n    if (idx === 0) {\n        texts.unshift(date.getYear());\n    }\n    return texts.join(&#39;/&#39;);\n}\n</code></pre>\n",
                "default": null
              },
              "textStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>text color.</p>\n",
                    "default": "'#333'"
                  },
                  "fontStyle": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                    "default": "'normal'"
                  },
                  "fontWeight": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                    "default": "normal"
                  },
                  "fontFamily": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font series</p>\n",
                    "default": "'sans-serief'"
                  },
                  "fontSize": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Font size</p>\n",
                    "default": 12
                  }
                }
              }
            }
          },
          "splitLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The splitLine of coordinate axis in <a href=\"#grid\">grid</a> area defaults to show.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the splitLine.</p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axis splitLine, available in category axis. defaults to be the same as <a href=\"#radiusAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Array",
                      "string"
                    ],
                    "descriptionCN": "<p>The color of the splitLine, which could be set as single color. </p>\n<p>The splitLines color could also be set as color array, from which the split lines would circularly set their colors according to the color order in the array. </p>\n<p>example</p>\n<pre><code>splitLine: {\n    lineStyle: {\n        // adopt interval color between deep and light\n        color: [&#39;#aaa&#39;, &#39;#ddd&#39;]\n    }\n}\n</code></pre>",
                    "default": "['#ccc']"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>splitLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>splitLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n<!-- overwrite color -->\n"
                  }
                }
              }
            }
          },
          "splitArea": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The split area of coordinate axis in <a href=\"#grid\">grid</a> area defaults not to show.</p>\n",
            "properties": {
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>splitArea of coordinate axis, available in category axis. defaults to be the same as <a href=\"#radiusAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify whether to show the splitArea.</p>\n",
                "default": true
              },
              "areaStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The style settings about split area</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Array"
                    ],
                    "descriptionCN": "<p>The color of split area. \nThe color of split area would circularly set their colors according to the color order in the array, which defaults to adopt a interval color between the deep and light one.</p>\n",
                    "default": "['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "data": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>Category data, available in category axis (<a href=\"#radiusAxis.type\">type</a>: &#39;category&#39;).</p>\n<p>Example: </p>\n<pre><code class=\"lang-js\">//Name list of all categories\ndata: [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n// Each item could also be a specific configuration item. Under this condition, `value` in the configuration should be adopted as the category name \ndata: [{\n    value: &#39;Monday&#39;,\n    // highlight Monday\n    textStyle: {\n        fontSize: 20,\n        color: &#39;red&#39;\n    }\n}, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n</code></pre>\n",
            "items": {
              "type": "Object",
              "properties": {
                "value": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Single category name</p>\n"
                },
                "textStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Text style of the category label.</p>\n",
                  "properties": {
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>text color.</p>\n",
                      "default": "\"#fff\""
                    },
                    "align": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Horizontal Alignment of text, automatic by default.</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;left&#39;</code></li>\n<li><code>&#39;center&#39;</code></li>\n<li><code>&#39;right&#39;</code></li>\n</ul>\n"
                    },
                    "baseline": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Baseline Alignment of text, automatic by default.\nOptions are: </p>\n<ul>\n<li><code>&#39;top&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;bottom&#39;</code></li>\n</ul>\n"
                    },
                    "fontStyle": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                      "default": "'normal'"
                    },
                    "fontWeight": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                      "default": "normal"
                    },
                    "fontFamily": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font series</p>\n",
                      "default": "'sans-serief'"
                    },
                    "fontSize": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Font size</p>\n<p>The display interval of </p>\n",
                      "default": 12
                    }
                  }
                }
              }
            }
          }
        }
      },
      "angleAxis": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>The angle Axis of Polar coordinate.</p>\n",
        "properties": {
          "polarIndex": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The polarIndex of angle Axis defaults to use the first Polar coordinate.</p>\n",
            "default": 0
          },
          "startAngle": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The default angle of the start of scale is 90 degrees, directly above the circle center.  0 degeree refers to the directly right to the circle center.</p>\n<p>As the startAngle(number) = 45, the result is shown in following: </p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/polar-start-angle&edit=1&reset=1\" width=\"400\" height=\"400\" ></iframe>\n\n\n",
            "default": 90
          },
          "clockwise": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>whether the scale clockwise increases, it defaults to increase clockwise.</p>\n<p>As clockwise(boolean) = false, the result is shown as the following example:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/polar-anticlockwise&edit=1&reset=1\" width=\"400\" height=\"400\" ></iframe>\n\n\n\n\n",
            "default": true
          },
          "type": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Type of axis</p>\n<p>Option: </p>\n<ul>\n<li><p><code>&#39;value&#39;</code>\n  numerical axis, suitable for continuous data.</p>\n</li>\n<li><p><code>&#39;category&#39;</code>\n  category axis, suitable for discrete category data, only can set category data through <a href=\"#angleAxis.data\">data</a>. </p>\n</li>\n<li><p><code>&#39;time&#39;</code>\n  timeaxis, suitable for continuous time series data, has a feature of time formatting  and a different tick calculation method when compared with numerical axis.For instance, it would decide to adopt month, week, day or hour to be the tick unit in terms of the range of span.  </p>\n</li>\n<li><p><code>&#39;log&#39;</code>\n  log axis,suitable for log data.</p>\n</li>\n</ul>\n",
            "default": "'category'"
          },
          "boundaryGap": {
            "type": [
              "boolean",
              "Array"
            ],
            "descriptionCN": "<p>The boundary gap on both sides of the coordinate axis. The setting and performance of category axis and non-category axis are different.</p>\n<p>The <code>boundaryGap</code> of category axis can be allocated as <code>true</code> and <code>false</code>, which defauts to be allocated as <code>true</code>.  Meanwhile,  <a href=\"#angleAxis.axisTick\">axisTick</a>can be used only as splitline. Both the label and data marker exist on the band between 2 <a href=\"#angleAxis.axisTick\">axis tick</a>. </p>\n<p>non-category axis includes time, numerical value, log axis. <code>boundaryGap</code> is an array consisting of 2 values which individually refer to the span range between the maximun and minimum value. The value and the percentage can be directly set. <code>boundaryGap</code> is not available after the <a href=\"#angleAxis.min\">min</a> and <a href=\"#angleAxis.max\">max</a> being set. <strong>example: </strong></p>\n<pre><code class=\"lang-js\">boundaryGap: [&#39;20%&#39;, &#39;20%&#39;]\n</code></pre>\n"
          },
          "min": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The minimun value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMin&#39;</code>. Meanwhile, the minmum value in this axis is fetched as the minmun tick.</p>\n",
            "default": "'auto'"
          },
          "max": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The maximum value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMax&#39;</code>. Meanwhile, the maximum value in this axis is fetched as the maximum tick.</p>\n<p>without a particular setting, the maximum value would be caculated automatically to make sure the uniform distribution of axis ticks.</p>\n",
            "default": "'auto'"
          },
          "scale": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>It is available only in numerical axis (<a href=\"#angleAxis.type\">type</a>: &#39;value&#39;). </p>\n<p>specify whether to get rid of 0 value porpotion. As it is set as <code>true</code>, the axis tick would not compulsorily contains 0 scale, which is more useful in the scatter diagram of double-numerical axis.</p>\n<p>This configuration item is unavailable as the <a href=\"#angleAxis.min\">min</a> and <a href=\"#angleAxis.max\">max</a> are set.</p>\n",
            "default": false
          },
          "splitNumber": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>SplitNumber. It should be noticed that this splitNumber is just a predicted value. The finally displayed split number results from the adjustment based on the readability of axis tick which is shown after being segmented.<br>unavailable in category axis.</p>\n",
            "default": 5
          },
          "interval": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The segmented interval of coordinate axis. </p>\n<p>As <a href=\"#angleAxis.splitNumber\">splitNumber</a>  is a predicted value, the scale caculated through pratical strategy may not achieve the desired effect. Under such condition, interval can be set with <a href=\"#angleAxis.min\">min</a>, <a href=\"#angleAxis.max\">max</a> to compulsorily divide the scale, which is generally not recommended.   </p>\n<p>Unavailable in category axis. The timestamp need to be transmitted in timeaxis (<a href=\"#angleAxis.type\">type</a>: &#39;time&#39;), and the index value need to be transmitted in logaxis. (<a href=\"#angleAxis.type\">type</a>: &#39;log&#39;).</p>\n"
          },
          "axisLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about axis line.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the axis line or not.</p>\n",
                "default": true
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisLineline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisTick": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axis tick </p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the axis tick.</p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick, available in category axis. defaults to be the same as <a href=\"#angleAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify the axis tick are inside oriented. It defauts to be outside oriented.</p>\n",
                "default": false
              },
              "length": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The length of the axis tick </p>\n",
                "default": 5
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisTickline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisTickline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisTickline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisLabel": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axistick lable</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the label of axis tick label or not. </p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick label, available in category axis.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether the axisTick label is inside oriented. It defaults to be outside oriented.</p>\n",
                "default": false
              },
              "margin": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The margin between the tick lable and the axis.</p>\n",
                "default": 8
              },
              "formatter": {
                "type": [
                  "string",
                  "Function"
                ],
                "descriptionCN": "<p>The formatter of axi stick label, supporting both string template and callback fuction.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">//using string template, the template variable is the default label of axistick  {value}\nformatter: &#39;{value} kg&#39;\n\n// using callback function template, function parameters are individually\nformatter: function (value, index) {\n    // formatting to be Month/day, the particular year display only in the first scale\n    var date = new Date(value);\n    var texts = [(date.getMonth() + 1), date.getDate()];\n    if (idx === 0) {\n        texts.unshift(date.getYear());\n    }\n    return texts.join(&#39;/&#39;);\n}\n</code></pre>\n",
                "default": null
              },
              "textStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>text color.</p>\n",
                    "default": "'#333'"
                  },
                  "fontStyle": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                    "default": "'normal'"
                  },
                  "fontWeight": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                    "default": "normal"
                  },
                  "fontFamily": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font series</p>\n",
                    "default": "'sans-serief'"
                  },
                  "fontSize": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Font size</p>\n",
                    "default": 12
                  }
                }
              }
            }
          },
          "splitLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The splitLine of coordinate axis in <a href=\"#grid\">grid</a> area defaults to show.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the splitLine.</p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axis splitLine, available in category axis. defaults to be the same as <a href=\"#angleAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Array",
                      "string"
                    ],
                    "descriptionCN": "<p>The color of the splitLine, which could be set as single color. </p>\n<p>The splitLines color could also be set as color array, from which the split lines would circularly set their colors according to the color order in the array. </p>\n<p>example</p>\n<pre><code>splitLine: {\n    lineStyle: {\n        // adopt interval color between deep and light\n        color: [&#39;#aaa&#39;, &#39;#ddd&#39;]\n    }\n}\n</code></pre>",
                    "default": "['#ccc']"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>splitLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>splitLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n<!-- overwrite color -->\n"
                  }
                }
              }
            }
          },
          "splitArea": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The split area of coordinate axis in <a href=\"#grid\">grid</a> area defaults not to show.</p>\n",
            "properties": {
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>splitArea of coordinate axis, available in category axis. defaults to be the same as <a href=\"#angleAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify whether to show the splitArea.</p>\n",
                "default": true
              },
              "areaStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The style settings about split area</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Array"
                    ],
                    "descriptionCN": "<p>The color of split area. \nThe color of split area would circularly set their colors according to the color order in the array, which defaults to adopt a interval color between the deep and light one.</p>\n",
                    "default": "['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "data": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>Category data, available in category axis (<a href=\"#angleAxis.type\">type</a>: &#39;category&#39;).</p>\n<p>Example: </p>\n<pre><code class=\"lang-js\">//Name list of all categories\ndata: [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n// Each item could also be a specific configuration item. Under this condition, `value` in the configuration should be adopted as the category name \ndata: [{\n    value: &#39;Monday&#39;,\n    // highlight Monday\n    textStyle: {\n        fontSize: 20,\n        color: &#39;red&#39;\n    }\n}, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n</code></pre>\n",
            "items": {
              "type": "Object",
              "properties": {
                "value": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Single category name</p>\n"
                },
                "textStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Text style of the category label.</p>\n",
                  "properties": {
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>text color.</p>\n",
                      "default": "\"#fff\""
                    },
                    "align": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Horizontal Alignment of text, automatic by default.</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;left&#39;</code></li>\n<li><code>&#39;center&#39;</code></li>\n<li><code>&#39;right&#39;</code></li>\n</ul>\n"
                    },
                    "baseline": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Baseline Alignment of text, automatic by default.\nOptions are: </p>\n<ul>\n<li><code>&#39;top&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;bottom&#39;</code></li>\n</ul>\n"
                    },
                    "fontStyle": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                      "default": "'normal'"
                    },
                    "fontWeight": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                      "default": "normal"
                    },
                    "fontFamily": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font series</p>\n",
                      "default": "'sans-serief'"
                    },
                    "fontSize": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Font size</p>\n<p>The display interval of </p>\n",
                      "default": 12
                    }
                  }
                }
              }
            }
          }
        }
      },
      "radar": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>Radar chart coordinate component, only suitable for <a href=\"#series-radar\">radar chart</a>. This component is equal to the polar component in ECharts 2. Because the polar in the echarts 3 is reconstructed to be the standard polar coordinate component, in order to avoid mixing up, radar chart adopts radar component as its coordinate. </p>\n<p>Compared with polar coordinate, every axis (indicator)  of the radar chart coordinate is a individual dimension. The style of indicator coordinate axis could be allocated through the following configuration items, including <a href=\"#radar.name\">name</a>、<a href=\"#radar.axisLine\">axisLine</a>、<a href=\"#radar.axisTick\">axisTick</a>、<a href=\"#radar.axisLabel\">axisLabel</a>、<a href=\"#radar.splitLine\">splitLine</a>、 <a href=\"#radar.splitArea\">splitArea</a>.</p>\n<p>Here is a custom example of radar component.</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/radar&edit=1&reset=1\" width=\"400\" height=\"400\" ></iframe>\n\n\n\n\n\n\n",
        "properties": {
          "zlevel": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
            "default": 0
          },
          "z": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
            "default": 2
          },
          "center": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>The center coordinates of , the first item of array is the abscissa, the second item is ordinate.</p>\n<p>Support set to percentage, the first item when setting to percentage is the width relative to the container, the second item is the height.</p>\n<p><strong>Example: </strong></p>\n<pre><code>// Set to absolute pixel values\ncenter: [400, 300]\n// Set to relative percent\ncenter: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>",
            "default": "['50%', '50%']"
          },
          "radius": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>the radius of , the first item of array is inner radius,the second item is outer radius.</p>\n<p>Support set to percentage, equal to half of the smaller item between height and width of the container. </p>\n",
            "default": "75%"
          },
          "startAngle": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The start angle of coordinate, which is the angle of the first indicator axis.</p>\n",
            "default": 90
          },
          "name": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The configuration items of every indicator&#39;s name in radar chart.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the indicator&#39;s name.</p>\n",
                "default": true
              },
              "formatter": {
                "type": [
                  "string",
                  "Function"
                ],
                "descriptionCN": "<p>The formatter of showing indicator&#39;s name, in which the string and callback function are valid. See the following example: </p>\n<pre><code class=\"lang-js\">// using string template, the template variable should be the indicator&#39;s name {value}\nformatter: &#39;【{value}】&#39;\n// using callback function, the first parameter is the indicator&#39;s name, and the second parameter id the indicator&#39;s cinfiguration item \nformatter: function (value, indicator) {\n    return &#39;【&#39; + value + &#39;】&#39;;\n}\n</code></pre>\n"
              }
            }
          },
          "nameGap": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>the distance between the indicator&#39;s name and axis.</p>\n",
            "default": 15,
            "properties": {
              "textStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>text color.</p>\n",
                    "default": "'#333'"
                  },
                  "fontStyle": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                    "default": "'normal'"
                  },
                  "fontWeight": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                    "default": "normal"
                  },
                  "fontFamily": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font series</p>\n",
                    "default": "'sans-serief'"
                  },
                  "fontSize": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Font size</p>\n",
                    "default": 12
                  }
                }
              },
              "splitNumber": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>the split number of indicator axis.</p>\n",
                "default": 5
              },
              "shape": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>The categories of radar chart drawing, in which the <code>&#39;polygon&#39;</code> and <code>&#39;circle&#39;</code> is valid.</p>\n",
                "default": "'polygon'"
              },
              "scale": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specifies whether to get rid of the propotion of 0. with the setting of <code>true</code>, the coordinate tick would not compulsorily contains zero tick, which is more useful in scatter diagram of double numerical values axis. </p>\n",
                "default": false
              }
            }
          },
          "axisLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about axis line.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the axis line or not.</p>\n",
                "default": true
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisLineline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisTick": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axis tick </p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the axis tick.</p>\n",
                "default": false
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify the axis tick are inside oriented. It defauts to be outside oriented.</p>\n",
                "default": false
              },
              "length": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The length of the axis tick </p>\n",
                "default": 5
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisTickline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisTickline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisTickline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisLabel": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axistick lable</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the label of axis tick label or not. </p>\n",
                "default": false
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether the axisTick label is inside oriented. It defaults to be outside oriented.</p>\n",
                "default": false
              },
              "rotate": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The rotation angle of the tick label. As the category labels in the category axis cannot be shown completely, you can rotate the tick labels to prevent them from overlapping each other.   </p>\n<p>The rotation angle is from -90 degree to 90 degree.</p>\n",
                "default": 0
              },
              "margin": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The margin between the tick lable and the axis.</p>\n",
                "default": 8
              },
              "formatter": {
                "type": [
                  "string",
                  "Function"
                ],
                "descriptionCN": "<p>The formatter of axi stick label, supporting both string template and callback fuction.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">//using string template, the template variable is the default label of axistick  {value}\nformatter: &#39;{value} kg&#39;\n\n// using callback function template, function parameters are individually\nformatter: function (value, index) {\n    // formatting to be Month/day, the particular year display only in the first scale\n    var date = new Date(value);\n    var texts = [(date.getMonth() + 1), date.getDate()];\n    if (idx === 0) {\n        texts.unshift(date.getYear());\n    }\n    return texts.join(&#39;/&#39;);\n}\n</code></pre>\n",
                "default": null
              },
              "textStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>text color.</p>\n",
                    "default": "'#333'"
                  },
                  "fontStyle": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                    "default": "'normal'"
                  },
                  "fontWeight": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                    "default": "normal"
                  },
                  "fontFamily": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font series</p>\n",
                    "default": "'sans-serief'"
                  },
                  "fontSize": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Font size</p>\n",
                    "default": 12
                  }
                }
              }
            }
          },
          "splitLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The splitLine of coordinate axis in <a href=\"#grid\">grid</a> area defaults to show.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the splitLine.</p>\n",
                "default": true,
                "properties": {
                  "color": {
                    "type": [
                      "Array",
                      "string"
                    ],
                    "descriptionCN": "<p>The color of the splitLine, which could be set as single color. </p>\n<p>The splitLines color could also be set as color array, from which the split lines would circularly set their colors according to the color order in the array. </p>\n<p>example</p>\n<pre><code>splitLine: {\n    lineStyle: {\n        // adopt interval color between deep and light\n        color: [&#39;#aaa&#39;, &#39;#ddd&#39;]\n    }\n}\n</code></pre>",
                    "default": "['#ccc']"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>splitLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>splitLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n<!-- overwrite color -->\n"
                  }
                }
              }
            }
          },
          "splitArea": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The split area of coordinate axis in <a href=\"#grid\">grid</a> area defaults not to show.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify whether to show the splitArea.</p>\n",
                "default": true
              },
              "areaStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The style settings about split area</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Array"
                    ],
                    "descriptionCN": "<p>The color of split area. \nThe color of split area would circularly set their colors according to the color order in the array, which defaults to adopt a interval color between the deep and light one.</p>\n",
                    "default": "['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "indicator": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>the indicator of radar chart, which refers to multiple variables(dimensions) in radar chart. Here is the example. </p>\n<pre><code class=\"lang-js\">indicator: [\n   { name: &#39;sales (sales) &#39;, max: 6500},\n   { name: &#39;administration (Administration) &#39;, max: 16000},\n   { name: &#39;Information Techology (Information Techology) &#39;, max: 30000},\n   { name: &#39;Customer Support (Customer Support) &#39;, max: 38000},\n   { name: &#39;Development (Development) &#39;, max: 52000},\n   { name: &#39;Marketing (Marketing) &#39;, max: 25000}\n]\n</code></pre>\n",
            "items": {
              "type": "Object",
              "properties": {
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Indicator&#39;s name.</p>\n"
                },
                "max": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The maximum of indicator, optional, recommond to set </p>\n"
                },
                "min": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The minimum of indicator, optional, default to be 0.</p>\n"
                }
              }
            }
          }
        }
      },
      "dataZoom": {
        "type": "Array",
        "items": {
          "anyOf": [
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>dataZoomInside</strong></p>\n<p>Data zoom functionalities is embeded inside coordinate systems, enable user to zoom or roam coordinate system by mouse dragging, mouse move or finger touch (in touch screen). See <a href=\"#dataZoom\">dataZoom</a>.</p>\n<p>Possible interactions:</p>\n<ul>\n<li><p>translation: slide (by mouse or finger touch) in coordinate system to translate view window.</p>\n</li>\n<li><p>zoom: roll mouse wheel or pinch (on touch screen or touch pad) within coordinate system to zoom view window.</p>\n</li>\n</ul>\n<p><br>\n<br></p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'inside'"
                },
                "xAxisIndex": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>Specify which <a href=\"#xAxis\">xAxis</a> is/are controlled by the <code>dataZoom-inside</code> when <a href=\"#grid\">catesian coordinate system</a> is used.</p>\n<p>By default the first <code>xAxis</code> that parallel to <code>dataZoom</code> are controlled when <a href=\"#dataZoom-inside.orient\">dataZoom-inside.orient</a> is set as <code>&#39;horizontal&#39;</code>. But it is recommended to specify it explicitly but not use default value.</p>\n<p>If it is set as a single <code>number</code>, one axis is controlled, while if it is set as an <code>Array</code> , multiple axes are controlled.</p>\n<p>For example:</p>\n<pre><code class=\"lang-javascript\">option: {\n    xAxis: [\n        {...}, // The first xAxis\n        {...}, // The second xAxis\n        {...}, // The third xAxis\n        {...}  // The fourth xAxis\n    ],\n    dataZoom: [\n        { // The first dataZoom component\n            xAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                     // controls the first and the third xAxis\n        },\n        { // The second dataZoom component\n            xAxisIndex: 3      // indicates that this dataZoom component\n                                     // controls the fourth xAxis\n        }\n    ]\n}\n</code></pre>\n",
                  "default": null
                },
                "yAxisIndex": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>Specify which <a href=\"#yAxis\">yAxis</a> is/are controlled by the <code>dataZoom-inside</code> when <a href=\"#grid\">catesian coordinate system</a> is used.</p>\n<p>By default the first <code>yAxis</code> that parallel to <code>dataZoom</code> are controlled when <a href=\"#dataZoom-inside.orient\">dataZoom-inside.orient</a> is set as <code>&#39;vertical&#39;</code>. But it is recommended to specify it explicitly but not use default value.</p>\n<p>If it is set as a single <code>number</code>, one axis is controlled, while if it is set as an <code>Array</code> , multiple axes are controlled.</p>\n<p>For example:</p>\n<pre><code class=\"lang-javascript\">option: {\n    yAxis: [\n        {...}, // The first yAxis\n        {...}, // The second yAxis\n        {...}, // The third yAxis\n        {...}  // The fourth yAxis\n    ],\n    dataZoom: [\n        { // The first dataZoom component\n            yAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                     // controls the first and the third yAxis\n        },\n        { // The second dataZoom component\n            yAxisIndex: 3      // indicates that this dataZoom component\n                                     // controls the fourth yAxis\n        }\n    ]\n}\n</code></pre>\n",
                  "default": null
                },
                "angleAxisIndex": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>Specify which <a href=\"#angleAxis\">angleAxis</a> is/are controlled by the <code>dataZoom-inside</code> when <a href=\"#polar\">polar coordinate system</a> is used.</p>\n<p>By default all the <code>angleAxis</code>s are controlled. But it is recommended to specify it explicitly but not use default value.</p>\n<p>If it is set as a single <code>number</code>, one axis is controlled, while if it is set as an <code>Array</code> , multiple axes are controlled.</p>\n<p>For example:</p>\n<pre><code class=\"lang-javascript\">option: {\n    angleAxis: [\n        {...}, // The first angleAxis\n        {...}, // The second angleAxis\n        {...}, // The third angleAxis\n        {...}  // The fourth angleAxis\n    ],\n    dataZoom: [\n        { // The first dataZoom component\n            angleAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                     // controls the first and the third angleAxis\n        },\n        { // The second dataZoom component\n            angleAxisIndex: 3      // indicates that this dataZoom component\n                                     // controls the fourth angleAxis\n        }\n    ]\n}\n</code></pre>\n",
                  "default": null
                },
                "radiusAxisIndex": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>Specify which <a href=\"#radiusAxis\">radiusAxis</a> is/are controlled by the <code>dataZoom-inside</code> when <a href=\"#polar\">polar coordinate system</a> is used.</p>\n<p>By default all the <code>radiusAxis</code>s are controlled. But it is recommended to specify it explicitly but not use default value.</p>\n<p>If it is set as a single <code>number</code>, one axis is controlled, while if it is set as an <code>Array</code> , multiple axes are controlled.</p>\n<p>For example:</p>\n<pre><code class=\"lang-javascript\">option: {\n    radiusAxis: [\n        {...}, // The first radiusAxis\n        {...}, // The second radiusAxis\n        {...}, // The third radiusAxis\n        {...}  // The fourth radiusAxis\n    ],\n    dataZoom: [\n        { // The first dataZoom component\n            radiusAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                     // controls the first and the third radiusAxis\n        },\n        { // The second dataZoom component\n            radiusAxisIndex: 3      // indicates that this dataZoom component\n                                     // controls the fourth radiusAxis\n        }\n    ]\n}\n</code></pre>\n",
                  "default": null
                },
                "filterMode": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Generally <code>dataZoom</code> component zoom or roam coordinate system through data filtering and set the windows of axes internally.</p>\n<p>Its behaviours vary according to filtering mode settings (<a href=\"#dataZoom.filterMode\">dataZoom.filterMode</a>).</p>\n<p>Possible values:</p>\n<ul>\n<li><p>&#39;filter&#39;: data that outside the window will be <strong>filtered</strong>, which may lead to some changes of windows of other axes.</p>\n</li>\n<li><p>&#39;empty&#39;: data that outside the window will be <strong>set to NaN</strong>, which will not lead to changes of windows of other axes.</p>\n</li>\n</ul>\n<p>How to set <code>filterMode</code> is up to users, depending on the requirments and scenarios. Expirically:</p>\n<ul>\n<li><p>If only <code>xAxis</code> or only <code>yAxis</code> is controlled by <code>dataZoom</code>, <code>filterMode: &#39;filter&#39;</code> is typically used, which enable the other axis auto adapte its window to the extent of the filtered data.</p>\n</li>\n<li><p>If both <code>xAxis</code> and <code>yAxis</code> are operated by <code>dataZoom</code>:</p>\n<ul>\n<li><p>If <code>xAxis</code> and <code>yAxis</code> should not effect mutually (e.g. a scatter chart with both axes on the type of <code>&#39;value&#39;</code>), they should be set to be <code>filterMode: &#39;empty&#39;</code>.</p>\n</li>\n<li><p>If <code>xAxis</code> is the main axis and <code>yAxis</code> is the auxiliary axis (or vise versa) (e.g., in a bar chart, when dragging <code>dataZoomX</code> to change the window of xAxis, we need the yAxis to adapt to the clipped data, but when dragging <code>dataZoomY</code> to change the window of yAxis, we need the xAxis not to be changed), in this case, <code>xAxis</code> should be set to be <code>fiterMode: &#39;filter&#39;</code>, while <code>yAxis</code> shoule be set to be <code>fiterMode: &#39;empty&#39;</code>.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>It can be demostrated by the sample:</p>\n<pre><code class=\"lang-javascript\">option = {\n    dataZoom: [\n        {\n            id: &#39;dataZoomX&#39;,\n            type: &#39;slider&#39;,\n            xAxisIndex: [0],\n            filterMode: &#39;filter&#39;\n        },\n        {\n            id: &#39;dataZoomY&#39;,\n            type: &#39;slider&#39;,\n            yAxisIndex: [0],\n            filterMode: &#39;empty&#39;\n        }\n    ],\n    xAxis: {type: &#39;value&#39;},\n    yAxis: {type: &#39;value&#39;},\n    series{\n        type: &#39;bar&#39;,\n        data: [\n            // The first column corresponds to xAxis,\n            // and the second coloum corresponds to yAxis.\n            [12, 24, 36],\n            [90, 80, 70],\n            [3, 9, 27],\n            [1, 11, 111]\n        ]\n    }\n}\n</code></pre>\n<p>In the sample above, <code>dataZoomX</code> is set as <code>filterMode: &#39;filter&#39;</code>. When use drags <code>dataZoomX</code> (do not touch <code>dataZoomY</code>) and the valueWindow of <code>xAxis</code> is changed to <code>[2, 50]</code> consequently, <code>dataZoomX</code> travel the first column of series.data and filter items that out of the window. The series.data turns out to be:</p>\n<pre><code class=\"lang-javascript\">[\n    [12, 24, 36],\n    // [90, 80, 70] This item is filtered, as 90 is out of the window.\n    [3, 9, 27]\n    // [1, 11, 111] This item is filtered, as 1 is out of the window.\n]\n</code></pre>\n<p>Before filtering, the second column, which corresponds to yAxis, has values <code>24</code>, <code>80</code>, <code>9</code>, <code>11</code>. After filtering, only <code>24</code> and <code>9</code> are left. Then the extent of <code>yAxis</code> is adjusted to adapt the two values (if <code>yAxis.min</code> and <code>yAxis.man</code> are not set).</p>\n<p>So <code>filterMode: &#39;filter&#39;</code> can be used to enable the other axis to auto adapt the filtered data.</p>\n<p>Then let&#39;s review the sample from the beginning, <code>dataZoomY</code> is set as <code>filterMode: &#39;empty&#39;</code>. So if user drags <code>dataZoomY</code> (do not touch <code>dataZoomX</code>) and its window is changed to <code>[10, 60]</code> consequently, <code>dataZoomY</code> travels the second column of series.data and set NaN to all of the values that outside the window (NaN cause the graphical elements, i.e., bar elements, do not show, but sill hold the place). The series.data turns out to be:</p>\n<pre><code class=\"lang-javascript\">[\n    [12, 24, 36],\n    [90, NaN, 70], // Set to NaN\n    [3, NaN, 27],  // Set to NaN\n    [1, 11, 111]\n]\n</code></pre>\n<p>In this case, the first colum (i.e., <code>12</code>, <code>90</code>, <code>3</code>, <code>1</code>, which corresponds to <code>xAxis</code>), will not be changed at all. So dragging <code>yAxis</code> will not change extent of <code>xAxis</code>, which is good for requirements like outlier filtering.</p>\n<p>See this example:</p>\n<iframe data-src=\"doc-example/bar-dataZoom-filterMode&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n\n\n",
                  "default": "'filter'"
                },
                "start": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The start percentage of the window out of the data extent, in the range of 0 ~ 100.</p>\n<p><a href=\"#dataZoom-inside.start\">dataZoom-inside.start</a> and <a href=\"#dataZoom-inside.end\">dataZoom-inside.end</a> define the window of the data in <strong>percent</strong> form.</p>\n",
                  "default": 0
                },
                "end": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The end percentage of the window out of the data extent, in the range of 0 ~ 100.</p>\n<p><a href=\"#dataZoom-inside.start\">dataZoom-inside.start</a> and <a href=\"#dataZoom-inside.end\">dataZoom-inside.end</a> define the window of the data in <strong>percent</strong> form.</p>\n",
                  "default": 100
                },
                "startValue": {
                  "type": [
                    "number",
                    "string",
                    "Date"
                  ],
                  "descriptionCN": "<p>The start absolute value of the window, not works when <a href=\"#dataZoom-inside.start\">dataZoom-inside.start</a> is set.</p>\n<p><a href=\"#dataZoom-inside.startValue\">dataZoom-inside.startValue</a> and <a href=\"#dataZoom-inside.endValue\">dataZoom-inside.endValue</a> define the window of the data window in <strong>absolute value</strong> form.</p>\n<p>Notice, if an axis is set to be <code>category</code>, <code>startValue</code> could be set as <code>index</code> of the array of <code>axis.data</code> or as the array value itself. In the latter case, it will internally and automatically translate to the index of array.</p>\n",
                  "default": null
                },
                "endValue": {
                  "type": [
                    "number",
                    "string",
                    "Date"
                  ],
                  "descriptionCN": "<p>The end absolute value of the window, not works when <a href=\"#dataZoom-inside.end\">dataZoom-inside.end</a> is set.</p>\n<p><a href=\"#dataZoom-inside.startValue\">dataZoom-inside.startValue</a> and <a href=\"#dataZoom-inside.endValue\">dataZoom-inside.endValue</a> define the window of the data window in <strong>absolute value</strong> form.</p>\n<p>Notice, if an axis is set to be <code>category</code>, <code>startValue</code> could be set as <code>index</code> of the array of <code>axis.data</code> or as the array value itself. In the latter case, it will internally and automatically translate to the index of array.</p>\n",
                  "default": null
                },
                "orient": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Specify whether the layout of <code>dataZoom</code> component is horizontal or vertical. What&#39;s more, it indicates whether the horizontal axis or vertical axis is controlled by default in catesian coordinate system.</p>\n<p>Valid values:</p>\n<ul>\n<li><p><code>&#39;horizontal&#39;</code>: horizontal.</p>\n</li>\n<li><p><code>&#39;vertical&#39;</code>: vertical.</p>\n</li>\n</ul>\n",
                  "default": null
                },
                "zoomLock": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Specify whether to lock the size of window (selected area).</p>\n<p>When set as <code>true</code>, the size of window is locked, that is, only the translation (by mouse drag or touch drag) is avialable but zoom is not.</p>\n",
                  "default": false
                },
                "throttle": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Specify the frame rate of views refreshing, with unit millisecond (ms).</p>\n<p>If <a href=\"#animation\">animation</a> set as <code>true</code> and <a href=\"#animationDurationUpdate\">animationDurationUpdate</a> set as bigger than <code>0</code>, you can keep <code>throttle</code> as the default value <code>100</code> (or set it as a value bigger than <code>0</code>), otherwise it might be not smooth when dragging.</p>\n<p>If <a href=\"#animation\">animation</a> set as <code>false</code> or <a href=\"#animationDurationUpdate\">animationDurationUpdate</a> set as <code>0</code>, and data size is not very large, and it seems to be not smooth when dragging, you can set <code>throttle</code> as <code>0</code> to improve that.</p>\n",
                  "default": 100
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>dataZoomSlider</strong></p>\n<p>A special slider bar is provided, on which coordinate systems can be zoomed or roamed by mouse dragging or finger touch (in touch screen). See <a href=\"#dataZoom\">dataZoom</a>.</p>\n<p><br>\n<br></p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'slider'"
                },
                "show": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Specify whether to show the  component. If set as <code>false</code>, it will not show, but it still do its job.</p>\n",
                  "default": true
                },
                "backgroundColor": {
                  "type": [
                    "Color"
                  ],
                  "descriptionCN": "<p>The background color of the component.</p>\n",
                  "default": "'rgba(47,69,84,0)'"
                },
                "dataBackgroundColor": {
                  "type": [
                    "Color"
                  ],
                  "descriptionCN": "<p>The background color of the data shadow in the component.</p>\n",
                  "default": "'#ddd'"
                },
                "fillerColor": {
                  "type": [
                    "Color"
                  ],
                  "descriptionCN": "<p>The color of selected area (or called window).</p>\n",
                  "default": "'rgba(47,69,84,0.25)'"
                },
                "handleColor": {
                  "type": [
                    "Color"
                  ],
                  "descriptionCN": "<p>The color of control handle.</p>\n",
                  "default": "'rgba(47,69,84,0.65)'"
                },
                "handleSize": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The size of control handle.</p>\n",
                  "default": 10
                },
                "labelPrecision": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Specify the decimal places of the value shown in label. automatically determined by default. Possible value: 0, 1, 2, ...</p>\n",
                  "default": "'auto'"
                },
                "labelFormatter": {
                  "type": [
                    "string",
                    "Function"
                  ],
                  "descriptionCN": "<p>The formatter tool for the label.</p>\n<ul>\n<li><p>If it is set as <code>string</code>, it is a template, for instance: <code>aaaa{value}bbbb</code>, where <code>{value}</code> will be substituted by the value of the edge of the window.</p>\n</li>\n<li><p>If it is set as <code>Function</code>, it is a callback function, for example:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">labelFormatter: function (value) {\n    // Finally return the content text of the label.\n    return &#39;aaa&#39; + value + &#39;bbb&#39;;\n}\n</code></pre>\n",
                  "default": null
                },
                "showDetail": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Specify whether to show labels, that is, show the extent of the window when dragging.</p>\n",
                  "default": true
                },
                "showDataShadow": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Specify whether to show data shadow, which could indicate the data tendency generally.</p>\n<p>Works only in <code>dataZoom-silder</code>. See <a href=\"#dataZoom-slider.dataBackgroundColor\">dataBackgroundColor</a>.</p>\n",
                  "default": "'auto'"
                },
                "realtime": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Specify whether to real-time update the view while dragging. If it was set as <code>false</code>, the view will be updated only at the end of dragging.</p>\n",
                  "default": true
                },
                "textStyle\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "",
                  "properties": {
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>dataZoom text color.</p>\n",
                      "default": "#333"
                    },
                    "fontStyle": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>dataZoom Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                      "default": "'normal'"
                    },
                    "fontWeight": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>dataZoom Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                      "default": "normal"
                    },
                    "fontFamily": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>dataZoom Font series</p>\n",
                      "default": "'sans-serief'"
                    },
                    "fontSize": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>dataZoom Font size</p>\n",
                      "default": 12
                    }
                  }
                },
                "xAxisIndex": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>Specify which <a href=\"#xAxis\">xAxis</a> is/are controlled by the <code>dataZoom-slider</code> when <a href=\"#grid\">catesian coordinate system</a> is used.</p>\n<p>By default the first <code>xAxis</code> that parallel to <code>dataZoom</code> are controlled when <a href=\"#dataZoom-slider.orient\">dataZoom-slider.orient</a> is set as <code>&#39;horizontal&#39;</code>. But it is recommended to specify it explicitly but not use default value.</p>\n<p>If it is set as a single <code>number</code>, one axis is controlled, while if it is set as an <code>Array</code> , multiple axes are controlled.</p>\n<p>For example:</p>\n<pre><code class=\"lang-javascript\">option: {\n    xAxis: [\n        {...}, // The first xAxis\n        {...}, // The second xAxis\n        {...}, // The third xAxis\n        {...}  // The fourth xAxis\n    ],\n    dataZoom: [\n        { // The first dataZoom component\n            xAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                     // controls the first and the third xAxis\n        },\n        { // The second dataZoom component\n            xAxisIndex: 3      // indicates that this dataZoom component\n                                     // controls the fourth xAxis\n        }\n    ]\n}\n</code></pre>\n",
                  "default": null
                },
                "yAxisIndex": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>Specify which <a href=\"#yAxis\">yAxis</a> is/are controlled by the <code>dataZoom-slider</code> when <a href=\"#grid\">catesian coordinate system</a> is used.</p>\n<p>By default the first <code>yAxis</code> that parallel to <code>dataZoom</code> are controlled when <a href=\"#dataZoom-slider.orient\">dataZoom-slider.orient</a> is set as <code>&#39;vertical&#39;</code>. But it is recommended to specify it explicitly but not use default value.</p>\n<p>If it is set as a single <code>number</code>, one axis is controlled, while if it is set as an <code>Array</code> , multiple axes are controlled.</p>\n<p>For example:</p>\n<pre><code class=\"lang-javascript\">option: {\n    yAxis: [\n        {...}, // The first yAxis\n        {...}, // The second yAxis\n        {...}, // The third yAxis\n        {...}  // The fourth yAxis\n    ],\n    dataZoom: [\n        { // The first dataZoom component\n            yAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                     // controls the first and the third yAxis\n        },\n        { // The second dataZoom component\n            yAxisIndex: 3      // indicates that this dataZoom component\n                                     // controls the fourth yAxis\n        }\n    ]\n}\n</code></pre>\n",
                  "default": null
                },
                "angleAxisIndex": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>Specify which <a href=\"#angleAxis\">angleAxis</a> is/are controlled by the <code>dataZoom-slider</code> when <a href=\"#polar\">polar coordinate system</a> is used.</p>\n<p>By default all the <code>angleAxis</code>s are controlled. But it is recommended to specify it explicitly but not use default value.</p>\n<p>If it is set as a single <code>number</code>, one axis is controlled, while if it is set as an <code>Array</code> , multiple axes are controlled.</p>\n<p>For example:</p>\n<pre><code class=\"lang-javascript\">option: {\n    angleAxis: [\n        {...}, // The first angleAxis\n        {...}, // The second angleAxis\n        {...}, // The third angleAxis\n        {...}  // The fourth angleAxis\n    ],\n    dataZoom: [\n        { // The first dataZoom component\n            angleAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                     // controls the first and the third angleAxis\n        },\n        { // The second dataZoom component\n            angleAxisIndex: 3      // indicates that this dataZoom component\n                                     // controls the fourth angleAxis\n        }\n    ]\n}\n</code></pre>\n",
                  "default": null
                },
                "radiusAxisIndex": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>Specify which <a href=\"#radiusAxis\">radiusAxis</a> is/are controlled by the <code>dataZoom-slider</code> when <a href=\"#polar\">polar coordinate system</a> is used.</p>\n<p>By default all the <code>radiusAxis</code>s are controlled. But it is recommended to specify it explicitly but not use default value.</p>\n<p>If it is set as a single <code>number</code>, one axis is controlled, while if it is set as an <code>Array</code> , multiple axes are controlled.</p>\n<p>For example:</p>\n<pre><code class=\"lang-javascript\">option: {\n    radiusAxis: [\n        {...}, // The first radiusAxis\n        {...}, // The second radiusAxis\n        {...}, // The third radiusAxis\n        {...}  // The fourth radiusAxis\n    ],\n    dataZoom: [\n        { // The first dataZoom component\n            radiusAxisIndex: [0, 2] // Indicates that this dataZoom component\n                                     // controls the first and the third radiusAxis\n        },\n        { // The second dataZoom component\n            radiusAxisIndex: 3      // indicates that this dataZoom component\n                                     // controls the fourth radiusAxis\n        }\n    ]\n}\n</code></pre>\n",
                  "default": null
                },
                "filterMode": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Generally <code>dataZoom</code> component zoom or roam coordinate system through data filtering and set the windows of axes internally.</p>\n<p>Its behaviours vary according to filtering mode settings (<a href=\"#dataZoom.filterMode\">dataZoom.filterMode</a>).</p>\n<p>Possible values:</p>\n<ul>\n<li><p>&#39;filter&#39;: data that outside the window will be <strong>filtered</strong>, which may lead to some changes of windows of other axes.</p>\n</li>\n<li><p>&#39;empty&#39;: data that outside the window will be <strong>set to NaN</strong>, which will not lead to changes of windows of other axes.</p>\n</li>\n</ul>\n<p>How to set <code>filterMode</code> is up to users, depending on the requirments and scenarios. Expirically:</p>\n<ul>\n<li><p>If only <code>xAxis</code> or only <code>yAxis</code> is controlled by <code>dataZoom</code>, <code>filterMode: &#39;filter&#39;</code> is typically used, which enable the other axis auto adapte its window to the extent of the filtered data.</p>\n</li>\n<li><p>If both <code>xAxis</code> and <code>yAxis</code> are operated by <code>dataZoom</code>:</p>\n<ul>\n<li><p>If <code>xAxis</code> and <code>yAxis</code> should not effect mutually (e.g. a scatter chart with both axes on the type of <code>&#39;value&#39;</code>), they should be set to be <code>filterMode: &#39;empty&#39;</code>.</p>\n</li>\n<li><p>If <code>xAxis</code> is the main axis and <code>yAxis</code> is the auxiliary axis (or vise versa) (e.g., in a bar chart, when dragging <code>dataZoomX</code> to change the window of xAxis, we need the yAxis to adapt to the clipped data, but when dragging <code>dataZoomY</code> to change the window of yAxis, we need the xAxis not to be changed), in this case, <code>xAxis</code> should be set to be <code>fiterMode: &#39;filter&#39;</code>, while <code>yAxis</code> shoule be set to be <code>fiterMode: &#39;empty&#39;</code>.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>It can be demostrated by the sample:</p>\n<pre><code class=\"lang-javascript\">option = {\n    dataZoom: [\n        {\n            id: &#39;dataZoomX&#39;,\n            type: &#39;slider&#39;,\n            xAxisIndex: [0],\n            filterMode: &#39;filter&#39;\n        },\n        {\n            id: &#39;dataZoomY&#39;,\n            type: &#39;slider&#39;,\n            yAxisIndex: [0],\n            filterMode: &#39;empty&#39;\n        }\n    ],\n    xAxis: {type: &#39;value&#39;},\n    yAxis: {type: &#39;value&#39;},\n    series{\n        type: &#39;bar&#39;,\n        data: [\n            // The first column corresponds to xAxis,\n            // and the second coloum corresponds to yAxis.\n            [12, 24, 36],\n            [90, 80, 70],\n            [3, 9, 27],\n            [1, 11, 111]\n        ]\n    }\n}\n</code></pre>\n<p>In the sample above, <code>dataZoomX</code> is set as <code>filterMode: &#39;filter&#39;</code>. When use drags <code>dataZoomX</code> (do not touch <code>dataZoomY</code>) and the valueWindow of <code>xAxis</code> is changed to <code>[2, 50]</code> consequently, <code>dataZoomX</code> travel the first column of series.data and filter items that out of the window. The series.data turns out to be:</p>\n<pre><code class=\"lang-javascript\">[\n    [12, 24, 36],\n    // [90, 80, 70] This item is filtered, as 90 is out of the window.\n    [3, 9, 27]\n    // [1, 11, 111] This item is filtered, as 1 is out of the window.\n]\n</code></pre>\n<p>Before filtering, the second column, which corresponds to yAxis, has values <code>24</code>, <code>80</code>, <code>9</code>, <code>11</code>. After filtering, only <code>24</code> and <code>9</code> are left. Then the extent of <code>yAxis</code> is adjusted to adapt the two values (if <code>yAxis.min</code> and <code>yAxis.man</code> are not set).</p>\n<p>So <code>filterMode: &#39;filter&#39;</code> can be used to enable the other axis to auto adapt the filtered data.</p>\n<p>Then let&#39;s review the sample from the beginning, <code>dataZoomY</code> is set as <code>filterMode: &#39;empty&#39;</code>. So if user drags <code>dataZoomY</code> (do not touch <code>dataZoomX</code>) and its window is changed to <code>[10, 60]</code> consequently, <code>dataZoomY</code> travels the second column of series.data and set NaN to all of the values that outside the window (NaN cause the graphical elements, i.e., bar elements, do not show, but sill hold the place). The series.data turns out to be:</p>\n<pre><code class=\"lang-javascript\">[\n    [12, 24, 36],\n    [90, NaN, 70], // Set to NaN\n    [3, NaN, 27],  // Set to NaN\n    [1, 11, 111]\n]\n</code></pre>\n<p>In this case, the first colum (i.e., <code>12</code>, <code>90</code>, <code>3</code>, <code>1</code>, which corresponds to <code>xAxis</code>), will not be changed at all. So dragging <code>yAxis</code> will not change extent of <code>xAxis</code>, which is good for requirements like outlier filtering.</p>\n<p>See this example:</p>\n<iframe data-src=\"doc-example/bar-dataZoom-filterMode&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n\n\n",
                  "default": "'filter'"
                },
                "start": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The start percentage of the window out of the data extent, in the range of 0 ~ 100.</p>\n<p><a href=\"#dataZoom-slider.start\">dataZoom-slider.start</a> and <a href=\"#dataZoom-slider.end\">dataZoom-slider.end</a> define the window of the data in <strong>percent</strong> form.</p>\n",
                  "default": 0
                },
                "end": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The end percentage of the window out of the data extent, in the range of 0 ~ 100.</p>\n<p><a href=\"#dataZoom-slider.start\">dataZoom-slider.start</a> and <a href=\"#dataZoom-slider.end\">dataZoom-slider.end</a> define the window of the data in <strong>percent</strong> form.</p>\n",
                  "default": 100
                },
                "startValue": {
                  "type": [
                    "number",
                    "string",
                    "Date"
                  ],
                  "descriptionCN": "<p>The start absolute value of the window, not works when <a href=\"#dataZoom-slider.start\">dataZoom-slider.start</a> is set.</p>\n<p><a href=\"#dataZoom-slider.startValue\">dataZoom-slider.startValue</a> and <a href=\"#dataZoom-slider.endValue\">dataZoom-slider.endValue</a> define the window of the data window in <strong>absolute value</strong> form.</p>\n<p>Notice, if an axis is set to be <code>category</code>, <code>startValue</code> could be set as <code>index</code> of the array of <code>axis.data</code> or as the array value itself. In the latter case, it will internally and automatically translate to the index of array.</p>\n",
                  "default": null
                },
                "endValue": {
                  "type": [
                    "number",
                    "string",
                    "Date"
                  ],
                  "descriptionCN": "<p>The end absolute value of the window, not works when <a href=\"#dataZoom-slider.end\">dataZoom-slider.end</a> is set.</p>\n<p><a href=\"#dataZoom-slider.startValue\">dataZoom-slider.startValue</a> and <a href=\"#dataZoom-slider.endValue\">dataZoom-slider.endValue</a> define the window of the data window in <strong>absolute value</strong> form.</p>\n<p>Notice, if an axis is set to be <code>category</code>, <code>startValue</code> could be set as <code>index</code> of the array of <code>axis.data</code> or as the array value itself. In the latter case, it will internally and automatically translate to the index of array.</p>\n",
                  "default": null
                },
                "orient": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Specify whether the layout of <code>dataZoom</code> component is horizontal or vertical. What&#39;s more, it indicates whether the horizontal axis or vertical axis is controlled by default in catesian coordinate system.</p>\n<p>Valid values:</p>\n<ul>\n<li><p><code>&#39;horizontal&#39;</code>: horizontal.</p>\n</li>\n<li><p><code>&#39;vertical&#39;</code>: vertical.</p>\n</li>\n</ul>\n",
                  "default": null
                },
                "zoomLock": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Specify whether to lock the size of window (selected area).</p>\n<p>When set as <code>true</code>, the size of window is locked, that is, only the translation (by mouse drag or touch drag) is avialable but zoom is not.</p>\n",
                  "default": false
                },
                "throttle": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Specify the frame rate of views refreshing, with unit millisecond (ms).</p>\n<p>If <a href=\"#animation\">animation</a> set as <code>true</code> and <a href=\"#animationDurationUpdate\">animationDurationUpdate</a> set as bigger than <code>0</code>, you can keep <code>throttle</code> as the default value <code>100</code> (or set it as a value bigger than <code>0</code>), otherwise it might be not smooth when dragging.</p>\n<p>If <a href=\"#animation\">animation</a> set as <code>false</code> or <a href=\"#animationDurationUpdate\">animationDurationUpdate</a> set as <code>0</code>, and data size is not very large, and it seems to be not smooth when dragging, you can set <code>throttle</code> as <code>0</code> to improve that.</p>\n",
                  "default": 100
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "left": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>dataZoom-slider distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "'auto'"
                },
                "top": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>dataZoom-slider distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "'auto'"
                },
                "right": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>dataZoom-slider distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                  "default": "'auto'"
                },
                "bottom": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>dataZoom-slider distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                  "default": "'auto'"
                }
              }
            }
          ]
        },
        "descriptionCN": "<p><code>dataZoom</code> component is used for zooming a specific area, which enable user to investigate data in detail, or get an overview of the data, or get rid of outlier points.</p>\n<p>These types of <code>dataZoom</code> component are supported:</p>\n<ul>\n<li><p><a href=\"#dataZoom-inside\">dataZoomInside</a>: Data zoom functionalities is embeded inside coordinate systems, enable user to zoom or roam coordinate system by mouse dragging, mouse move or finger touch (in touch screen).</p>\n</li>\n<li><p><a href=\"#dataZoom-slider\">dataZoomSlider</a>: A special slider bar is provided, on which coordinate systems can be zoomed or roamed by mouse dragging or finger touch (in touch screen).</p>\n</li>\n<li><p><a href=\"#toolbox.feature.dataZoom\">dataZoomSelect</a>: A marquee tool is provided for zooming or roaming coordinate system. That is <a href=\"#toolbox.feature.dataZoom\">toolbox.feature.dataZoom</a>, which can only be configured in toolbox.</p>\n</li>\n</ul>\n<p>Example:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/scatter-dataZoom-all&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n<p><br></p>\n<hr>\n<p><strong>✦ Relationship between dataZoom and axis ✦</strong></p>\n<p>Basically <code>dataZoom</code> component operates &quot;window&quot; on axis to zoom or roam coordinate system.</p>\n<blockquote>\n<p>Use <a href=\"#dataZoom.xAxisIndex\">dataZoom.xAxisIndex</a> or <a href=\"#dataZoom.yAxisIndex\">dataZoom.yAxisIndex</a> or <a href=\"#dataZoom.radiusAxisIndex\">dataZoom.radiusAxisIndex</a> or <a href=\"#dataZoom.angleAxisIndex\">dataZoom.angleAxisIndex</a> to specify which axes are operated by <code>dataZoom</code>.</p>\n</blockquote>\n<p>A single chart instance can contains several <code>dataZoom</code> components, each of which controls different axes. The <code>dataZoom</code> components that control the same axis will be automatically linked (i.e., all of them will be updated when one of them is updated by user action or API call).</p>\n<p><br></p>\n<hr>\n<p><strong>✦ How dataZoom componets operates axes and data ✦</strong></p>\n<p>Generally <code>dataZoom</code> component zoom or roam coordinate system through data filtering and set the windows of axes internally.</p>\n<p>Its behaviours vary according to filtering mode settings (<a href=\"#dataZoom.filterMode\">dataZoom.filterMode</a>).</p>\n<p>Possible values:</p>\n<ul>\n<li><p>&#39;filter&#39;: data that outside the window will be <strong>filtered</strong>, which may lead to some changes of windows of other axes.</p>\n</li>\n<li><p>&#39;empty&#39;: data that outside the window will be <strong>set to NaN</strong>, which will not lead to changes of windows of other axes.</p>\n</li>\n</ul>\n<p>How to set <code>filterMode</code> is up to users, depending on the requirments and scenarios. Expirically:</p>\n<ul>\n<li><p>If only <code>xAxis</code> or only <code>yAxis</code> is controlled by <code>dataZoom</code>, <code>filterMode: &#39;filter&#39;</code> is typically used, which enable the other axis auto adapte its window to the extent of the filtered data.</p>\n</li>\n<li><p>If both <code>xAxis</code> and <code>yAxis</code> are operated by <code>dataZoom</code>:</p>\n<ul>\n<li><p>If <code>xAxis</code> and <code>yAxis</code> should not effect mutually (e.g. a scatter chart with both axes on the type of <code>&#39;value&#39;</code>), they should be set to be <code>filterMode: &#39;empty&#39;</code>.</p>\n</li>\n<li><p>If <code>xAxis</code> is the main axis and <code>yAxis</code> is the auxiliary axis (or vise versa) (e.g., in a bar chart, when dragging <code>dataZoomX</code> to change the window of xAxis, we need the yAxis to adapt to the clipped data, but when dragging <code>dataZoomY</code> to change the window of yAxis, we need the xAxis not to be changed), in this case, <code>xAxis</code> should be set to be <code>fiterMode: &#39;filter&#39;</code>, while <code>yAxis</code> shoule be set to be <code>fiterMode: &#39;empty&#39;</code>.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>It can be demostrated by the sample:</p>\n<pre><code class=\"lang-javascript\">option = {\n    dataZoom: [\n        {\n            id: &#39;dataZoomX&#39;,\n            type: &#39;slider&#39;,\n            xAxisIndex: [0],\n            filterMode: &#39;filter&#39;\n        },\n        {\n            id: &#39;dataZoomY&#39;,\n            type: &#39;slider&#39;,\n            yAxisIndex: [0],\n            filterMode: &#39;empty&#39;\n        }\n    ],\n    xAxis: {type: &#39;value&#39;},\n    yAxis: {type: &#39;value&#39;},\n    series{\n        type: &#39;bar&#39;,\n        data: [\n            // The first column corresponds to xAxis,\n            // and the second coloum corresponds to yAxis.\n            [12, 24, 36],\n            [90, 80, 70],\n            [3, 9, 27],\n            [1, 11, 111]\n        ]\n    }\n}\n</code></pre>\n<p>In the sample above, <code>dataZoomX</code> is set as <code>filterMode: &#39;filter&#39;</code>. When use drags <code>dataZoomX</code> (do not touch <code>dataZoomY</code>) and the valueWindow of <code>xAxis</code> is changed to <code>[2, 50]</code> consequently, <code>dataZoomX</code> travel the first column of series.data and filter items that out of the window. The series.data turns out to be:</p>\n<pre><code class=\"lang-javascript\">[\n    [12, 24, 36],\n    // [90, 80, 70] This item is filtered, as 90 is out of the window.\n    [3, 9, 27]\n    // [1, 11, 111] This item is filtered, as 1 is out of the window.\n]\n</code></pre>\n<p>Before filtering, the second column, which corresponds to yAxis, has values <code>24</code>, <code>80</code>, <code>9</code>, <code>11</code>. After filtering, only <code>24</code> and <code>9</code> are left. Then the extent of <code>yAxis</code> is adjusted to adapt the two values (if <code>yAxis.min</code> and <code>yAxis.man</code> are not set).</p>\n<p>So <code>filterMode: &#39;filter&#39;</code> can be used to enable the other axis to auto adapt the filtered data.</p>\n<p>Then let&#39;s review the sample from the beginning, <code>dataZoomY</code> is set as <code>filterMode: &#39;empty&#39;</code>. So if user drags <code>dataZoomY</code> (do not touch <code>dataZoomX</code>) and its window is changed to <code>[10, 60]</code> consequently, <code>dataZoomY</code> travels the second column of series.data and set NaN to all of the values that outside the window (NaN cause the graphical elements, i.e., bar elements, do not show, but sill hold the place). The series.data turns out to be:</p>\n<pre><code class=\"lang-javascript\">[\n    [12, 24, 36],\n    [90, NaN, 70], // Set to NaN\n    [3, NaN, 27],  // Set to NaN\n    [1, 11, 111]\n]\n</code></pre>\n<p>In this case, the first colum (i.e., <code>12</code>, <code>90</code>, <code>3</code>, <code>1</code>, which corresponds to <code>xAxis</code>), will not be changed at all. So dragging <code>yAxis</code> will not change extent of <code>xAxis</code>, which is good for requirements like outlier filtering.</p>\n<p>See this example:</p>\n<iframe data-src=\"doc-example/bar-dataZoom-filterMode&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n\n<p>Moreover, when <code>min</code>, <code>max</code> of an axis is set (e.g., <code>yAxis: {min: 0, max: 400}</code>), this extent of the axis will not be modified by the behaviour of dataZoom of other axis any more.</p>\n<p><br></p>\n<hr>\n<p><strong>✦ How to set window ✦</strong></p>\n<p>You can set the current window in two forms:</p>\n<ul>\n<li><p>percent value: see <a href=\"#dataZoom.start\">dataZoom.start</a> and <a href=\"#dataZoom.end\">dataZoom.end</a>.</p>\n</li>\n<li><p>absolute value: see <a href=\"#dataZoom.startValue\">dataZoom.startValue</a> and <a href=\"#dataZoom.endValue\">dataZoom.endValue</a>.</p>\n</li>\n</ul>\n<p>Notice: If use percent value form, and it is in the senario below, the result of dataZoom depends on the sequence of dataZoom definitions appearing in <code>option</code>.</p>\n<pre><code class=\"lang-javascript\">option = {\n    dataZoom: [\n        {\n            id: &#39;dataZoomX&#39;,\n            type: &#39;slider&#39;,\n            xAxisIndex: [0],\n            filterMode: &#39;filter&#39;,   // Set as &#39;filter&#39; so that the modification\n                                    // of window of xAxis willl effect the\n                                    // window of yAxis.\n            start: 30,\n            end: 70\n        },\n        {\n            id: &#39;dataZoomY&#39;,\n            type: &#39;slider&#39;,\n            yAxisIndex: [0],\n            filterMode: &#39;empty&#39;,\n            start: 20,\n            end: 80\n        }\n    ],\n    xAxis: {\n        type: &#39;value&#39;\n    },\n    yAxis: {\n        type: &#39;value&#39;\n        // Notice there is no min or max set to\n        // restrict the view extent of yAxis.\n    },\n    series{\n        type: &#39;bar&#39;,\n        data: [\n            // The first column corresponds to xAxis,\n            // and the second column corresponds to yAxis.\n            [12, 24, 36],\n            [90, 80, 70],\n            [3, 9, 27],\n            [1, 11, 111]\n        ]\n    }\n}\n</code></pre>\n<p>What is the exact meaning of <code>start: 20, end: 80</code> in <code>dataZoomY</code> in the example above?</p>\n<ul>\n<li><p>If <code>yAxis.min</code> and <code>yAxis.max</code> are set:</p>\n<p>  <code>start: 20, end: 80</code> of <code>dataZoomY</code> means: from <code>20%</code> to <code>80%</code> out of <code>[yAxis.min, yAxis.max]</code>.</p>\n<p>  If one of <code>yAxis.min</code> and <code>yAxis.max</code> is not set, the corresponding edge of the full extend also follow rule as follows.</p>\n</li>\n<li><p>If <code>yAxis.min</code> and <code>yAxis.max</code> are not set:</p>\n<ul>\n<li><p>If <code>dataZoomX</code> is set to be <code>filterMode: &#39;empty&#39;</code>:</p>\n<p>  <code>start: 20, end: 80</code> of <code>dataZoomY</code> means: from <code>20%</code> to <code>80%</code> out of <code>[dataMinY to dataMaxY]</code> of series.data (i.e., <code>[9, 80]</code> in the example above).</p>\n</li>\n<li><p>If <code>dataZoomX</code> is set to <code>filterMode: &#39;filter&#39;</code>:</p>\n<p>  Since <code>dataZoomX</code> is defined before <code>dataZoomY</code>, <code>start: 30, end: 70</code> of <code>dataZoomX</code> means: from <code>30%</code> to <code>70%</code> out of full series.data, whereas <code>start: 20, end: 80</code> of <code>dataZoomY</code> means: from <code>20%</code> to <code>80%</code> out of the series.data having been filtered by <code>dataZoomX</code>.</p>\n<p>  If you want to change the process sequence, you can just change the sequence of the definitions apearing in <code>option</code>.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><br>\n<br></p>\n<p>Detailed configurations are listed as follows.</p>\n"
      },
      "visualMap": {
        "type": "Array",
        "items": {
          "anyOf": [
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>Continuous visualMap component (visualMapContinuous)</strong></p>\n<p> (See <a href=\"#visualMap\">the introduction to visual Map component (visualMap)</a>)</p>\n<p>Sample:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/map-visualMap-continuous&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n<p>You can set <a href=\"#visualMap.calculable\">visualMap.calculable</a> to show or hide the hanldes, which is used to change the selected range in <code>visualMapContinuous</code>.</p>\n<p><br>\n<br></p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Used to determine that it is a continuous visualMap component.</p>\n",
                  "default": "continuous"
                },
                "min": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Specify the min dataValue for the visualMap component. <code>[visualMap.min, visualMax.max]</code> make up the domain of viusul mapping.</p>\n<p>Notice that <code>min</code> and <code>max</code> should be specified explicitly, and be <code>[0, 200]</code> by default, but not <code>dataMin</code> and <code>dataMax</code> in series.data.</p>\n"
                },
                "max": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Specify the max dataValue for the visualMap component. <code>[visualMap.min, visualMax.max]</code> make up the domain of viusul mapping.</p>\n<p>Notice that <code>min</code> and <code>max</code> should be specified explicitly, and be <code>[0, 200]</code> by default, but not <code>dataMin</code> and <code>dataMax</code> in series.data.</p>\n"
                },
                "range": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Specify selected range, that is, the dataValue corresponding to the two handles. For example:</p>\n<pre><code class=\"lang-javascript\">chart.setOption({\n    visualMap: {\n        min: 0,\n        max: 100,\n        // dataValue corresponding to the two handles.\n        range: [4, 15],\n        ...\n    }\n});\n</code></pre>\n<p><strong>auto-adaption when min or max is modified by setOption</strong></p>\n<ul>\n<li>If <code>range</code> is not set (or set to null or undefined)</li>\n</ul>\n<pre><code class=\"lang-javascript\">For instance:\nchart.setOption({visualMap: {min: 10, max: 300}}); // range is not set, then range is [min, max] by default, that is, [10, 300]。\n\nchart.setOption({visualMap: {min: 0, max: 400}}); // Modify min and max using setOption again.\n// Then range will be auto-modified to the new [min, max], that is, [0, 400].\n</code></pre>\n<ul>\n<li>If <code>range</code> is set explicitly, such as [10, 300]</li>\n</ul>\n<pre><code class=\"lang-javascript\">For instance:\nchart.setOption({visualMap: {min: 10, max: 300, range: [20, 80]}}); // range is set to [20, 80].\n\nchart.setOption({visualMap: {min: 0, max: 400}}); // min and max are modifies using setOption.\n// Then range keep the original value ([20, 80]) but will not do auto-adaption。\n\nchart.setOption({visualMap: {range: null}}); // Set range to null then.\n// Then auto-adaption of range turns on and range is auto modified to [min, max], that is, [0, 400].\n</code></pre>\n<p><code>range</code> gotten by <code>getOption</code> is always an <code>Array</code>, but not <code>null</code> or <code>undefined</code>.</p>\n"
                },
                "calculable": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether show handles, which can be dragged to adjust &quot;selected range&quot;.</p>\n<p>Notes: In order to be compatible with ECharts2, the rule, which seems to be a little odd, is retained: when <a href=\"#visualMap.type\">visualMap.type</a> is not set, and <a href=\"#visualMap-continuous.calculable\">visualMap.calculable</a> was set to be <code>true</code>, <a href=\"#visualMap.type\">visualMap.type</a> will be automatically set as <code>&#39;continuous&#39;</code>, regardless of some settings such as <a href=\"#visualMap-piecewise.splitNumber\">visualMap-piecewise.splitNumber</a>. Therefore, it is recommended to set <a href=\"#visualMap.type\">visualMap.type</a> explicitly, which avoids ambiguity.</p>\n",
                  "default": false
                },
                "realtime": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to update view in real time when dragging a handle.</p>\n<ul>\n<li><p>If <code>ture</code>, the chart view will be updated in real time when dragging.</p>\n</li>\n<li><p>If <code>false</code>, the chart view will be updated at the end of the handle dragging.</p>\n</li>\n</ul>\n",
                  "default": true
                },
                "inverse": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to inverse the layout of visualMap component.</p>\n<p>As <code>inverse</code> is <code>false</code>, the layout direction is the same as <a href=\"#grid\">catesian coordinate</a>. That is:</p>\n<ul>\n<li>As <a href=\"#visualMap.orient\">visualMap.orient</a> is <code>&#39;vertical&#39;</code>, large data are placed at the top while small at the bottom.</li>\n<li>As <a href=\"#visualMap.orient\">visualMap.orient</a> is <code>&#39;horizontal&#39;</code>,  large data are placed on the right while small on the left.</li>\n</ul>\n<p>As <code>inverse</code> is <code>true</code>, the result is opposite.</p>\n",
                  "default": false
                },
                "precision": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The decimal precision of label, defaults to be 0 (no decimals).</p>\n",
                  "default": 0
                },
                "itemWidth": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The width of the main bar of visualMap component.</p>\n",
                  "default": 20
                },
                "itemHeight": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The height of the main bar of visualMap component.</p>\n",
                  "default": 140
                },
                "align": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Specify the position of handles and labels, against the main bar. The possible values are:</p>\n<ul>\n<li><code>&#39;auto&#39;</code> Decide automatically.</li>\n<li><code>&#39;left&#39;</code> The handles and labels are on the right, which is valid when <code>orient</code> is set as <code>&#39;horizontal&#39;</code>.</li>\n<li><code>&#39;right&#39;</code> The handles and labels are on the left, which is valid when <code>orient</code> is set as <code>&#39;horizontal&#39;</code>.</li>\n<li><code>&#39;top&#39;</code> the handles and labels are at the bottom, which is valid when <code>orient</code> is set as  <code>&#39;vertical&#39;</code>.</li>\n<li><code>&#39;bottom&#39;</code> the handles and labels are at the top, which is valid when <code>orient</code> is set as <code>&#39;vertical&#39;</code>.</li>\n</ul>\n",
                  "default": "'auto'"
                },
                "text": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>The label text on both ends, such as <code>[&#39;High&#39;, &#39;Low&#39;]</code>. <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/map-visualMap-continuous-text&amp;edit=1&amp;reset=1\" target=\"_blank\">sample</a>.</p>\n<p>You can understand the order of items in <code>text</code> array just by a simple trial. See <a href=\"#visualMap.inverse\">visualMap.inverse</a>.</p>\n",
                  "default": null
                },
                "textGap": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>The distance between the ends of the main bar and the label, with unit px. See <a href=\"#visualMap-continuous.text\">visualMap-continuous.text</a></p>\n",
                  "default": 10
                },
                "show": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to show visualMap-continuous component. If set as <code>false</code>, visualMap-continuous component will not show, but it can still perform visual mapping from dataValue to visual channel in chart.</p>\n",
                  "default": true
                },
                "dimension": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Specify which dimension should be used to fetch dataValue from <a href=\"#series.data\">series.data</a>, and then map them to visual channel.</p>\n<p><a href=\"#series.data\">series.data</a> can be regarded as a two-dimensional array, for instance:</p>\n<pre><code class=\"lang-javascript\">[\n    [12, 23, 43],\n    [12, 23, 43],\n    [43, 545, 65],\n    [92, 23, 33]\n]\n</code></pre>\n<p>Each column of the above array is regarded as a <code>dimension</code>. For example, when property <code>dimension</code> is set to 1, the second column (i.e., 23, 23, 545, 23) is chosen to perform visual mapping.</p>\n",
                  "default": 0
                },
                "seriesIndex(number|Array.<number>)\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>Specify visual mapping should be performed on which series, from which\n<a href=\"#series.data\">series.data</a> is fetched.</p>\n<p>All series are used by defualt.</p>\n"
                },
                "hoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p><code>hoverLink</code> enable highlight certain graphical elements of chart when mouse hovers on some place of <code>visualMap</code> component that is coresponding to those graphical elements by visual mapping.</p>\n<p>Inversely, when mouse hovers a graphical element of chart, its value label will be displayed on its corresponding position in <code>visualMap</code>.</p>\n",
                  "default": true
                },
                "inRange": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Define visual channels that will mapped from dataValues that are <strong>in selected range</strong>. (User can interact with visualMap component and make a seleced range by mouse or touch.)</p>\n<p>Possiable visual channels includes:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<hr>\n<p><code>inRange</code> could customize visual channels both in series (by <a href=\"#visualMap-continuous.seriesIndex\">visualMap-continuous.seriesIndex</a>) and in <code>visualMap-continuous</code> itself.</p>\n<p>For instance, if a <code>visualMap-continuous</code> component is used on a scatter chart, the mapping approach from data to <code>color</code> (or <code>symbol</code>, <code>size</code>, ...) can be both customized in the scatter chart and <code>visualMap-continuous</code> component itself. See the code as following:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels both in target series and visualMap-continuous component itself:\n        inRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [30, 100]\n        }\n    }\n]\n</code></pre>\n<p>If you want to define visual channels for target series and visualMap-continuous component separately, you should do as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels only for target series.\n        target: {\n            inRange: {\n                color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n                symbolSize: [60, 200]\n            }\n        },\n        // Define visual channels only for visualMap-continuous component.\n        controller: {\n            inRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p>Or define as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels for both target series and visualMap-continuous component.\n        inRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [60, 200]\n        },\n        // Define visual channels only for visualMap-continuous component, which\n        // will overlap the properties with the same name in the above common\n        // definition. (symbolSize is overlapped by [30, 100] while color\n        // keeps the original value)\n        controller: {\n            inRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p><br></p>\n<hr>\n<p><strong>✦ About visual channels ✦</strong></p>\n<ul>\n<li><p>Various visual channels (such as <code>color</code>、<code>symbolSize</code> and ect.) can be defined in inRange at the same time and all of them will be apopted.</p>\n</li>\n<li><p>Basically visual channels <code>opacity</code> is recommended, rather than <code>colorAlpha</code>. The former controls the transparency of both graphical element and its attachments (like label), whereas the latter only controls the transparency of graphical element.</p>\n</li>\n<li><p>There are two approaches of visual mapping supported: &#39;Linear Mapping&#39; and &#39;Table Mapping&#39;.</p>\n</li>\n</ul>\n<p><br></p>\n<hr>\n<p><strong>✦ Linear Mapping to visual channel ✦</strong></p>\n<p><code>Linear Mapping</code> means that linear calculation will be performed on each dataValue (value of series.data), mapping them from the domain of <code>[visaulMap.min, visualMap.max]</code> to a given range of <code>[visual value 1, visual value 2]</code> and obtaining a final value (say visual value) for visual channel rendering.</p>\n<p>For instance, <code>[visualMap.min, visualMap.max]</code> is set to be <code>[0, 100]</code>, and there is series.data: <code>[50, 10, 100]</code>. We intend to map them to an <code>opacity</code> range <code>[0.4, 1]</code>, by which the size of value can be demostrated by the transparency of graphical elements. visualMap component will then linear calculate them and get opacity values <code>[0.7, 0.44, 1]</code>, cooresponding to each dataValue.</p>\n<p>We can also set the visual range inversely, such as <code>opacity: [1, 0.4]</code>, and the final mapping result for the given series.data above will be <code>[0.7, 0.96, 0.4]</code>.</p>\n<p>Notice: [visualMap.min, visualMap.max] should be set manually and is [0, 100] by defualt, but not <code>dataMin</code> and <code>dataMax</code> in series.data。</p>\n<p>How to configure visualMap component to do Linear Mapping?</p>\n<ul>\n<li><p>When use <a href=\"#visualMap-continuous\">visualMap-continuous</a>, or</p>\n</li>\n<li><p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is not used.</p>\n</li>\n</ul>\n<p>About the value of visual channel (visual value):</p>\n<ul>\n<li><p>Basically <code>Array</code> is used to express the range of visual value, e.g., <code>color: [&#39;#333&#39;, &#39;#777&#39;]</code>.</p>\n</li>\n<li><p>Single <code>number</code> or single <code>string</code> can also be used, which will be converted to an <code>Array</code> by visualMap component. e.g.:  <code>opacity: 0.4</code> will be converted to <code>opacity: [0.4, 0.4]</code>, <code>color: &#39;#333&#39;</code> will be converted to <code>color: [&#39;#333&#39;, &#39;#333&#39;]</code>.</p>\n</li>\n<li><p>For visual channel <code>symbolSize</code>, <code>opacity</code>, <code>colorAlpha</code>, <code>colorLightness</code>, <code>colorSaturation</code>, <code>colorHue</code>, the range of visual value is always in the form of: <code>[visual value of visualMap.min, visual value of visualMap.max]</code>. For example, <code>colorLightness: [0.8, 0.2]</code> means that the dataValue in series.data that equals to <code>visualMap.min</code> (if any) will be mapped to lightness <code>0.8</code>, and the dataValue that equals to <code>visualMap.max</code> (if any) will be mapped to lightness <code>0.2</code>, and other dataValues will be mapped by the linear calculateion based on the domain of <code>[visualMap.min, visualMap.max]</code> and the range of <code>[0.8, 0.2]</code>.</p>\n</li>\n<li><p>For visual channel <code>color</code>, array is used, like: <code>[&#39;#333&#39;, &#39;#78ab23&#39;, &#39;blue&#39;]</code>, which means a color ribbon is formed based on the three color stops, and dataValues will be mapped to the ribbon. Specifically, the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;#333&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;blue&#39;</code>, and other dataValues will be piecewisely interpolated to get the final color.</p>\n</li>\n<li><p>For visual channel <code>symbol</code>, array is used, like: <code>[&#39;circle&#39;, &#39;rect&#39;, &#39;diamond&#39;]</code>, where the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;circle&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;diamond&#39;</code>, and other dataValues will be caculated based on the numerical distance to <code>visualMax.min</code> and to <code>visualMap.max</code>, and mapped onto one of <code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;diamond&#39;</code>.</p>\n</li>\n</ul>\n<p>About the possible value range of visual value:</p>\n<ul>\n<li><p><code>opacity</code>、<code>colorAlpha</code>、<code>colorLightness</code>、<code>colorSaturation</code>，<code>visual value</code></p>\n<p>  possible value range is <code>[0, 1]</code>。</p>\n</li>\n<li><p><code>colorHue</code></p>\n<p>  possible value range is <code>[0, 360]</code>。</p>\n</li>\n<li><p><code>color</code>：</p>\n<p>  color can use RGB expression, like <code>&#39;rgb(128, 128, 128)&#39;</code>, or RGBA expression, like <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, or Hex expression, like &#39;#ccc&#39;.</p>\n</li>\n<li><p><code>symbol</code>：</p>\n</li>\n</ul>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n<p><br></p>\n<hr>\n<p><strong>✦ Table Mapping to visual channel ✦</strong></p>\n<p><code>Table Mapping</code> could be used when dataValue (values in series.data, specified by <a href=\"#visualMap.dimension\">visualMap.dimension</a>) is enumerable and we intend to map them to visual value by looking up a given table.</p>\n<p>For instance, in a <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> component, <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is set to <code>[&#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. And there is series.data: <code>[&#39;Demon Hunter&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. Then we can establish the lookup rule for color: <code>color: {&#39;Warden&#39;: &#39;red&#39;, &#39;Demon Hunter&#39;: &#39;black&#39;}</code>, by which the <code>visualMap</code> component will map <code>dataValue</code> to <code>color</code>.</p>\n<p>How to configure <code>visualMap</code> component to do <code>Table Mapping</code>?</p>\n<p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a>is set.</p>\n<p>About the value of visual channel (visual value):</p>\n<p>Generally <code>Object</code> or <code>Array</code> is used, for instance:</p>\n<pre><code class=\"lang-javascript\">visualMap: {\n    type: &#39;piecewise&#39;,\n    // categories defines the items that to be displayed in visualMap-piecewise component.\n    categories: [\n        &#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;\n    ],\n    inRange: {\n        // visual value can be an Object：\n        color: {\n            &#39;Warden&#39;: &#39;red&#39;,\n            &#39;Demon Hunter&#39;: &#39;black&#39;,\n            &#39;&#39;: &#39;green&#39; // Blank string means that except &#39;Warden&#39; and &#39;Demon Hunter&#39;,\n                        // all other dataValues should be mapped to &#39;green&#39;.\n        }\n        // visual value can also be a single value,\n        // means that all dataValues should be mapped to the value.\n        color: &#39;green&#39;,\n        // visual value can also be a array, with the same length\n        // as the array of categories and one-one mapping onto it.\n        color: [&#39;red&#39;, &#39;black&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;white&#39;]\n    }\n}\n</code></pre>\n<p><a href=\"doc-example/scatter-visualMap-categories&amp;edit=1&amp;reset=1\" target=\"_blank\">Example</a></p>\n<hr>\n<p><strong>✦ How to modity configurations of vsiual encoding? ✦</strong></p>\n<p>If you want to modify the configurations of visual encoding after chart been rendered (by invoke <code>setOption</code> to set the initial <code>option</code>), <code>setOption</code> can be used again to modify configurations of visual encoding. For instance:</p>\n<pre><code class=\"lang-javascript\">chart.setOption({\n    visualMap: {\n        inRange: {color: [&#39;red&#39;, &#39;blue&#39;]}\n    }\n});\n</code></pre>\n<p>Notice:</p>\n<ul>\n<li><p>These visualMap properties (i.e. <code>inRange</code>, <code>outOfRange</code>, <code>target</code>, <code>controller</code>) do not support &quot;merge&quot;, that is, anyone among them is modified when use <code>setOption</code> again, all of the original values of them will not be kept but erased. The &quot;merge&quot; brings complication in implemnentation and understanding, whereas &quot;erase all&quot; normalize the practise: once you want to modify some visual values, you should pass all of them to <code>setOption</code>, no matter they are to be changed.</p>\n</li>\n<li><p>This way, <code>getOption() -&gt; modify the gotten option -&gt; setOption(modified option)</code>, is strongly <strong>not recommended</strong>, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">// Not recommended approach, regardless of its correctness:\n\nvar option = chart.getOption(); // Get the entire option.\noption.visualMap.inRange.color = [&#39;red&#39;, &#39;blue&#39;]; // modify color, which is what you want.\n\n// You have to modify those two properties, otherwise you will not get what you want.\noption.visualMap.target.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\noption.visualMap.controller.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\n\nchart.setOption(option); // set the modified option back.\n// You should not use this approach, but use the\n// approach demostrated before this example.\n</code></pre>\n<p><strong>Notice:</strong> There is default color <code>[&#39;#f6efa6&#39;, &#39;#d88273&#39;, &#39;#bf444c&#39;]</code> in <code>inRange</code> if you not set <code>inRange</code>. If you dont want it, set <code>inRange: {color: null}</code> to disable it.</p>\n"
                },
                "outOfRange": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Define visual channels that will mapped from dataValues that are <strong>out of selected range</strong>. (User can interact with visualMap component and make a seleced range by mouse or touch.)</p>\n<p>Possiable visual channels includes:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<p><code>outOfRange</code> could customize visual channels both in series (by <a href=\"#visualMap-continuous.seriesIndex\">visualMap-continuous.seriesIndex</a>) and in <code>visualMap-continuous</code> itself.</p>\n<p>For instance, if a <code>visualMap-continuous</code> component is used on a scatter chart, the mapping approach from data to <code>color</code> (or <code>symbol</code>, <code>size</code>, ...) can be both customized in the scatter chart and <code>visualMap-continuous</code> component itself. See the code as following:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels both in target series and visualMap-continuous component itself:\n        outOfRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [30, 100]\n        }\n    }\n]\n</code></pre>\n<p>If you want to define visual channels for target series and visualMap-continuous component separately, you should do as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels only for target series.\n        target: {\n            outOfRange: {\n                color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n                symbolSize: [60, 200]\n            }\n        },\n        // Define visual channels only for visualMap-continuous component.\n        controller: {\n            outOfRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p>Or define as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels for both target series and visualMap-continuous component.\n        outOfRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [60, 200]\n        },\n        // Define visual channels only for visualMap-continuous component, which\n        // will overlap the properties with the same name in the above common\n        // definition. (symbolSize is overlapped by [30, 100] while color\n        // keeps the original value)\n        controller: {\n            outOfRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p><br></p>\n<hr>\n<p><strong>✦ About visual channels ✦</strong></p>\n<ul>\n<li><p>Various visual channels (such as <code>color</code>、<code>symbolSize</code> and ect.) can be defined in outOfRange at the same time and all of them will be apopted.</p>\n</li>\n<li><p>Basically visual channels <code>opacity</code> is recommended, rather than <code>colorAlpha</code>. The former controls the transparency of both graphical element and its attachments (like label), whereas the latter only controls the transparency of graphical element.</p>\n</li>\n<li><p>There are two approaches of visual mapping supported: &#39;Linear Mapping&#39; and &#39;Table Mapping&#39;.</p>\n</li>\n</ul>\n<p><br></p>\n<hr>\n<p><strong>✦ Linear Mapping to visual channel ✦</strong></p>\n<p><code>Linear Mapping</code> means that linear calculation will be performed on each dataValue (value of series.data), mapping them from the domain of <code>[visaulMap.min, visualMap.max]</code> to a given range of <code>[visual value 1, visual value 2]</code> and obtaining a final value (say visual value) for visual channel rendering.</p>\n<p>For instance, <code>[visualMap.min, visualMap.max]</code> is set to be <code>[0, 100]</code>, and there is series.data: <code>[50, 10, 100]</code>. We intend to map them to an <code>opacity</code> range <code>[0.4, 1]</code>, by which the size of value can be demostrated by the transparency of graphical elements. visualMap component will then linear calculate them and get opacity values <code>[0.7, 0.44, 1]</code>, cooresponding to each dataValue.</p>\n<p>We can also set the visual range inversely, such as <code>opacity: [1, 0.4]</code>, and the final mapping result for the given series.data above will be <code>[0.7, 0.96, 0.4]</code>.</p>\n<p>Notice: [visualMap.min, visualMap.max] should be set manually and is [0, 100] by defualt, but not <code>dataMin</code> and <code>dataMax</code> in series.data。</p>\n<p>How to configure visualMap component to do Linear Mapping?</p>\n<ul>\n<li><p>When use <a href=\"#visualMap-continuous\">visualMap-continuous</a>, or</p>\n</li>\n<li><p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is not used.</p>\n</li>\n</ul>\n<p>About the value of visual channel (visual value):</p>\n<ul>\n<li><p>Basically <code>Array</code> is used to express the range of visual value, e.g., <code>color: [&#39;#333&#39;, &#39;#777&#39;]</code>.</p>\n</li>\n<li><p>Single <code>number</code> or single <code>string</code> can also be used, which will be converted to an <code>Array</code> by visualMap component. e.g.:  <code>opacity: 0.4</code> will be converted to <code>opacity: [0.4, 0.4]</code>, <code>color: &#39;#333&#39;</code> will be converted to <code>color: [&#39;#333&#39;, &#39;#333&#39;]</code>.</p>\n</li>\n<li><p>For visual channel <code>symbolSize</code>, <code>opacity</code>, <code>colorAlpha</code>, <code>colorLightness</code>, <code>colorSaturation</code>, <code>colorHue</code>, the range of visual value is always in the form of: <code>[visual value of visualMap.min, visual value of visualMap.max]</code>. For example, <code>colorLightness: [0.8, 0.2]</code> means that the dataValue in series.data that equals to <code>visualMap.min</code> (if any) will be mapped to lightness <code>0.8</code>, and the dataValue that equals to <code>visualMap.max</code> (if any) will be mapped to lightness <code>0.2</code>, and other dataValues will be mapped by the linear calculateion based on the domain of <code>[visualMap.min, visualMap.max]</code> and the range of <code>[0.8, 0.2]</code>.</p>\n</li>\n<li><p>For visual channel <code>color</code>, array is used, like: <code>[&#39;#333&#39;, &#39;#78ab23&#39;, &#39;blue&#39;]</code>, which means a color ribbon is formed based on the three color stops, and dataValues will be mapped to the ribbon. Specifically, the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;#333&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;blue&#39;</code>, and other dataValues will be piecewisely interpolated to get the final color.</p>\n</li>\n<li><p>For visual channel <code>symbol</code>, array is used, like: <code>[&#39;circle&#39;, &#39;rect&#39;, &#39;diamond&#39;]</code>, where the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;circle&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;diamond&#39;</code>, and other dataValues will be caculated based on the numerical distance to <code>visualMax.min</code> and to <code>visualMap.max</code>, and mapped onto one of <code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;diamond&#39;</code>.</p>\n</li>\n</ul>\n<p>About the possible value range of visual value:</p>\n<ul>\n<li><p><code>opacity</code>、<code>colorAlpha</code>、<code>colorLightness</code>、<code>colorSaturation</code>，<code>visual value</code></p>\n<p>  possible value range is <code>[0, 1]</code>。</p>\n</li>\n<li><p><code>colorHue</code></p>\n<p>  possible value range is <code>[0, 360]</code>。</p>\n</li>\n<li><p><code>color</code>：</p>\n<p>  color can use RGB expression, like <code>&#39;rgb(128, 128, 128)&#39;</code>, or RGBA expression, like <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, or Hex expression, like &#39;#ccc&#39;.</p>\n</li>\n<li><p><code>symbol</code>：</p>\n</li>\n</ul>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n<p><br></p>\n<hr>\n<p><strong>✦ Table Mapping to visual channel ✦</strong></p>\n<p><code>Table Mapping</code> could be used when dataValue (values in series.data, specified by <a href=\"#visualMap.dimension\">visualMap.dimension</a>) is enumerable and we intend to map them to visual value by looking up a given table.</p>\n<p>For instance, in a <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> component, <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is set to <code>[&#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. And there is series.data: <code>[&#39;Demon Hunter&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. Then we can establish the lookup rule for color: <code>color: {&#39;Warden&#39;: &#39;red&#39;, &#39;Demon Hunter&#39;: &#39;black&#39;}</code>, by which the <code>visualMap</code> component will map <code>dataValue</code> to <code>color</code>.</p>\n<p>How to configure <code>visualMap</code> component to do <code>Table Mapping</code>?</p>\n<p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a>is set.</p>\n<p>About the value of visual channel (visual value):</p>\n<p>Generally <code>Object</code> or <code>Array</code> is used, for instance:</p>\n<pre><code class=\"lang-javascript\">visualMap: {\n    type: &#39;piecewise&#39;,\n    // categories defines the items that to be displayed in visualMap-piecewise component.\n    categories: [\n        &#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;\n    ],\n    outOfRange: {\n        // visual value can be an Object：\n        color: {\n            &#39;Warden&#39;: &#39;red&#39;,\n            &#39;Demon Hunter&#39;: &#39;black&#39;,\n            &#39;&#39;: &#39;green&#39; // Blank string means that except &#39;Warden&#39; and &#39;Demon Hunter&#39;,\n                        // all other dataValues should be mapped to &#39;green&#39;.\n        }\n        // visual value can also be a single value,\n        // means that all dataValues should be mapped to the value.\n        color: &#39;green&#39;,\n        // visual value can also be a array, with the same length\n        // as the array of categories and one-one mapping onto it.\n        color: [&#39;red&#39;, &#39;black&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;white&#39;]\n    }\n}\n</code></pre>\n<p><a href=\"doc-example/scatter-visualMap-categories&amp;edit=1&amp;reset=1\" target=\"_blank\">Example</a></p>\n<hr>\n<p><strong>✦ How to modity configurations of vsiual encoding? ✦</strong></p>\n<p>If you want to modify the configurations of visual encoding after chart been rendered (by invoke <code>setOption</code> to set the initial <code>option</code>), <code>setOption</code> can be used again to modify configurations of visual encoding. For instance:</p>\n<pre><code class=\"lang-javascript\">chart.setOption({\n    visualMap: {\n        inRange: {color: [&#39;red&#39;, &#39;blue&#39;]}\n    }\n});\n</code></pre>\n<p>Notice:</p>\n<ul>\n<li><p>These visualMap properties (i.e. <code>inRange</code>, <code>outOfRange</code>, <code>target</code>, <code>controller</code>) do not support &quot;merge&quot;, that is, anyone among them is modified when use <code>setOption</code> again, all of the original values of them will not be kept but erased. The &quot;merge&quot; brings complication in implemnentation and understanding, whereas &quot;erase all&quot; normalize the practise: once you want to modify some visual values, you should pass all of them to <code>setOption</code>, no matter they are to be changed.</p>\n</li>\n<li><p>This way, <code>getOption() -&gt; modify the gotten option -&gt; setOption(modified option)</code>, is strongly <strong>not recommended</strong>, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">// Not recommended approach, regardless of its correctness:\n\nvar option = chart.getOption(); // Get the entire option.\noption.visualMap.inRange.color = [&#39;red&#39;, &#39;blue&#39;]; // modify color, which is what you want.\n\n// You have to modify those two properties, otherwise you will not get what you want.\noption.visualMap.target.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\noption.visualMap.controller.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\n\nchart.setOption(option); // set the modified option back.\n// You should not use this approach, but use the\n// approach demostrated before this example.\n</code></pre>\n"
                },
                "controller": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Property <code>inRange</code> and <code>outOfRange</code> can be set within property <code>controller</code>, which means those <code>inRange</code> and <code>outOfRange</code> are only used on the controller (<code>visualMap</code> component itself), but are not used on chart (series). This property is useful in some scenario that the view of controller need to be customized in detail.</p>\n",
                  "properties": {
                    "inRange": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Define visual channels that will mapped from dataValues that are <strong>in selected range</strong>. (User can interact with visualMap component and make a seleced range by mouse or touch.)</p>\n<p>Possiable visual channels includes:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<hr>\n<p><code>inRange</code> could customize visual channels both in series (by <a href=\"#visualMap-continuous.seriesIndex\">visualMap-continuous.seriesIndex</a>) and in <code>visualMap-continuous</code> itself.</p>\n<p>For instance, if a <code>visualMap-continuous</code> component is used on a scatter chart, the mapping approach from data to <code>color</code> (or <code>symbol</code>, <code>size</code>, ...) can be both customized in the scatter chart and <code>visualMap-continuous</code> component itself. See the code as following:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels both in target series and visualMap-continuous component itself:\n        inRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [30, 100]\n        }\n    }\n]\n</code></pre>\n<p>If you want to define visual channels for target series and visualMap-continuous component separately, you should do as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels only for target series.\n        target: {\n            inRange: {\n                color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n                symbolSize: [60, 200]\n            }\n        },\n        // Define visual channels only for visualMap-continuous component.\n        controller: {\n            inRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p>Or define as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels for both target series and visualMap-continuous component.\n        inRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [60, 200]\n        },\n        // Define visual channels only for visualMap-continuous component, which\n        // will overlap the properties with the same name in the above common\n        // definition. (symbolSize is overlapped by [30, 100] while color\n        // keeps the original value)\n        controller: {\n            inRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p><br></p>\n<hr>\n<p><strong>✦ About visual channels ✦</strong></p>\n<ul>\n<li><p>Various visual channels (such as <code>color</code>、<code>symbolSize</code> and ect.) can be defined in inRange at the same time and all of them will be apopted.</p>\n</li>\n<li><p>Basically visual channels <code>opacity</code> is recommended, rather than <code>colorAlpha</code>. The former controls the transparency of both graphical element and its attachments (like label), whereas the latter only controls the transparency of graphical element.</p>\n</li>\n<li><p>There are two approaches of visual mapping supported: &#39;Linear Mapping&#39; and &#39;Table Mapping&#39;.</p>\n</li>\n</ul>\n<p><br></p>\n<hr>\n<p><strong>✦ Linear Mapping to visual channel ✦</strong></p>\n<p><code>Linear Mapping</code> means that linear calculation will be performed on each dataValue (value of series.data), mapping them from the domain of <code>[visaulMap.min, visualMap.max]</code> to a given range of <code>[visual value 1, visual value 2]</code> and obtaining a final value (say visual value) for visual channel rendering.</p>\n<p>For instance, <code>[visualMap.min, visualMap.max]</code> is set to be <code>[0, 100]</code>, and there is series.data: <code>[50, 10, 100]</code>. We intend to map them to an <code>opacity</code> range <code>[0.4, 1]</code>, by which the size of value can be demostrated by the transparency of graphical elements. visualMap component will then linear calculate them and get opacity values <code>[0.7, 0.44, 1]</code>, cooresponding to each dataValue.</p>\n<p>We can also set the visual range inversely, such as <code>opacity: [1, 0.4]</code>, and the final mapping result for the given series.data above will be <code>[0.7, 0.96, 0.4]</code>.</p>\n<p>Notice: [visualMap.min, visualMap.max] should be set manually and is [0, 100] by defualt, but not <code>dataMin</code> and <code>dataMax</code> in series.data。</p>\n<p>How to configure visualMap component to do Linear Mapping?</p>\n<ul>\n<li><p>When use <a href=\"#visualMap-continuous\">visualMap-continuous</a>, or</p>\n</li>\n<li><p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is not used.</p>\n</li>\n</ul>\n<p>About the value of visual channel (visual value):</p>\n<ul>\n<li><p>Basically <code>Array</code> is used to express the range of visual value, e.g., <code>color: [&#39;#333&#39;, &#39;#777&#39;]</code>.</p>\n</li>\n<li><p>Single <code>number</code> or single <code>string</code> can also be used, which will be converted to an <code>Array</code> by visualMap component. e.g.:  <code>opacity: 0.4</code> will be converted to <code>opacity: [0.4, 0.4]</code>, <code>color: &#39;#333&#39;</code> will be converted to <code>color: [&#39;#333&#39;, &#39;#333&#39;]</code>.</p>\n</li>\n<li><p>For visual channel <code>symbolSize</code>, <code>opacity</code>, <code>colorAlpha</code>, <code>colorLightness</code>, <code>colorSaturation</code>, <code>colorHue</code>, the range of visual value is always in the form of: <code>[visual value of visualMap.min, visual value of visualMap.max]</code>. For example, <code>colorLightness: [0.8, 0.2]</code> means that the dataValue in series.data that equals to <code>visualMap.min</code> (if any) will be mapped to lightness <code>0.8</code>, and the dataValue that equals to <code>visualMap.max</code> (if any) will be mapped to lightness <code>0.2</code>, and other dataValues will be mapped by the linear calculateion based on the domain of <code>[visualMap.min, visualMap.max]</code> and the range of <code>[0.8, 0.2]</code>.</p>\n</li>\n<li><p>For visual channel <code>color</code>, array is used, like: <code>[&#39;#333&#39;, &#39;#78ab23&#39;, &#39;blue&#39;]</code>, which means a color ribbon is formed based on the three color stops, and dataValues will be mapped to the ribbon. Specifically, the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;#333&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;blue&#39;</code>, and other dataValues will be piecewisely interpolated to get the final color.</p>\n</li>\n<li><p>For visual channel <code>symbol</code>, array is used, like: <code>[&#39;circle&#39;, &#39;rect&#39;, &#39;diamond&#39;]</code>, where the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;circle&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;diamond&#39;</code>, and other dataValues will be caculated based on the numerical distance to <code>visualMax.min</code> and to <code>visualMap.max</code>, and mapped onto one of <code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;diamond&#39;</code>.</p>\n</li>\n</ul>\n<p>About the possible value range of visual value:</p>\n<ul>\n<li><p><code>opacity</code>、<code>colorAlpha</code>、<code>colorLightness</code>、<code>colorSaturation</code>，<code>visual value</code></p>\n<p>  possible value range is <code>[0, 1]</code>。</p>\n</li>\n<li><p><code>colorHue</code></p>\n<p>  possible value range is <code>[0, 360]</code>。</p>\n</li>\n<li><p><code>color</code>：</p>\n<p>  color can use RGB expression, like <code>&#39;rgb(128, 128, 128)&#39;</code>, or RGBA expression, like <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, or Hex expression, like &#39;#ccc&#39;.</p>\n</li>\n<li><p><code>symbol</code>：</p>\n</li>\n</ul>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n<p><br></p>\n<hr>\n<p><strong>✦ Table Mapping to visual channel ✦</strong></p>\n<p><code>Table Mapping</code> could be used when dataValue (values in series.data, specified by <a href=\"#visualMap.dimension\">visualMap.dimension</a>) is enumerable and we intend to map them to visual value by looking up a given table.</p>\n<p>For instance, in a <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> component, <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is set to <code>[&#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. And there is series.data: <code>[&#39;Demon Hunter&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. Then we can establish the lookup rule for color: <code>color: {&#39;Warden&#39;: &#39;red&#39;, &#39;Demon Hunter&#39;: &#39;black&#39;}</code>, by which the <code>visualMap</code> component will map <code>dataValue</code> to <code>color</code>.</p>\n<p>How to configure <code>visualMap</code> component to do <code>Table Mapping</code>?</p>\n<p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a>is set.</p>\n<p>About the value of visual channel (visual value):</p>\n<p>Generally <code>Object</code> or <code>Array</code> is used, for instance:</p>\n<pre><code class=\"lang-javascript\">visualMap: {\n    type: &#39;piecewise&#39;,\n    // categories defines the items that to be displayed in visualMap-piecewise component.\n    categories: [\n        &#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;\n    ],\n    inRange: {\n        // visual value can be an Object：\n        color: {\n            &#39;Warden&#39;: &#39;red&#39;,\n            &#39;Demon Hunter&#39;: &#39;black&#39;,\n            &#39;&#39;: &#39;green&#39; // Blank string means that except &#39;Warden&#39; and &#39;Demon Hunter&#39;,\n                        // all other dataValues should be mapped to &#39;green&#39;.\n        }\n        // visual value can also be a single value,\n        // means that all dataValues should be mapped to the value.\n        color: &#39;green&#39;,\n        // visual value can also be a array, with the same length\n        // as the array of categories and one-one mapping onto it.\n        color: [&#39;red&#39;, &#39;black&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;white&#39;]\n    }\n}\n</code></pre>\n<p><a href=\"doc-example/scatter-visualMap-categories&amp;edit=1&amp;reset=1\" target=\"_blank\">Example</a></p>\n<hr>\n<p><strong>✦ How to modity configurations of vsiual encoding? ✦</strong></p>\n<p>If you want to modify the configurations of visual encoding after chart been rendered (by invoke <code>setOption</code> to set the initial <code>option</code>), <code>setOption</code> can be used again to modify configurations of visual encoding. For instance:</p>\n<pre><code class=\"lang-javascript\">chart.setOption({\n    visualMap: {\n        inRange: {color: [&#39;red&#39;, &#39;blue&#39;]}\n    }\n});\n</code></pre>\n<p>Notice:</p>\n<ul>\n<li><p>These visualMap properties (i.e. <code>inRange</code>, <code>outOfRange</code>, <code>target</code>, <code>controller</code>) do not support &quot;merge&quot;, that is, anyone among them is modified when use <code>setOption</code> again, all of the original values of them will not be kept but erased. The &quot;merge&quot; brings complication in implemnentation and understanding, whereas &quot;erase all&quot; normalize the practise: once you want to modify some visual values, you should pass all of them to <code>setOption</code>, no matter they are to be changed.</p>\n</li>\n<li><p>This way, <code>getOption() -&gt; modify the gotten option -&gt; setOption(modified option)</code>, is strongly <strong>not recommended</strong>, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">// Not recommended approach, regardless of its correctness:\n\nvar option = chart.getOption(); // Get the entire option.\noption.visualMap.inRange.color = [&#39;red&#39;, &#39;blue&#39;]; // modify color, which is what you want.\n\n// You have to modify those two properties, otherwise you will not get what you want.\noption.visualMap.target.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\noption.visualMap.controller.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\n\nchart.setOption(option); // set the modified option back.\n// You should not use this approach, but use the\n// approach demostrated before this example.\n</code></pre>\n<p><strong>Notice:</strong> There is default color <code>[&#39;#f6efa6&#39;, &#39;#d88273&#39;, &#39;#bf444c&#39;]</code> in <code>inRange</code> if you not set <code>inRange</code>. If you dont want it, set <code>inRange: {color: null}</code> to disable it.</p>\n"
                    },
                    "outOfRange": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Define visual channels that will mapped from dataValues that are <strong>out of selected range</strong>. (User can interact with visualMap component and make a seleced range by mouse or touch.)</p>\n<p>Possiable visual channels includes:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<p><code>outOfRange</code> could customize visual channels both in series (by <a href=\"#visualMap-continuous.seriesIndex\">visualMap-continuous.seriesIndex</a>) and in <code>visualMap-continuous</code> itself.</p>\n<p>For instance, if a <code>visualMap-continuous</code> component is used on a scatter chart, the mapping approach from data to <code>color</code> (or <code>symbol</code>, <code>size</code>, ...) can be both customized in the scatter chart and <code>visualMap-continuous</code> component itself. See the code as following:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels both in target series and visualMap-continuous component itself:\n        outOfRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [30, 100]\n        }\n    }\n]\n</code></pre>\n<p>If you want to define visual channels for target series and visualMap-continuous component separately, you should do as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels only for target series.\n        target: {\n            outOfRange: {\n                color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n                symbolSize: [60, 200]\n            }\n        },\n        // Define visual channels only for visualMap-continuous component.\n        controller: {\n            outOfRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p>Or define as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels for both target series and visualMap-continuous component.\n        outOfRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [60, 200]\n        },\n        // Define visual channels only for visualMap-continuous component, which\n        // will overlap the properties with the same name in the above common\n        // definition. (symbolSize is overlapped by [30, 100] while color\n        // keeps the original value)\n        controller: {\n            outOfRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p><br></p>\n<hr>\n<p><strong>✦ About visual channels ✦</strong></p>\n<ul>\n<li><p>Various visual channels (such as <code>color</code>、<code>symbolSize</code> and ect.) can be defined in outOfRange at the same time and all of them will be apopted.</p>\n</li>\n<li><p>Basically visual channels <code>opacity</code> is recommended, rather than <code>colorAlpha</code>. The former controls the transparency of both graphical element and its attachments (like label), whereas the latter only controls the transparency of graphical element.</p>\n</li>\n<li><p>There are two approaches of visual mapping supported: &#39;Linear Mapping&#39; and &#39;Table Mapping&#39;.</p>\n</li>\n</ul>\n<p><br></p>\n<hr>\n<p><strong>✦ Linear Mapping to visual channel ✦</strong></p>\n<p><code>Linear Mapping</code> means that linear calculation will be performed on each dataValue (value of series.data), mapping them from the domain of <code>[visaulMap.min, visualMap.max]</code> to a given range of <code>[visual value 1, visual value 2]</code> and obtaining a final value (say visual value) for visual channel rendering.</p>\n<p>For instance, <code>[visualMap.min, visualMap.max]</code> is set to be <code>[0, 100]</code>, and there is series.data: <code>[50, 10, 100]</code>. We intend to map them to an <code>opacity</code> range <code>[0.4, 1]</code>, by which the size of value can be demostrated by the transparency of graphical elements. visualMap component will then linear calculate them and get opacity values <code>[0.7, 0.44, 1]</code>, cooresponding to each dataValue.</p>\n<p>We can also set the visual range inversely, such as <code>opacity: [1, 0.4]</code>, and the final mapping result for the given series.data above will be <code>[0.7, 0.96, 0.4]</code>.</p>\n<p>Notice: [visualMap.min, visualMap.max] should be set manually and is [0, 100] by defualt, but not <code>dataMin</code> and <code>dataMax</code> in series.data。</p>\n<p>How to configure visualMap component to do Linear Mapping?</p>\n<ul>\n<li><p>When use <a href=\"#visualMap-continuous\">visualMap-continuous</a>, or</p>\n</li>\n<li><p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is not used.</p>\n</li>\n</ul>\n<p>About the value of visual channel (visual value):</p>\n<ul>\n<li><p>Basically <code>Array</code> is used to express the range of visual value, e.g., <code>color: [&#39;#333&#39;, &#39;#777&#39;]</code>.</p>\n</li>\n<li><p>Single <code>number</code> or single <code>string</code> can also be used, which will be converted to an <code>Array</code> by visualMap component. e.g.:  <code>opacity: 0.4</code> will be converted to <code>opacity: [0.4, 0.4]</code>, <code>color: &#39;#333&#39;</code> will be converted to <code>color: [&#39;#333&#39;, &#39;#333&#39;]</code>.</p>\n</li>\n<li><p>For visual channel <code>symbolSize</code>, <code>opacity</code>, <code>colorAlpha</code>, <code>colorLightness</code>, <code>colorSaturation</code>, <code>colorHue</code>, the range of visual value is always in the form of: <code>[visual value of visualMap.min, visual value of visualMap.max]</code>. For example, <code>colorLightness: [0.8, 0.2]</code> means that the dataValue in series.data that equals to <code>visualMap.min</code> (if any) will be mapped to lightness <code>0.8</code>, and the dataValue that equals to <code>visualMap.max</code> (if any) will be mapped to lightness <code>0.2</code>, and other dataValues will be mapped by the linear calculateion based on the domain of <code>[visualMap.min, visualMap.max]</code> and the range of <code>[0.8, 0.2]</code>.</p>\n</li>\n<li><p>For visual channel <code>color</code>, array is used, like: <code>[&#39;#333&#39;, &#39;#78ab23&#39;, &#39;blue&#39;]</code>, which means a color ribbon is formed based on the three color stops, and dataValues will be mapped to the ribbon. Specifically, the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;#333&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;blue&#39;</code>, and other dataValues will be piecewisely interpolated to get the final color.</p>\n</li>\n<li><p>For visual channel <code>symbol</code>, array is used, like: <code>[&#39;circle&#39;, &#39;rect&#39;, &#39;diamond&#39;]</code>, where the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;circle&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;diamond&#39;</code>, and other dataValues will be caculated based on the numerical distance to <code>visualMax.min</code> and to <code>visualMap.max</code>, and mapped onto one of <code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;diamond&#39;</code>.</p>\n</li>\n</ul>\n<p>About the possible value range of visual value:</p>\n<ul>\n<li><p><code>opacity</code>、<code>colorAlpha</code>、<code>colorLightness</code>、<code>colorSaturation</code>，<code>visual value</code></p>\n<p>  possible value range is <code>[0, 1]</code>。</p>\n</li>\n<li><p><code>colorHue</code></p>\n<p>  possible value range is <code>[0, 360]</code>。</p>\n</li>\n<li><p><code>color</code>：</p>\n<p>  color can use RGB expression, like <code>&#39;rgb(128, 128, 128)&#39;</code>, or RGBA expression, like <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, or Hex expression, like &#39;#ccc&#39;.</p>\n</li>\n<li><p><code>symbol</code>：</p>\n</li>\n</ul>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n<p><br></p>\n<hr>\n<p><strong>✦ Table Mapping to visual channel ✦</strong></p>\n<p><code>Table Mapping</code> could be used when dataValue (values in series.data, specified by <a href=\"#visualMap.dimension\">visualMap.dimension</a>) is enumerable and we intend to map them to visual value by looking up a given table.</p>\n<p>For instance, in a <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> component, <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is set to <code>[&#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. And there is series.data: <code>[&#39;Demon Hunter&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. Then we can establish the lookup rule for color: <code>color: {&#39;Warden&#39;: &#39;red&#39;, &#39;Demon Hunter&#39;: &#39;black&#39;}</code>, by which the <code>visualMap</code> component will map <code>dataValue</code> to <code>color</code>.</p>\n<p>How to configure <code>visualMap</code> component to do <code>Table Mapping</code>?</p>\n<p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a>is set.</p>\n<p>About the value of visual channel (visual value):</p>\n<p>Generally <code>Object</code> or <code>Array</code> is used, for instance:</p>\n<pre><code class=\"lang-javascript\">visualMap: {\n    type: &#39;piecewise&#39;,\n    // categories defines the items that to be displayed in visualMap-piecewise component.\n    categories: [\n        &#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;\n    ],\n    outOfRange: {\n        // visual value can be an Object：\n        color: {\n            &#39;Warden&#39;: &#39;red&#39;,\n            &#39;Demon Hunter&#39;: &#39;black&#39;,\n            &#39;&#39;: &#39;green&#39; // Blank string means that except &#39;Warden&#39; and &#39;Demon Hunter&#39;,\n                        // all other dataValues should be mapped to &#39;green&#39;.\n        }\n        // visual value can also be a single value,\n        // means that all dataValues should be mapped to the value.\n        color: &#39;green&#39;,\n        // visual value can also be a array, with the same length\n        // as the array of categories and one-one mapping onto it.\n        color: [&#39;red&#39;, &#39;black&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;white&#39;]\n    }\n}\n</code></pre>\n<p><a href=\"doc-example/scatter-visualMap-categories&amp;edit=1&amp;reset=1\" target=\"_blank\">Example</a></p>\n<hr>\n<p><strong>✦ How to modity configurations of vsiual encoding? ✦</strong></p>\n<p>If you want to modify the configurations of visual encoding after chart been rendered (by invoke <code>setOption</code> to set the initial <code>option</code>), <code>setOption</code> can be used again to modify configurations of visual encoding. For instance:</p>\n<pre><code class=\"lang-javascript\">chart.setOption({\n    visualMap: {\n        inRange: {color: [&#39;red&#39;, &#39;blue&#39;]}\n    }\n});\n</code></pre>\n<p>Notice:</p>\n<ul>\n<li><p>These visualMap properties (i.e. <code>inRange</code>, <code>outOfRange</code>, <code>target</code>, <code>controller</code>) do not support &quot;merge&quot;, that is, anyone among them is modified when use <code>setOption</code> again, all of the original values of them will not be kept but erased. The &quot;merge&quot; brings complication in implemnentation and understanding, whereas &quot;erase all&quot; normalize the practise: once you want to modify some visual values, you should pass all of them to <code>setOption</code>, no matter they are to be changed.</p>\n</li>\n<li><p>This way, <code>getOption() -&gt; modify the gotten option -&gt; setOption(modified option)</code>, is strongly <strong>not recommended</strong>, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">// Not recommended approach, regardless of its correctness:\n\nvar option = chart.getOption(); // Get the entire option.\noption.visualMap.inRange.color = [&#39;red&#39;, &#39;blue&#39;]; // modify color, which is what you want.\n\n// You have to modify those two properties, otherwise you will not get what you want.\noption.visualMap.target.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\noption.visualMap.controller.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\n\nchart.setOption(option); // set the modified option back.\n// You should not use this approach, but use the\n// approach demostrated before this example.\n</code></pre>\n"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 4
                },
                "left": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>visualMap  distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": 0
                },
                "top": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>visualMap  distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "auto"
                },
                "right": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>visualMap  distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
                  "default": "auto"
                },
                "bottom": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>visualMap  distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
                  "default": 0
                },
                "orient": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>How to layout the visualMap component, <code>&#39;horizontal&#39;</code> or <code>&#39;vertical&#39;</code>.</p>\n",
                  "default": "'vertical'"
                },
                "padding": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>visualMap-continuous internal margin, unit as px,set internal margin of each directions to 5 by default, set the internal margin of four directions of accepting array.</p>\n<p>Examples: </p>\n<pre><code class=\"lang-js\">// Set internal margin to 5\npadding: 5\n// Set the upper and lower margins to 5, left and right margins to 10\npadding: [5, 10]\n// Set each of the four margins as the followings\npadding: [\n    5,  // up\n    10, // right\n    5,  // down\n    10, // left\n]\n</code></pre>\n",
                  "default": 5
                },
                "backgroundColor": {
                  "type": [
                    "Color"
                  ],
                  "descriptionCN": "<p>background color of visualMap component.</p>\n",
                  "default": "'rgba(0,0,0,0)'"
                },
                "borderColor": {
                  "type": [
                    "Color"
                  ],
                  "descriptionCN": "<p>border color of visualMap component.</p>\n",
                  "default": "'#ccc'"
                },
                "borderWidth": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>border width of visualMap component, with unit: px.</p>\n",
                  "default": 0
                },
                "color": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>This property is remained only for compatibility with ECharts2, and is not recommended in ECharts3. It is recommended to configure color in <a href=\"#visualMap-continuous.inRange\">visualMap-continuous.inRange</a>, or <a href=\"#visualMap-continuous.outOfRange\">visualMap-continuous.outOfRange</a> if needed.</p>\n<p>If you persist in using it, the following issue should be noticed: the sequence of dataValues that are mapped to colorValues in property <code>color</code> is from <code>large</code> to <code>small</code>, whereas that in <a href=\"#visualMap-continuous.inRange\">visualMap-continuous.inRange</a> or <a href=\"#visualMap-continuous.outOfRange\">visualMap-continuous.outOfRange</a> is from <code>small</code> to <code>large</code>.</p>\n",
                  "default": "['#bf444c', '#d88273', '#f6efa6']"
                },
                "textStyle\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "",
                  "properties": {
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>visualMap text color.</p>\n",
                      "default": "#333"
                    },
                    "fontStyle": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>visualMap Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                      "default": "'normal'"
                    },
                    "fontWeight": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>visualMap Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                      "default": "normal"
                    },
                    "fontFamily": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>visualMap Font series</p>\n",
                      "default": "'sans-serief'"
                    },
                    "fontSize": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>visualMap Font size</p>\n",
                      "default": 12
                    }
                  }
                },
                "formatter": {
                  "type": [
                    "string",
                    "Function"
                  ],
                  "descriptionCN": "<p>the formatter tool for label.</p>\n<ul>\n<li><p>If it was set as a <code>string</code>, it refers to a template, for instance: <code>aaaa{value}bbbb</code>, where <code>{value}</code> represents the value of the edge of the seleted range.</p>\n</li>\n<li><p>If it was set as a <code>Function</code>, it refers to a callback function, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">formatter: function (value) {\n    return &#39;aaaa&#39; + value + &#39;bbbb&#39;;\n}\n</code></pre>\n"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>Piecewise visualMap component (visualMapPiecewise) </strong></p>\n<p> (Reference to <a href=\"#visualMap\">the introduction of visual Map component (visualMap)</a>)</p>\n<p>Sample:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/scatter-visualMap-piecewise&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n<p>Piecewise visualMap component works in one of the three modes:</p>\n<ul>\n<li><strong>CONTINUOUS-AVERAGE</strong>: The series.data is continuous and is divided into pieces averagely according to <a href=\"#visualMap-piecewise.splitNumber\">visualMap-piecewise.splitNumber</a>.</li>\n<li><strong>CONTINUOUS-CUSTOMIZED</strong>: The series.data is continuous and is divided into pieces according to the given rule defined in <a href=\"#visualMap-piecewise.pieces\">visualMap-piecewise.pieces</a>.</li>\n<li><strong>CATEGORY</strong>: The series.data is discrete and is categorized according to <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a>.</li>\n</ul>\n<p><br>\n<br></p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Used to determine it is a piecewise visualMap component.</p>\n",
                  "default": "piecewise"
                },
                "splitNumber": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Continuous data can be divide into pieces averagely according to splitNumber, that is, if splitNumber is 5, data will be sliced into 5 pieces.</p>\n<p>The range of continuous data should be defined by <a href=\"#visualMap-piecewise.max\">max</a> and <a href=\"#visualMap-piecewise.min\">min</a>.</p>\n<p>If <a href=\"#visualMap-piecewise.pieces\">visualMap-piecewise.pieces</a> or <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is set up, the <code>splitNumber</code> will not be used any more.</p>\n",
                  "default": 5
                },
                "pieces": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Used to customize how to slice continuous data, and some specific view style for some pieces. For instance:</p>\n<pre><code class=\"lang-javascript\">pieces: [\n    // Range of a piece can be specified by property min and max,\n    // where min will be set as -Infinity if ignored,\n    // and max will be set as Infinity if ignored.\n    {min: 1500},\n    {min: 900, max: 1500},\n    {min: 310, max: 1000},\n    {min: 200, max: 300},\n    // Label of the piece can be specified.\n    {min: 10, max: 200, label: &#39;10 to 200 (custom label) &#39;},\n    // Color of the piece can be specified.\n    {value: 123, label: &#39;123 (custom special color) &#39;, color: &#39;grey&#39;},\n    {max: 5}\n]\n</code></pre>\n<p>These visual channel can be customized in each piece:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<p><a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/map-visualMap-pieces&amp;edit=1&amp;reset=1\" target=\"_blank\">Sample</a></p>\n<p> (Notes: In ECharts2, <code>pieces</code> is called <code>splitList</code>, which is retained in ECharts3 for compatibility. But <code>pieces</code> is recommended.)</p>\n<p>You would realize the sequence in <code>pieces</code> by a simple trial. See more detailed rules in <a href=\"#visualMap.inverse\">visualMap.inverse</a>.</p>\n"
                },
                "categories": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>When dataValues in series.data (specified by <a href=\"#visualMap-piecewise.dimension\">visualMap-piecewise.dimension</a>) are discrete (or also known as category data or enumerable data), and we intend to perform <strong>Table Mapping</strong> from dataVale to visual channels, <code>categories</code> is used to describe the entire enumeration of data. For instance:</p>\n<pre><code class=\"lang-javascript\">categories: [\n    &#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;\n],\n</code></pre>\n<p><a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/scatter-visualMap-categories&amp;edit=1&amp;reset=1\" target=\"_blank\">Sample</a></p>\n<p>You would realize the sequence in <code>categories</code> by a simple trial. See more detailed rules in <a href=\"#visualMap.inverse\">visualMap.inverse</a>.</p>\n"
                },
                "min": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Specify the min dataValue for the visualMap component. <code>[visualMap.min, visualMax.max]</code> make up the domain of viusul mapping.</p>\n<p>In <strong>CONTINUOUS-CUSTOMIZED</strong> mode (i.e., <a href=\"#visualMap-piecewise.pieces\">visualMap-piecewise.pieces</a> is used) or <strong>CATEGORY</strong> mode (i.e., <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is used), <code>max</code> and <code>min</code> doesn&#39;t need to be specified.</p>\n<p>In <strong>CONTINUOUS-AVERAGE</strong> mode (i.e., <a href=\"#visualMap-piecewise.splitNumber\">visualMap-piecewise.splitNumber</a> is used), they should be specified explicitly, and be <code>[0, 200]</code> by default, but not <code>dataMin</code> and <code>dataMax</code> in series.data.</p>\n"
                },
                "max": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Specify the max dataValue for the visualMap component. <code>[visualMap.min, visualMax.max]</code> make up the domain of viusul mapping.</p>\n<p>In <strong>CONTINUOUS-CUSTOMIZED</strong> mode (i.e., <a href=\"#visualMap-piecewise.pieces\">visualMap-piecewise.pieces</a> is used) or <strong>CATEGORY</strong> mode (i.e., <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is used), <code>max</code> and <code>min</code> doesn&#39;t need to be specified.</p>\n<p>In <strong>CONTINUOUS-AVERAGE</strong> mode (i.e., <a href=\"#visualMap-piecewise.splitNumber\">visualMap-piecewise.splitNumber</a> is used), they should be specified explicitly, and be <code>[0, 200]</code> by default, but not <code>dataMin</code> and <code>dataMax</code> in series.data.</p>\n"
                },
                "selectedMode": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Selected Mode could be:</p>\n<ul>\n<li><code>&#39;multiple&#39;</code> (multiple selection).</li>\n<li><code>&#39;single&#39;</code> (single selection).</li>\n</ul>\n",
                  "default": "'multiple'"
                },
                "inverse": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to inverse the layout of visualMap component.</p>\n<ul>\n<li><p>In <strong>CONTINUOUS-AVERAGE</strong> mode (i.e., <a href=\"#visualMap-piecewise.splitNumber\">visualMap-piecewise.splitNumber</a> is used), the rule of data layout is the same as <a href=\"#visualMap-continuous.inverse\">visualMap-continuous.inverse</a>.</p>\n</li>\n<li><p>In <strong>CONTINUOUS-CUSTOMIZED</strong> mode (i.e., <a href=\"#visualMap-piecewise.pieces\">visualMap-piecewise.pieces</a> is used) or <strong>CATEGORY</strong> mode (i.e., <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is used), the layout of each piece is determined by the their order in the definition of <code>pieces</code> or <code>categories</code>, namely:</p>\n<ul>\n<li><p>When <code>inverse</code> is <code>false</code>:</p>\n<ul>\n<li><p>When <a href=\"#visualMap.orient\">visualMap.orient</a> is <code>&#39;vertical&#39;</code>, pieces[0] or categories[0] correspond to upward side.</p>\n</li>\n<li><p>When <a href=\"#visualMap.orient\">visualMap.orient</a> is <code>&#39;horizontal&#39;</code>, pieces[0] or categories[0] correspond to left side.</p>\n</li>\n</ul>\n</li>\n<li><p>When <code>inverse</code> is <code>true</code>, the results are opposite to above.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>If you just have a try, you&#39;ll know it is not so complicated.</p>\n",
                  "default": false
                },
                "precision": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The decimal precision of label, defaults to be 0 (no decimals).</p>\n<ul>\n<li><p>In <strong>CONTINUOUS-AVERAGE</strong> mode (i.e., <a href=\"#visualMap-piecewise.splitNumber\">visualMap-piecewise.splitNumber</a> is used), the rule of data layout is the same as <a href=\"#visualMap-continuous.inverse\">visualMap-continuous.inverse</a>, decimal percision auto adapts to series.data.</p>\n</li>\n<li><p>In <strong>CONTINUOUS-CUSTOMIZED</strong> mode (i.e., <a href=\"#visualMap-piecewise.pieces\">visualMap-piecewise.pieces</a> is used) or <strong>CATEGORY</strong> mode (i.e., <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is used), decimal percision defaults to be 0 (no decimals):</p>\n</li>\n</ul>\n",
                  "default": null
                },
                "itemWidth": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The width of each graphical element that represents a piece.</p>\n",
                  "default": 20
                },
                "itemHeight": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The height of each graphical element that represents a piece.</p>\n",
                  "default": 14
                },
                "align": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The layout relationship between the graphical elements for pieces and their labels. Possible values are:</p>\n<ul>\n<li><code>&#39;auto&#39;</code> Decide automatically.</li>\n<li><code>&#39;left&#39;</code> The graphical elements for pieces are on the left and their labels are on the right.</li>\n<li><code>&#39;right&#39;</code> The graphical elements for pieces are on the right and their labels are on the left.</li>\n</ul>\n",
                  "default": "'auto'"
                },
                "text": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>The label text on both ends, such as <code>[&#39;High&#39;, &#39;Low&#39;]</code>. <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/map-visualMap-piecewise-text&amp;edit=1&amp;reset=1\" target=\"_blank\">Sample</a>.</p>\n<p>You can understand the order of items in <code>text</code> array just by a simple trial. See <a href=\"#visualMap.inverse\">visualMap.inverse</a>.</p>\n<p>The rule, that labels will not show when <code>text</code> is use, is retained for compatibility with ECharts2.</p>\n",
                  "default": null
                },
                "textGap": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>The distance between the ends of the graphical elements for pieces and the labels, with unit px. See <a href=\"#visualMap-piecewise.text\">visualMap-piecewise.text</a></p>\n",
                  "default": 10
                },
                "itemGap = 10\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>Its the distance between each two graphical elements for pieces. The unit is px.</p>\n"
                },
                "itemSymbol": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Default symbol (the shape of graphical element). Possible values are:</p>\n<p><code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>The setting of visual channel <code>symbol</code> can refers to <a href=\"#visualMap-piecewise.inRange\">visualMap-piecewise.inRange</a> and <a href=\"#visualMap-piecewise.outOfRange\">visualMap-piecewise.outOfRange</a>.</p>\n<p>When they are not specified, <code>itemSymbol</code> is adopted as the default value (but just used in visualMap component itself, not in chart).</p>\n",
                  "default": "'roundRect'"
                },
                "show": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to show visualMap-piecewise component. If set as <code>false</code>, visualMap-piecewise component will not show, but it can still perform visual mapping from dataValue to visual channel in chart.</p>\n",
                  "default": true
                },
                "dimension": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Specify which dimension should be used to fetch dataValue from <a href=\"#series.data\">series.data</a>, and then map them to visual channel.</p>\n<p><a href=\"#series.data\">series.data</a> can be regarded as a two-dimensional array, for instance:</p>\n<pre><code class=\"lang-javascript\">[\n    [12, 23, 43],\n    [12, 23, 43],\n    [43, 545, 65],\n    [92, 23, 33]\n]\n</code></pre>\n<p>Each column of the above array is regarded as a <code>dimension</code>. For example, when property <code>dimension</code> is set to 1, the second column (i.e., 23, 23, 545, 23) is chosen to perform visual mapping.</p>\n",
                  "default": 0
                },
                "seriesIndex(number|Array.<number>)\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>Specify visual mapping should be performed on which series, from which\n<a href=\"#series.data\">series.data</a> is fetched.</p>\n<p>All series are used by defualt.</p>\n"
                },
                "hoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p><code>hoverLink</code> enable highlight certain graphical elements of chart when mouse hovers on some place of <code>visualMap</code> component that is coresponding to those graphical elements by visual mapping.</p>\n<p>Inversely, when mouse hovers a graphical element of chart, its value label will be displayed on its corresponding position in <code>visualMap</code>.</p>\n",
                  "default": true
                },
                "inRange": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Define visual channels that will mapped from dataValues that are <strong>in selected range</strong>. (User can interact with visualMap component and make a seleced range by mouse or touch.)</p>\n<p>Possiable visual channels includes:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<hr>\n<p><code>inRange</code> could customize visual channels both in series (by <a href=\"#visualMap-piecewise.seriesIndex\">visualMap-piecewise.seriesIndex</a>) and in <code>visualMap-piecewise</code> itself.</p>\n<p>For instance, if a <code>visualMap-piecewise</code> component is used on a scatter chart, the mapping approach from data to <code>color</code> (or <code>symbol</code>, <code>size</code>, ...) can be both customized in the scatter chart and <code>visualMap-piecewise</code> component itself. See the code as following:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels both in target series and visualMap-piecewise component itself:\n        inRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [30, 100]\n        }\n    }\n]\n</code></pre>\n<p>If you want to define visual channels for target series and visualMap-piecewise component separately, you should do as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels only for target series.\n        target: {\n            inRange: {\n                color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n                symbolSize: [60, 200]\n            }\n        },\n        // Define visual channels only for visualMap-piecewise component.\n        controller: {\n            inRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p>Or define as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels for both target series and visualMap-piecewise component.\n        inRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [60, 200]\n        },\n        // Define visual channels only for visualMap-piecewise component, which\n        // will overlap the properties with the same name in the above common\n        // definition. (symbolSize is overlapped by [30, 100] while color\n        // keeps the original value)\n        controller: {\n            inRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p><br></p>\n<hr>\n<p><strong>✦ About visual channels ✦</strong></p>\n<ul>\n<li><p>Various visual channels (such as <code>color</code>、<code>symbolSize</code> and ect.) can be defined in inRange at the same time and all of them will be apopted.</p>\n</li>\n<li><p>Basically visual channels <code>opacity</code> is recommended, rather than <code>colorAlpha</code>. The former controls the transparency of both graphical element and its attachments (like label), whereas the latter only controls the transparency of graphical element.</p>\n</li>\n<li><p>There are two approaches of visual mapping supported: &#39;Linear Mapping&#39; and &#39;Table Mapping&#39;.</p>\n</li>\n</ul>\n<p><br></p>\n<hr>\n<p><strong>✦ Linear Mapping to visual channel ✦</strong></p>\n<p><code>Linear Mapping</code> means that linear calculation will be performed on each dataValue (value of series.data), mapping them from the domain of <code>[visaulMap.min, visualMap.max]</code> to a given range of <code>[visual value 1, visual value 2]</code> and obtaining a final value (say visual value) for visual channel rendering.</p>\n<p>For instance, <code>[visualMap.min, visualMap.max]</code> is set to be <code>[0, 100]</code>, and there is series.data: <code>[50, 10, 100]</code>. We intend to map them to an <code>opacity</code> range <code>[0.4, 1]</code>, by which the size of value can be demostrated by the transparency of graphical elements. visualMap component will then linear calculate them and get opacity values <code>[0.7, 0.44, 1]</code>, cooresponding to each dataValue.</p>\n<p>We can also set the visual range inversely, such as <code>opacity: [1, 0.4]</code>, and the final mapping result for the given series.data above will be <code>[0.7, 0.96, 0.4]</code>.</p>\n<p>Notice: [visualMap.min, visualMap.max] should be set manually and is [0, 100] by defualt, but not <code>dataMin</code> and <code>dataMax</code> in series.data。</p>\n<p>How to configure visualMap component to do Linear Mapping?</p>\n<ul>\n<li><p>When use <a href=\"#visualMap-continuous\">visualMap-continuous</a>, or</p>\n</li>\n<li><p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is not used.</p>\n</li>\n</ul>\n<p>About the value of visual channel (visual value):</p>\n<ul>\n<li><p>Basically <code>Array</code> is used to express the range of visual value, e.g., <code>color: [&#39;#333&#39;, &#39;#777&#39;]</code>.</p>\n</li>\n<li><p>Single <code>number</code> or single <code>string</code> can also be used, which will be converted to an <code>Array</code> by visualMap component. e.g.:  <code>opacity: 0.4</code> will be converted to <code>opacity: [0.4, 0.4]</code>, <code>color: &#39;#333&#39;</code> will be converted to <code>color: [&#39;#333&#39;, &#39;#333&#39;]</code>.</p>\n</li>\n<li><p>For visual channel <code>symbolSize</code>, <code>opacity</code>, <code>colorAlpha</code>, <code>colorLightness</code>, <code>colorSaturation</code>, <code>colorHue</code>, the range of visual value is always in the form of: <code>[visual value of visualMap.min, visual value of visualMap.max]</code>. For example, <code>colorLightness: [0.8, 0.2]</code> means that the dataValue in series.data that equals to <code>visualMap.min</code> (if any) will be mapped to lightness <code>0.8</code>, and the dataValue that equals to <code>visualMap.max</code> (if any) will be mapped to lightness <code>0.2</code>, and other dataValues will be mapped by the linear calculateion based on the domain of <code>[visualMap.min, visualMap.max]</code> and the range of <code>[0.8, 0.2]</code>.</p>\n</li>\n<li><p>For visual channel <code>color</code>, array is used, like: <code>[&#39;#333&#39;, &#39;#78ab23&#39;, &#39;blue&#39;]</code>, which means a color ribbon is formed based on the three color stops, and dataValues will be mapped to the ribbon. Specifically, the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;#333&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;blue&#39;</code>, and other dataValues will be piecewisely interpolated to get the final color.</p>\n</li>\n<li><p>For visual channel <code>symbol</code>, array is used, like: <code>[&#39;circle&#39;, &#39;rect&#39;, &#39;diamond&#39;]</code>, where the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;circle&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;diamond&#39;</code>, and other dataValues will be caculated based on the numerical distance to <code>visualMax.min</code> and to <code>visualMap.max</code>, and mapped onto one of <code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;diamond&#39;</code>.</p>\n</li>\n</ul>\n<p>About the possible value range of visual value:</p>\n<ul>\n<li><p><code>opacity</code>、<code>colorAlpha</code>、<code>colorLightness</code>、<code>colorSaturation</code>，<code>visual value</code></p>\n<p>  possible value range is <code>[0, 1]</code>。</p>\n</li>\n<li><p><code>colorHue</code></p>\n<p>  possible value range is <code>[0, 360]</code>。</p>\n</li>\n<li><p><code>color</code>：</p>\n<p>  color can use RGB expression, like <code>&#39;rgb(128, 128, 128)&#39;</code>, or RGBA expression, like <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, or Hex expression, like &#39;#ccc&#39;.</p>\n</li>\n<li><p><code>symbol</code>：</p>\n</li>\n</ul>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n<p><br></p>\n<hr>\n<p><strong>✦ Table Mapping to visual channel ✦</strong></p>\n<p><code>Table Mapping</code> could be used when dataValue (values in series.data, specified by <a href=\"#visualMap.dimension\">visualMap.dimension</a>) is enumerable and we intend to map them to visual value by looking up a given table.</p>\n<p>For instance, in a <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> component, <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is set to <code>[&#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. And there is series.data: <code>[&#39;Demon Hunter&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. Then we can establish the lookup rule for color: <code>color: {&#39;Warden&#39;: &#39;red&#39;, &#39;Demon Hunter&#39;: &#39;black&#39;}</code>, by which the <code>visualMap</code> component will map <code>dataValue</code> to <code>color</code>.</p>\n<p>How to configure <code>visualMap</code> component to do <code>Table Mapping</code>?</p>\n<p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a>is set.</p>\n<p>About the value of visual channel (visual value):</p>\n<p>Generally <code>Object</code> or <code>Array</code> is used, for instance:</p>\n<pre><code class=\"lang-javascript\">visualMap: {\n    type: &#39;piecewise&#39;,\n    // categories defines the items that to be displayed in visualMap-piecewise component.\n    categories: [\n        &#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;\n    ],\n    inRange: {\n        // visual value can be an Object：\n        color: {\n            &#39;Warden&#39;: &#39;red&#39;,\n            &#39;Demon Hunter&#39;: &#39;black&#39;,\n            &#39;&#39;: &#39;green&#39; // Blank string means that except &#39;Warden&#39; and &#39;Demon Hunter&#39;,\n                        // all other dataValues should be mapped to &#39;green&#39;.\n        }\n        // visual value can also be a single value,\n        // means that all dataValues should be mapped to the value.\n        color: &#39;green&#39;,\n        // visual value can also be a array, with the same length\n        // as the array of categories and one-one mapping onto it.\n        color: [&#39;red&#39;, &#39;black&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;white&#39;]\n    }\n}\n</code></pre>\n<p><a href=\"doc-example/scatter-visualMap-categories&amp;edit=1&amp;reset=1\" target=\"_blank\">Example</a></p>\n<hr>\n<p><strong>✦ How to modity configurations of vsiual encoding? ✦</strong></p>\n<p>If you want to modify the configurations of visual encoding after chart been rendered (by invoke <code>setOption</code> to set the initial <code>option</code>), <code>setOption</code> can be used again to modify configurations of visual encoding. For instance:</p>\n<pre><code class=\"lang-javascript\">chart.setOption({\n    visualMap: {\n        inRange: {color: [&#39;red&#39;, &#39;blue&#39;]}\n    }\n});\n</code></pre>\n<p>Notice:</p>\n<ul>\n<li><p>These visualMap properties (i.e. <code>inRange</code>, <code>outOfRange</code>, <code>target</code>, <code>controller</code>) do not support &quot;merge&quot;, that is, anyone among them is modified when use <code>setOption</code> again, all of the original values of them will not be kept but erased. The &quot;merge&quot; brings complication in implemnentation and understanding, whereas &quot;erase all&quot; normalize the practise: once you want to modify some visual values, you should pass all of them to <code>setOption</code>, no matter they are to be changed.</p>\n</li>\n<li><p>This way, <code>getOption() -&gt; modify the gotten option -&gt; setOption(modified option)</code>, is strongly <strong>not recommended</strong>, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">// Not recommended approach, regardless of its correctness:\n\nvar option = chart.getOption(); // Get the entire option.\noption.visualMap.inRange.color = [&#39;red&#39;, &#39;blue&#39;]; // modify color, which is what you want.\n\n// You have to modify those two properties, otherwise you will not get what you want.\noption.visualMap.target.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\noption.visualMap.controller.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\n\nchart.setOption(option); // set the modified option back.\n// You should not use this approach, but use the\n// approach demostrated before this example.\n</code></pre>\n<p><strong>Notice:</strong> There is default color <code>[&#39;#f6efa6&#39;, &#39;#d88273&#39;, &#39;#bf444c&#39;]</code> in <code>inRange</code> if you not set <code>inRange</code>. If you dont want it, set <code>inRange: {color: null}</code> to disable it.</p>\n"
                },
                "outOfRange": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Define visual channels that will mapped from dataValues that are <strong>out of selected range</strong>. (User can interact with visualMap component and make a seleced range by mouse or touch.)</p>\n<p>Possiable visual channels includes:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<p><code>outOfRange</code> could customize visual channels both in series (by <a href=\"#visualMap-piecewise.seriesIndex\">visualMap-piecewise.seriesIndex</a>) and in <code>visualMap-piecewise</code> itself.</p>\n<p>For instance, if a <code>visualMap-piecewise</code> component is used on a scatter chart, the mapping approach from data to <code>color</code> (or <code>symbol</code>, <code>size</code>, ...) can be both customized in the scatter chart and <code>visualMap-piecewise</code> component itself. See the code as following:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels both in target series and visualMap-piecewise component itself:\n        outOfRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [30, 100]\n        }\n    }\n]\n</code></pre>\n<p>If you want to define visual channels for target series and visualMap-piecewise component separately, you should do as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels only for target series.\n        target: {\n            outOfRange: {\n                color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n                symbolSize: [60, 200]\n            }\n        },\n        // Define visual channels only for visualMap-piecewise component.\n        controller: {\n            outOfRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p>Or define as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels for both target series and visualMap-piecewise component.\n        outOfRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [60, 200]\n        },\n        // Define visual channels only for visualMap-piecewise component, which\n        // will overlap the properties with the same name in the above common\n        // definition. (symbolSize is overlapped by [30, 100] while color\n        // keeps the original value)\n        controller: {\n            outOfRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p><br></p>\n<hr>\n<p><strong>✦ About visual channels ✦</strong></p>\n<ul>\n<li><p>Various visual channels (such as <code>color</code>、<code>symbolSize</code> and ect.) can be defined in outOfRange at the same time and all of them will be apopted.</p>\n</li>\n<li><p>Basically visual channels <code>opacity</code> is recommended, rather than <code>colorAlpha</code>. The former controls the transparency of both graphical element and its attachments (like label), whereas the latter only controls the transparency of graphical element.</p>\n</li>\n<li><p>There are two approaches of visual mapping supported: &#39;Linear Mapping&#39; and &#39;Table Mapping&#39;.</p>\n</li>\n</ul>\n<p><br></p>\n<hr>\n<p><strong>✦ Linear Mapping to visual channel ✦</strong></p>\n<p><code>Linear Mapping</code> means that linear calculation will be performed on each dataValue (value of series.data), mapping them from the domain of <code>[visaulMap.min, visualMap.max]</code> to a given range of <code>[visual value 1, visual value 2]</code> and obtaining a final value (say visual value) for visual channel rendering.</p>\n<p>For instance, <code>[visualMap.min, visualMap.max]</code> is set to be <code>[0, 100]</code>, and there is series.data: <code>[50, 10, 100]</code>. We intend to map them to an <code>opacity</code> range <code>[0.4, 1]</code>, by which the size of value can be demostrated by the transparency of graphical elements. visualMap component will then linear calculate them and get opacity values <code>[0.7, 0.44, 1]</code>, cooresponding to each dataValue.</p>\n<p>We can also set the visual range inversely, such as <code>opacity: [1, 0.4]</code>, and the final mapping result for the given series.data above will be <code>[0.7, 0.96, 0.4]</code>.</p>\n<p>Notice: [visualMap.min, visualMap.max] should be set manually and is [0, 100] by defualt, but not <code>dataMin</code> and <code>dataMax</code> in series.data。</p>\n<p>How to configure visualMap component to do Linear Mapping?</p>\n<ul>\n<li><p>When use <a href=\"#visualMap-continuous\">visualMap-continuous</a>, or</p>\n</li>\n<li><p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is not used.</p>\n</li>\n</ul>\n<p>About the value of visual channel (visual value):</p>\n<ul>\n<li><p>Basically <code>Array</code> is used to express the range of visual value, e.g., <code>color: [&#39;#333&#39;, &#39;#777&#39;]</code>.</p>\n</li>\n<li><p>Single <code>number</code> or single <code>string</code> can also be used, which will be converted to an <code>Array</code> by visualMap component. e.g.:  <code>opacity: 0.4</code> will be converted to <code>opacity: [0.4, 0.4]</code>, <code>color: &#39;#333&#39;</code> will be converted to <code>color: [&#39;#333&#39;, &#39;#333&#39;]</code>.</p>\n</li>\n<li><p>For visual channel <code>symbolSize</code>, <code>opacity</code>, <code>colorAlpha</code>, <code>colorLightness</code>, <code>colorSaturation</code>, <code>colorHue</code>, the range of visual value is always in the form of: <code>[visual value of visualMap.min, visual value of visualMap.max]</code>. For example, <code>colorLightness: [0.8, 0.2]</code> means that the dataValue in series.data that equals to <code>visualMap.min</code> (if any) will be mapped to lightness <code>0.8</code>, and the dataValue that equals to <code>visualMap.max</code> (if any) will be mapped to lightness <code>0.2</code>, and other dataValues will be mapped by the linear calculateion based on the domain of <code>[visualMap.min, visualMap.max]</code> and the range of <code>[0.8, 0.2]</code>.</p>\n</li>\n<li><p>For visual channel <code>color</code>, array is used, like: <code>[&#39;#333&#39;, &#39;#78ab23&#39;, &#39;blue&#39;]</code>, which means a color ribbon is formed based on the three color stops, and dataValues will be mapped to the ribbon. Specifically, the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;#333&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;blue&#39;</code>, and other dataValues will be piecewisely interpolated to get the final color.</p>\n</li>\n<li><p>For visual channel <code>symbol</code>, array is used, like: <code>[&#39;circle&#39;, &#39;rect&#39;, &#39;diamond&#39;]</code>, where the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;circle&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;diamond&#39;</code>, and other dataValues will be caculated based on the numerical distance to <code>visualMax.min</code> and to <code>visualMap.max</code>, and mapped onto one of <code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;diamond&#39;</code>.</p>\n</li>\n</ul>\n<p>About the possible value range of visual value:</p>\n<ul>\n<li><p><code>opacity</code>、<code>colorAlpha</code>、<code>colorLightness</code>、<code>colorSaturation</code>，<code>visual value</code></p>\n<p>  possible value range is <code>[0, 1]</code>。</p>\n</li>\n<li><p><code>colorHue</code></p>\n<p>  possible value range is <code>[0, 360]</code>。</p>\n</li>\n<li><p><code>color</code>：</p>\n<p>  color can use RGB expression, like <code>&#39;rgb(128, 128, 128)&#39;</code>, or RGBA expression, like <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, or Hex expression, like &#39;#ccc&#39;.</p>\n</li>\n<li><p><code>symbol</code>：</p>\n</li>\n</ul>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n<p><br></p>\n<hr>\n<p><strong>✦ Table Mapping to visual channel ✦</strong></p>\n<p><code>Table Mapping</code> could be used when dataValue (values in series.data, specified by <a href=\"#visualMap.dimension\">visualMap.dimension</a>) is enumerable and we intend to map them to visual value by looking up a given table.</p>\n<p>For instance, in a <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> component, <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is set to <code>[&#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. And there is series.data: <code>[&#39;Demon Hunter&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. Then we can establish the lookup rule for color: <code>color: {&#39;Warden&#39;: &#39;red&#39;, &#39;Demon Hunter&#39;: &#39;black&#39;}</code>, by which the <code>visualMap</code> component will map <code>dataValue</code> to <code>color</code>.</p>\n<p>How to configure <code>visualMap</code> component to do <code>Table Mapping</code>?</p>\n<p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a>is set.</p>\n<p>About the value of visual channel (visual value):</p>\n<p>Generally <code>Object</code> or <code>Array</code> is used, for instance:</p>\n<pre><code class=\"lang-javascript\">visualMap: {\n    type: &#39;piecewise&#39;,\n    // categories defines the items that to be displayed in visualMap-piecewise component.\n    categories: [\n        &#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;\n    ],\n    outOfRange: {\n        // visual value can be an Object：\n        color: {\n            &#39;Warden&#39;: &#39;red&#39;,\n            &#39;Demon Hunter&#39;: &#39;black&#39;,\n            &#39;&#39;: &#39;green&#39; // Blank string means that except &#39;Warden&#39; and &#39;Demon Hunter&#39;,\n                        // all other dataValues should be mapped to &#39;green&#39;.\n        }\n        // visual value can also be a single value,\n        // means that all dataValues should be mapped to the value.\n        color: &#39;green&#39;,\n        // visual value can also be a array, with the same length\n        // as the array of categories and one-one mapping onto it.\n        color: [&#39;red&#39;, &#39;black&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;white&#39;]\n    }\n}\n</code></pre>\n<p><a href=\"doc-example/scatter-visualMap-categories&amp;edit=1&amp;reset=1\" target=\"_blank\">Example</a></p>\n<hr>\n<p><strong>✦ How to modity configurations of vsiual encoding? ✦</strong></p>\n<p>If you want to modify the configurations of visual encoding after chart been rendered (by invoke <code>setOption</code> to set the initial <code>option</code>), <code>setOption</code> can be used again to modify configurations of visual encoding. For instance:</p>\n<pre><code class=\"lang-javascript\">chart.setOption({\n    visualMap: {\n        inRange: {color: [&#39;red&#39;, &#39;blue&#39;]}\n    }\n});\n</code></pre>\n<p>Notice:</p>\n<ul>\n<li><p>These visualMap properties (i.e. <code>inRange</code>, <code>outOfRange</code>, <code>target</code>, <code>controller</code>) do not support &quot;merge&quot;, that is, anyone among them is modified when use <code>setOption</code> again, all of the original values of them will not be kept but erased. The &quot;merge&quot; brings complication in implemnentation and understanding, whereas &quot;erase all&quot; normalize the practise: once you want to modify some visual values, you should pass all of them to <code>setOption</code>, no matter they are to be changed.</p>\n</li>\n<li><p>This way, <code>getOption() -&gt; modify the gotten option -&gt; setOption(modified option)</code>, is strongly <strong>not recommended</strong>, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">// Not recommended approach, regardless of its correctness:\n\nvar option = chart.getOption(); // Get the entire option.\noption.visualMap.inRange.color = [&#39;red&#39;, &#39;blue&#39;]; // modify color, which is what you want.\n\n// You have to modify those two properties, otherwise you will not get what you want.\noption.visualMap.target.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\noption.visualMap.controller.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\n\nchart.setOption(option); // set the modified option back.\n// You should not use this approach, but use the\n// approach demostrated before this example.\n</code></pre>\n"
                },
                "controller": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Property <code>inRange</code> and <code>outOfRange</code> can be set within property <code>controller</code>, which means those <code>inRange</code> and <code>outOfRange</code> are only used on the controller (<code>visualMap</code> component itself), but are not used on chart (series). This property is useful in some scenario that the view of controller need to be customized in detail.</p>\n",
                  "properties": {
                    "inRange": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Define visual channels that will mapped from dataValues that are <strong>in selected range</strong>. (User can interact with visualMap component and make a seleced range by mouse or touch.)</p>\n<p>Possiable visual channels includes:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<hr>\n<p><code>inRange</code> could customize visual channels both in series (by <a href=\"#visualMap-piecewise.seriesIndex\">visualMap-piecewise.seriesIndex</a>) and in <code>visualMap-piecewise</code> itself.</p>\n<p>For instance, if a <code>visualMap-piecewise</code> component is used on a scatter chart, the mapping approach from data to <code>color</code> (or <code>symbol</code>, <code>size</code>, ...) can be both customized in the scatter chart and <code>visualMap-piecewise</code> component itself. See the code as following:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels both in target series and visualMap-piecewise component itself:\n        inRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [30, 100]\n        }\n    }\n]\n</code></pre>\n<p>If you want to define visual channels for target series and visualMap-piecewise component separately, you should do as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels only for target series.\n        target: {\n            inRange: {\n                color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n                symbolSize: [60, 200]\n            }\n        },\n        // Define visual channels only for visualMap-piecewise component.\n        controller: {\n            inRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p>Or define as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels for both target series and visualMap-piecewise component.\n        inRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [60, 200]\n        },\n        // Define visual channels only for visualMap-piecewise component, which\n        // will overlap the properties with the same name in the above common\n        // definition. (symbolSize is overlapped by [30, 100] while color\n        // keeps the original value)\n        controller: {\n            inRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p><br></p>\n<hr>\n<p><strong>✦ About visual channels ✦</strong></p>\n<ul>\n<li><p>Various visual channels (such as <code>color</code>、<code>symbolSize</code> and ect.) can be defined in inRange at the same time and all of them will be apopted.</p>\n</li>\n<li><p>Basically visual channels <code>opacity</code> is recommended, rather than <code>colorAlpha</code>. The former controls the transparency of both graphical element and its attachments (like label), whereas the latter only controls the transparency of graphical element.</p>\n</li>\n<li><p>There are two approaches of visual mapping supported: &#39;Linear Mapping&#39; and &#39;Table Mapping&#39;.</p>\n</li>\n</ul>\n<p><br></p>\n<hr>\n<p><strong>✦ Linear Mapping to visual channel ✦</strong></p>\n<p><code>Linear Mapping</code> means that linear calculation will be performed on each dataValue (value of series.data), mapping them from the domain of <code>[visaulMap.min, visualMap.max]</code> to a given range of <code>[visual value 1, visual value 2]</code> and obtaining a final value (say visual value) for visual channel rendering.</p>\n<p>For instance, <code>[visualMap.min, visualMap.max]</code> is set to be <code>[0, 100]</code>, and there is series.data: <code>[50, 10, 100]</code>. We intend to map them to an <code>opacity</code> range <code>[0.4, 1]</code>, by which the size of value can be demostrated by the transparency of graphical elements. visualMap component will then linear calculate them and get opacity values <code>[0.7, 0.44, 1]</code>, cooresponding to each dataValue.</p>\n<p>We can also set the visual range inversely, such as <code>opacity: [1, 0.4]</code>, and the final mapping result for the given series.data above will be <code>[0.7, 0.96, 0.4]</code>.</p>\n<p>Notice: [visualMap.min, visualMap.max] should be set manually and is [0, 100] by defualt, but not <code>dataMin</code> and <code>dataMax</code> in series.data。</p>\n<p>How to configure visualMap component to do Linear Mapping?</p>\n<ul>\n<li><p>When use <a href=\"#visualMap-continuous\">visualMap-continuous</a>, or</p>\n</li>\n<li><p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is not used.</p>\n</li>\n</ul>\n<p>About the value of visual channel (visual value):</p>\n<ul>\n<li><p>Basically <code>Array</code> is used to express the range of visual value, e.g., <code>color: [&#39;#333&#39;, &#39;#777&#39;]</code>.</p>\n</li>\n<li><p>Single <code>number</code> or single <code>string</code> can also be used, which will be converted to an <code>Array</code> by visualMap component. e.g.:  <code>opacity: 0.4</code> will be converted to <code>opacity: [0.4, 0.4]</code>, <code>color: &#39;#333&#39;</code> will be converted to <code>color: [&#39;#333&#39;, &#39;#333&#39;]</code>.</p>\n</li>\n<li><p>For visual channel <code>symbolSize</code>, <code>opacity</code>, <code>colorAlpha</code>, <code>colorLightness</code>, <code>colorSaturation</code>, <code>colorHue</code>, the range of visual value is always in the form of: <code>[visual value of visualMap.min, visual value of visualMap.max]</code>. For example, <code>colorLightness: [0.8, 0.2]</code> means that the dataValue in series.data that equals to <code>visualMap.min</code> (if any) will be mapped to lightness <code>0.8</code>, and the dataValue that equals to <code>visualMap.max</code> (if any) will be mapped to lightness <code>0.2</code>, and other dataValues will be mapped by the linear calculateion based on the domain of <code>[visualMap.min, visualMap.max]</code> and the range of <code>[0.8, 0.2]</code>.</p>\n</li>\n<li><p>For visual channel <code>color</code>, array is used, like: <code>[&#39;#333&#39;, &#39;#78ab23&#39;, &#39;blue&#39;]</code>, which means a color ribbon is formed based on the three color stops, and dataValues will be mapped to the ribbon. Specifically, the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;#333&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;blue&#39;</code>, and other dataValues will be piecewisely interpolated to get the final color.</p>\n</li>\n<li><p>For visual channel <code>symbol</code>, array is used, like: <code>[&#39;circle&#39;, &#39;rect&#39;, &#39;diamond&#39;]</code>, where the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;circle&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;diamond&#39;</code>, and other dataValues will be caculated based on the numerical distance to <code>visualMax.min</code> and to <code>visualMap.max</code>, and mapped onto one of <code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;diamond&#39;</code>.</p>\n</li>\n</ul>\n<p>About the possible value range of visual value:</p>\n<ul>\n<li><p><code>opacity</code>、<code>colorAlpha</code>、<code>colorLightness</code>、<code>colorSaturation</code>，<code>visual value</code></p>\n<p>  possible value range is <code>[0, 1]</code>。</p>\n</li>\n<li><p><code>colorHue</code></p>\n<p>  possible value range is <code>[0, 360]</code>。</p>\n</li>\n<li><p><code>color</code>：</p>\n<p>  color can use RGB expression, like <code>&#39;rgb(128, 128, 128)&#39;</code>, or RGBA expression, like <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, or Hex expression, like &#39;#ccc&#39;.</p>\n</li>\n<li><p><code>symbol</code>：</p>\n</li>\n</ul>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n<p><br></p>\n<hr>\n<p><strong>✦ Table Mapping to visual channel ✦</strong></p>\n<p><code>Table Mapping</code> could be used when dataValue (values in series.data, specified by <a href=\"#visualMap.dimension\">visualMap.dimension</a>) is enumerable and we intend to map them to visual value by looking up a given table.</p>\n<p>For instance, in a <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> component, <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is set to <code>[&#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. And there is series.data: <code>[&#39;Demon Hunter&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. Then we can establish the lookup rule for color: <code>color: {&#39;Warden&#39;: &#39;red&#39;, &#39;Demon Hunter&#39;: &#39;black&#39;}</code>, by which the <code>visualMap</code> component will map <code>dataValue</code> to <code>color</code>.</p>\n<p>How to configure <code>visualMap</code> component to do <code>Table Mapping</code>?</p>\n<p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a>is set.</p>\n<p>About the value of visual channel (visual value):</p>\n<p>Generally <code>Object</code> or <code>Array</code> is used, for instance:</p>\n<pre><code class=\"lang-javascript\">visualMap: {\n    type: &#39;piecewise&#39;,\n    // categories defines the items that to be displayed in visualMap-piecewise component.\n    categories: [\n        &#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;\n    ],\n    inRange: {\n        // visual value can be an Object：\n        color: {\n            &#39;Warden&#39;: &#39;red&#39;,\n            &#39;Demon Hunter&#39;: &#39;black&#39;,\n            &#39;&#39;: &#39;green&#39; // Blank string means that except &#39;Warden&#39; and &#39;Demon Hunter&#39;,\n                        // all other dataValues should be mapped to &#39;green&#39;.\n        }\n        // visual value can also be a single value,\n        // means that all dataValues should be mapped to the value.\n        color: &#39;green&#39;,\n        // visual value can also be a array, with the same length\n        // as the array of categories and one-one mapping onto it.\n        color: [&#39;red&#39;, &#39;black&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;white&#39;]\n    }\n}\n</code></pre>\n<p><a href=\"doc-example/scatter-visualMap-categories&amp;edit=1&amp;reset=1\" target=\"_blank\">Example</a></p>\n<hr>\n<p><strong>✦ How to modity configurations of vsiual encoding? ✦</strong></p>\n<p>If you want to modify the configurations of visual encoding after chart been rendered (by invoke <code>setOption</code> to set the initial <code>option</code>), <code>setOption</code> can be used again to modify configurations of visual encoding. For instance:</p>\n<pre><code class=\"lang-javascript\">chart.setOption({\n    visualMap: {\n        inRange: {color: [&#39;red&#39;, &#39;blue&#39;]}\n    }\n});\n</code></pre>\n<p>Notice:</p>\n<ul>\n<li><p>These visualMap properties (i.e. <code>inRange</code>, <code>outOfRange</code>, <code>target</code>, <code>controller</code>) do not support &quot;merge&quot;, that is, anyone among them is modified when use <code>setOption</code> again, all of the original values of them will not be kept but erased. The &quot;merge&quot; brings complication in implemnentation and understanding, whereas &quot;erase all&quot; normalize the practise: once you want to modify some visual values, you should pass all of them to <code>setOption</code>, no matter they are to be changed.</p>\n</li>\n<li><p>This way, <code>getOption() -&gt; modify the gotten option -&gt; setOption(modified option)</code>, is strongly <strong>not recommended</strong>, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">// Not recommended approach, regardless of its correctness:\n\nvar option = chart.getOption(); // Get the entire option.\noption.visualMap.inRange.color = [&#39;red&#39;, &#39;blue&#39;]; // modify color, which is what you want.\n\n// You have to modify those two properties, otherwise you will not get what you want.\noption.visualMap.target.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\noption.visualMap.controller.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\n\nchart.setOption(option); // set the modified option back.\n// You should not use this approach, but use the\n// approach demostrated before this example.\n</code></pre>\n<p><strong>Notice:</strong> There is default color <code>[&#39;#f6efa6&#39;, &#39;#d88273&#39;, &#39;#bf444c&#39;]</code> in <code>inRange</code> if you not set <code>inRange</code>. If you dont want it, set <code>inRange: {color: null}</code> to disable it.</p>\n"
                    },
                    "outOfRange": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Define visual channels that will mapped from dataValues that are <strong>out of selected range</strong>. (User can interact with visualMap component and make a seleced range by mouse or touch.)</p>\n<p>Possiable visual channels includes:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<p><code>outOfRange</code> could customize visual channels both in series (by <a href=\"#visualMap-piecewise.seriesIndex\">visualMap-piecewise.seriesIndex</a>) and in <code>visualMap-piecewise</code> itself.</p>\n<p>For instance, if a <code>visualMap-piecewise</code> component is used on a scatter chart, the mapping approach from data to <code>color</code> (or <code>symbol</code>, <code>size</code>, ...) can be both customized in the scatter chart and <code>visualMap-piecewise</code> component itself. See the code as following:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels both in target series and visualMap-piecewise component itself:\n        outOfRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [30, 100]\n        }\n    }\n]\n</code></pre>\n<p>If you want to define visual channels for target series and visualMap-piecewise component separately, you should do as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels only for target series.\n        target: {\n            outOfRange: {\n                color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n                symbolSize: [60, 200]\n            }\n        },\n        // Define visual channels only for visualMap-piecewise component.\n        controller: {\n            outOfRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p>Or define as follows:</p>\n<pre><code class=\"lang-javascript\">visualMap: [\n    {\n        ...,\n        // Define visual channels for both target series and visualMap-piecewise component.\n        outOfRange: {\n            color: [&#39;#121122&#39;, &#39;rgba(3,4,5,0.4)&#39;, &#39;red&#39;],\n            symbolSize: [60, 200]\n        },\n        // Define visual channels only for visualMap-piecewise component, which\n        // will overlap the properties with the same name in the above common\n        // definition. (symbolSize is overlapped by [30, 100] while color\n        // keeps the original value)\n        controller: {\n            outOfRange: {\n                symbolSize: [30, 100]\n            }\n        }\n    }\n]\n</code></pre>\n<p><br></p>\n<hr>\n<p><strong>✦ About visual channels ✦</strong></p>\n<ul>\n<li><p>Various visual channels (such as <code>color</code>、<code>symbolSize</code> and ect.) can be defined in outOfRange at the same time and all of them will be apopted.</p>\n</li>\n<li><p>Basically visual channels <code>opacity</code> is recommended, rather than <code>colorAlpha</code>. The former controls the transparency of both graphical element and its attachments (like label), whereas the latter only controls the transparency of graphical element.</p>\n</li>\n<li><p>There are two approaches of visual mapping supported: &#39;Linear Mapping&#39; and &#39;Table Mapping&#39;.</p>\n</li>\n</ul>\n<p><br></p>\n<hr>\n<p><strong>✦ Linear Mapping to visual channel ✦</strong></p>\n<p><code>Linear Mapping</code> means that linear calculation will be performed on each dataValue (value of series.data), mapping them from the domain of <code>[visaulMap.min, visualMap.max]</code> to a given range of <code>[visual value 1, visual value 2]</code> and obtaining a final value (say visual value) for visual channel rendering.</p>\n<p>For instance, <code>[visualMap.min, visualMap.max]</code> is set to be <code>[0, 100]</code>, and there is series.data: <code>[50, 10, 100]</code>. We intend to map them to an <code>opacity</code> range <code>[0.4, 1]</code>, by which the size of value can be demostrated by the transparency of graphical elements. visualMap component will then linear calculate them and get opacity values <code>[0.7, 0.44, 1]</code>, cooresponding to each dataValue.</p>\n<p>We can also set the visual range inversely, such as <code>opacity: [1, 0.4]</code>, and the final mapping result for the given series.data above will be <code>[0.7, 0.96, 0.4]</code>.</p>\n<p>Notice: [visualMap.min, visualMap.max] should be set manually and is [0, 100] by defualt, but not <code>dataMin</code> and <code>dataMax</code> in series.data。</p>\n<p>How to configure visualMap component to do Linear Mapping?</p>\n<ul>\n<li><p>When use <a href=\"#visualMap-continuous\">visualMap-continuous</a>, or</p>\n</li>\n<li><p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is not used.</p>\n</li>\n</ul>\n<p>About the value of visual channel (visual value):</p>\n<ul>\n<li><p>Basically <code>Array</code> is used to express the range of visual value, e.g., <code>color: [&#39;#333&#39;, &#39;#777&#39;]</code>.</p>\n</li>\n<li><p>Single <code>number</code> or single <code>string</code> can also be used, which will be converted to an <code>Array</code> by visualMap component. e.g.:  <code>opacity: 0.4</code> will be converted to <code>opacity: [0.4, 0.4]</code>, <code>color: &#39;#333&#39;</code> will be converted to <code>color: [&#39;#333&#39;, &#39;#333&#39;]</code>.</p>\n</li>\n<li><p>For visual channel <code>symbolSize</code>, <code>opacity</code>, <code>colorAlpha</code>, <code>colorLightness</code>, <code>colorSaturation</code>, <code>colorHue</code>, the range of visual value is always in the form of: <code>[visual value of visualMap.min, visual value of visualMap.max]</code>. For example, <code>colorLightness: [0.8, 0.2]</code> means that the dataValue in series.data that equals to <code>visualMap.min</code> (if any) will be mapped to lightness <code>0.8</code>, and the dataValue that equals to <code>visualMap.max</code> (if any) will be mapped to lightness <code>0.2</code>, and other dataValues will be mapped by the linear calculateion based on the domain of <code>[visualMap.min, visualMap.max]</code> and the range of <code>[0.8, 0.2]</code>.</p>\n</li>\n<li><p>For visual channel <code>color</code>, array is used, like: <code>[&#39;#333&#39;, &#39;#78ab23&#39;, &#39;blue&#39;]</code>, which means a color ribbon is formed based on the three color stops, and dataValues will be mapped to the ribbon. Specifically, the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;#333&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;blue&#39;</code>, and other dataValues will be piecewisely interpolated to get the final color.</p>\n</li>\n<li><p>For visual channel <code>symbol</code>, array is used, like: <code>[&#39;circle&#39;, &#39;rect&#39;, &#39;diamond&#39;]</code>, where the dataValue that equals to <code>visualMap.min</code> will be mapped onto <code>&#39;circle&#39;</code>, the dataValue that equals to <code>visualMap.max</code> will be mapped onto <code>&#39;diamond&#39;</code>, and other dataValues will be caculated based on the numerical distance to <code>visualMax.min</code> and to <code>visualMap.max</code>, and mapped onto one of <code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;diamond&#39;</code>.</p>\n</li>\n</ul>\n<p>About the possible value range of visual value:</p>\n<ul>\n<li><p><code>opacity</code>、<code>colorAlpha</code>、<code>colorLightness</code>、<code>colorSaturation</code>，<code>visual value</code></p>\n<p>  possible value range is <code>[0, 1]</code>。</p>\n</li>\n<li><p><code>colorHue</code></p>\n<p>  possible value range is <code>[0, 360]</code>。</p>\n</li>\n<li><p><code>color</code>：</p>\n<p>  color can use RGB expression, like <code>&#39;rgb(128, 128, 128)&#39;</code>, or RGBA expression, like <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, or Hex expression, like &#39;#ccc&#39;.</p>\n</li>\n<li><p><code>symbol</code>：</p>\n</li>\n</ul>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n<p><br></p>\n<hr>\n<p><strong>✦ Table Mapping to visual channel ✦</strong></p>\n<p><code>Table Mapping</code> could be used when dataValue (values in series.data, specified by <a href=\"#visualMap.dimension\">visualMap.dimension</a>) is enumerable and we intend to map them to visual value by looking up a given table.</p>\n<p>For instance, in a <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> component, <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a> is set to <code>[&#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. And there is series.data: <code>[&#39;Demon Hunter&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;]</code>. Then we can establish the lookup rule for color: <code>color: {&#39;Warden&#39;: &#39;red&#39;, &#39;Demon Hunter&#39;: &#39;black&#39;}</code>, by which the <code>visualMap</code> component will map <code>dataValue</code> to <code>color</code>.</p>\n<p>How to configure <code>visualMap</code> component to do <code>Table Mapping</code>?</p>\n<p>When use <a href=\"#visualMap-piecewise\">visualMap-piecewise</a> and <a href=\"#visualMap-piecewise.categories\">visualMap-piecewise.categories</a>is set.</p>\n<p>About the value of visual channel (visual value):</p>\n<p>Generally <code>Object</code> or <code>Array</code> is used, for instance:</p>\n<pre><code class=\"lang-javascript\">visualMap: {\n    type: &#39;piecewise&#39;,\n    // categories defines the items that to be displayed in visualMap-piecewise component.\n    categories: [\n        &#39;Demon Hunter&#39;, &#39;Blademaster&#39;, &#39;Death Knight&#39;, &#39;Warden&#39;, &#39;Paladin&#39;\n    ],\n    outOfRange: {\n        // visual value can be an Object：\n        color: {\n            &#39;Warden&#39;: &#39;red&#39;,\n            &#39;Demon Hunter&#39;: &#39;black&#39;,\n            &#39;&#39;: &#39;green&#39; // Blank string means that except &#39;Warden&#39; and &#39;Demon Hunter&#39;,\n                        // all other dataValues should be mapped to &#39;green&#39;.\n        }\n        // visual value can also be a single value,\n        // means that all dataValues should be mapped to the value.\n        color: &#39;green&#39;,\n        // visual value can also be a array, with the same length\n        // as the array of categories and one-one mapping onto it.\n        color: [&#39;red&#39;, &#39;black&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;white&#39;]\n    }\n}\n</code></pre>\n<p><a href=\"doc-example/scatter-visualMap-categories&amp;edit=1&amp;reset=1\" target=\"_blank\">Example</a></p>\n<hr>\n<p><strong>✦ How to modity configurations of vsiual encoding? ✦</strong></p>\n<p>If you want to modify the configurations of visual encoding after chart been rendered (by invoke <code>setOption</code> to set the initial <code>option</code>), <code>setOption</code> can be used again to modify configurations of visual encoding. For instance:</p>\n<pre><code class=\"lang-javascript\">chart.setOption({\n    visualMap: {\n        inRange: {color: [&#39;red&#39;, &#39;blue&#39;]}\n    }\n});\n</code></pre>\n<p>Notice:</p>\n<ul>\n<li><p>These visualMap properties (i.e. <code>inRange</code>, <code>outOfRange</code>, <code>target</code>, <code>controller</code>) do not support &quot;merge&quot;, that is, anyone among them is modified when use <code>setOption</code> again, all of the original values of them will not be kept but erased. The &quot;merge&quot; brings complication in implemnentation and understanding, whereas &quot;erase all&quot; normalize the practise: once you want to modify some visual values, you should pass all of them to <code>setOption</code>, no matter they are to be changed.</p>\n</li>\n<li><p>This way, <code>getOption() -&gt; modify the gotten option -&gt; setOption(modified option)</code>, is strongly <strong>not recommended</strong>, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">// Not recommended approach, regardless of its correctness:\n\nvar option = chart.getOption(); // Get the entire option.\noption.visualMap.inRange.color = [&#39;red&#39;, &#39;blue&#39;]; // modify color, which is what you want.\n\n// You have to modify those two properties, otherwise you will not get what you want.\noption.visualMap.target.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\noption.visualMap.controller.inRange.color = [&#39;red&#39;, &#39;blue&#39;];\n\nchart.setOption(option); // set the modified option back.\n// You should not use this approach, but use the\n// approach demostrated before this example.\n</code></pre>\n"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 4
                },
                "left": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>visualMap  distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": 0
                },
                "top": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>visualMap  distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "auto"
                },
                "right": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>visualMap  distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
                  "default": "auto"
                },
                "bottom": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>visualMap  distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
                  "default": 0
                },
                "orient": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>How to layout the visualMap component, <code>&#39;horizontal&#39;</code> or <code>&#39;vertical&#39;</code>.</p>\n",
                  "default": "'vertical'"
                },
                "padding": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>visualMap-piecewise internal margin, unit as px,set internal margin of each directions to 5 by default, set the internal margin of four directions of accepting array.</p>\n<p>Examples: </p>\n<pre><code class=\"lang-js\">// Set internal margin to 5\npadding: 5\n// Set the upper and lower margins to 5, left and right margins to 10\npadding: [5, 10]\n// Set each of the four margins as the followings\npadding: [\n    5,  // up\n    10, // right\n    5,  // down\n    10, // left\n]\n</code></pre>\n",
                  "default": 5
                },
                "backgroundColor": {
                  "type": [
                    "Color"
                  ],
                  "descriptionCN": "<p>background color of visualMap component.</p>\n",
                  "default": "'rgba(0,0,0,0)'"
                },
                "borderColor": {
                  "type": [
                    "Color"
                  ],
                  "descriptionCN": "<p>border color of visualMap component.</p>\n",
                  "default": "'#ccc'"
                },
                "borderWidth": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>border width of visualMap component, with unit: px.</p>\n",
                  "default": 0
                },
                "color": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>This property is remained only for compatibility with ECharts2, and is not recommended in ECharts3. It is recommended to configure color in <a href=\"#visualMap-piecewise.inRange\">visualMap-piecewise.inRange</a>, or <a href=\"#visualMap-piecewise.outOfRange\">visualMap-piecewise.outOfRange</a> if needed.</p>\n<p>If you persist in using it, the following issue should be noticed: the sequence of dataValues that are mapped to colorValues in property <code>color</code> is from <code>large</code> to <code>small</code>, whereas that in <a href=\"#visualMap-piecewise.inRange\">visualMap-piecewise.inRange</a> or <a href=\"#visualMap-piecewise.outOfRange\">visualMap-piecewise.outOfRange</a> is from <code>small</code> to <code>large</code>.</p>\n",
                  "default": "['#bf444c', '#d88273', '#f6efa6']"
                },
                "textStyle\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "",
                  "properties": {
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>visualMap text color.</p>\n",
                      "default": "#333"
                    },
                    "fontStyle": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>visualMap Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                      "default": "'normal'"
                    },
                    "fontWeight": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>visualMap Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                      "default": "normal"
                    },
                    "fontFamily": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>visualMap Font series</p>\n",
                      "default": "'sans-serief'"
                    },
                    "fontSize": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>visualMap Font size</p>\n",
                      "default": 12
                    }
                  }
                },
                "formatter": {
                  "type": [
                    "string",
                    "Function"
                  ],
                  "descriptionCN": "<p>the formatter tool for label.</p>\n<ul>\n<li><p>If it was set as a <code>string</code>, it refers to a template, for instance: <code>aaaa{value}bbbb{value2}</code>, where <code>{value}</code> and <code>{value2}</code> represents the current seleted range of dataValues.</p>\n</li>\n<li><p>If it was set as a <code>Function</code>, it refers to a callback function, for instance:</p>\n</li>\n</ul>\n<pre><code class=\"lang-javascript\">formatter: function (value, value2) {\n    return &#39;aaaa&#39; + value + &#39;bbbb&#39; + value2;\n}\n</code></pre>\n"
                }
              }
            }
          ]
        },
        "descriptionCN": "<p><code>visualMap</code> is a type of component for visual encoding, which maps the data to visual channels, including:</p>\n<ul>\n<li><code>symbol</code>: The type (or shape) of graphical elements.</li>\n<li><code>symbolSize</code>: The size of a graphical elements.</li>\n<li><code>color</code>: The color of a graphical elements.</li>\n<li><code>colorAlpha</code>: The transparency of a single <code>color</code>.</li>\n<li><code>opacity</code>: The transparency of both a graphical element and its attachments (like label).</li>\n<li><code>colorLightness</code>: The lightness in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorSaturation</code>: The saturation in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n<li><code>colorHue</code>: The hue in <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" target=\"_blank\">HSL</a> of a <code>color</code>.</li>\n</ul>\n<p>Myltiple <code>visualMap</code> component could be defined in a chart instance, which enable that different dimensions of a series data are mapped to different visual channels.</p>\n<p><code>visualMap</code> could be defined as <a href=\"#visualMap-piecewise\">Piecewise (visualMapPiecewise)</a> or <a href=\"#visualMap-continuous\">Continuous (visualMapContinuous)</a>, which is distinguished by the property <code>type</code>. For instance:</p>\n<pre><code class=\"lang-javascript\">option = {\n    visualMap: [\n        { // the first visualMap component\n            type: &#39;continuous&#39;, // defined to be continuous viusalMap\n            ...\n        },\n        { // the sencond visualMap component\n            type: &#39;piecewise&#39;, // defined to be piecewise visualMap\n            ...\n        }\n    ],\n    ...\n};\n</code></pre>\n<p><br>\n<strong>✦ Configure how to map ✦</strong></p>\n<p>The dimension of <a href=\"#series.data\">series.data</a> can be specified by <a href=\"#visualMap.dimension\">visualMap.dimension</a>, from which the value can be retrieved and mapped onto visual channels, which can be defined in <a href=\"#visualMap.inRange\">visualMap.inRange</a> and <a href=\"#visualMap.outOfRange\">visualMap.outOfRange</a>.</p>\n<p><br>\n<strong>✦ The relationship between visualMap of ECharts3 and dataRange of ECharts2 ✦</strong></p>\n<p><code>visualMap</code> is renamed from the <code>dataRange</code> of ECharts2, and the scope of functionalities are extended a lot. The configurations of <code>dataRange</code> are still compatible in ECharts3, which automatically convert them to <code>visualMap</code>. It is recommended to use <code>visualMap</code> instead of <code>dataRange</code> in ECharts3.</p>\n<p><br>\n<strong>✦ The detailed configurations of visualMap are elaborated as follows. ✦</strong></p>\n<p><br>\n<br></p>\n"
      },
      "tooltip": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>Tooltip component.</p>\n",
        "properties": {
          "show": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Whether to show the tooltip component, including tooltip floating layer and <a href=\"#tooltip.axisPointer\">axisPointer</a>.</p>\n",
            "default": true
          },
          "showContent": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Whether to show the tooltip floating layer which defaults to be shown.It should be configurated with <code>false</code>, if you only need tooltip to trigger the event or show the axisPointer without content. </p>\n",
            "default": true
          },
          "trigger": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Type of triggering.</p>\n<p>Options: </p>\n<ul>\n<li><p><code>&#39;item&#39;</code></p>\n<p>  Data item figure triggring, which is mainly used in non-category axis diagram such as scatter diagram and pie chart. </p>\n</li>\n<li><p><code>&#39;axis&#39;</code></p>\n<p>  Axis triggering which is mainly used in diagrams with category axis such as bar graph and broken line graph. </p>\n<p> ECharts 2.x only adopts axis triggering in category axis. While in ECharts 3, axis triggering is valid in all axes of <a href=\"#grid\">rectangular coordinate</a> and <a href=\"#polar\">polar coordinate</a>. What&#39;s more, the coordinate axis could be assigned through  <a href=\"#tooltip.axisPointer.axis\">axisPointer.axis</a>. </p>\n</li>\n</ul>\n",
            "default": "'item'"
          },
          "triggerOn": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The conditions for tooltip triggering. Options: </p>\n<ul>\n<li><p><code>&#39;mousemove&#39;</code></p>\n<p>  Trigger when mouse moves.</p>\n</li>\n<li><p><code>&#39;click&#39;</code></p>\n<p>  Trigger when mouse click.</p>\n</li>\n</ul>\n<p>This attribute is newly added to ECharts 3.0.</p>\n",
            "default": "'mousemove'"
          },
          "alwaysShowContent": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Whether to show the content of tooltip permanently. Under default condition, when it is moved out of the the tooltip area<a href=\"#tooltip.hideDelay\">during specific period</a> which could be triggered, the content would be hidden. It could be set up as <code>true</code> to guarantee that the content of tooltip always show.  </p>\n<p>This attribute is newly added to ECharts 3.0.</p>\n",
            "default": false
          },
          "hideDelay": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The hide-delay of floating layer. Its unit is ms. When <a href=\"#tooltip.alwaysShowContent\">alwaysShowContent</a> is set as <code>true</code>, it is invalid. </p>\n",
            "default": 100
          },
          "enterable": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Whether mouse could be allowed to the floating layer of tooltip, which defaults to be false. If the interaction in details is needed, such as adding a link or button, it could be set as <code>true</code>.</p>\n",
            "default": true
          },
          "position": {
            "type": [
              "string",
              "Array"
            ],
            "descriptionCN": "<p>The position of the tooltip&#39;s floating layer, which would follow the position of mouse when it defaults to have no setting.</p>\n<p>Options: </p>\n<ul>\n<li><p><code>Array</code></p>\n<p>  Display the position of tooltip&#39;s floating layer through array, which is valid when number is set with absolute position and the percentage is set with relative position. </p>\n<p>  Example:</p>\n<pre><code class=\"lang-js\">  // absolute position, which is 10px to the left side and 10px to the upward side of the container\n  position: [10, 10]\n  // relative position, in the exact center of the container\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p><code>&#39;inside&#39;</code></p>\n<p> The center inside the figure in which the mouse locates, which is only valid when <a href=\"#tooltip.trigger\">trigger</a> is <code>&#39;item&#39;</code>.</p>\n</li>\n<li><p><code>&#39;top&#39;</code></p>\n<p>  The top of the figure in which the mouse locates, which is only valid when <a href=\"#tooltip.trigger\">trigger</a> is <code>&#39;item&#39;</code>.</p>\n</li>\n<li><p><code>&#39;left&#39;</code></p>\n<p>  The left of the figure in which the mouse locates, which is only valid when <a href=\"#tooltip.trigger\">trigger</a> is <code>&#39;item&#39;</code>.</p>\n</li>\n<li><p><code>&#39;right&#39;</code></p>\n<p>  The right of the figure in which the mouse locates, which is only valid when <a href=\"#tooltip.trigger\">trigger</a> is <code>&#39;item&#39;</code>.</p>\n</li>\n<li><p><code>&#39;bottom&#39;</code></p>\n<p>  The bottom of the figure in which the mouse locates, which is only valid when <a href=\"#tooltip.trigger\">trigger</a> is <code>&#39;item&#39;</code>.</p>\n</li>\n</ul>\n"
          },
          "transitionDuration": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The transition duration of motion in tooltip&#39;s floating layer. Its unit is s. When it is set as 0, it would move closely with the mouse.</p>\n",
            "default": 0.4
          },
          "formatter": {
            "type": [
              "string",
              "Function"
            ],
            "descriptionCN": "<p>The content formatter of tooltip&#39;s floating layer which supports character string template and callback function.</p>\n<ol>\n<li><p>character string template</p>\n<p> The template variables are <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code> and <code>{e}</code> which individually refers to series name, data name and numberical value and ect.. </p>\n<p> When <a href=\"#tooltip.trigger\">trigger</a> is <code>&#39;axis&#39;</code>, there would be multiple series of data. At this point, the index of these series could be expressed by the method of adding the index backward, such as <code>{a0}</code>, <code>{a1}</code>, <code>{a2}</code>.\n In differnt types of diagrams, the meanings of <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code> are different.\n In different types of diagrams, the meanings of the variables including <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code> represent the data meaning below: </p>\n<ul>\n<li><p>broken line (area) diagram、bar (bar type) diagram、K-line diagram : <code>{a}</code> (series name), <code>{b}</code> (category value), <code>{c}</code> (numerical value), <code>{d}</code> (none) </p>\n</li>\n<li><p>scatter diagram (bubble) diagram : <code>{a}</code> (series name), <code>{b}</code> (data name), <code>{c}</code> (numerical value array), <code>{d}</code> (none) </p>\n</li>\n<li><p>map : <code>{a}</code> (series name), <code>{b}</code> (area name), <code>{c}</code> (merge numerical value), <code>{d}</code> (none) </p>\n</li>\n<li><p>pie chart、instrument panel、funnel plot: <code>{a}</code> (series name), <code>{b}</code> (data item name), <code>{c}</code> (numerical value), <code>{d}</code> (percentage) </p>\n</li>\n</ul>\n<p>See more meanings about other variables of diagram template in label.normal.formatter configuration item in corresponding diagram. </p>\n<p> <strong>sample: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b0}: {c0}&lt;br /&gt;{b1}: {c1}&#39;\n</code></pre>\n</li>\n<li><p>callback function</p>\n<p> The format of callback function:</p>\n<pre><code class=\"lang-js\"> (params: Object|Array, ticket: string, callback: (ticket: string, html: string)) =&gt; string\n</code></pre>\n<p> The first parameter <code>params</code> is the data set the formatter needs. Its format is shown as follows: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n     // the percentage of pie chart\n     percent: number,\n\n }\n</code></pre>\n<p> When <a href=\"#tooltip.trigger\">trigger</a> is <code>&#39;axis&#39;</code> , <code>params</code> is the data array of multiple series.</p>\n<p> <strong>Note: </strong>Using array to express all the parameters in ECharts 2.x is not supported anymore.</p>\n<p> The second parameter <code>ticket</code> is the asynchronous callback identity which should coordinate with the third parameter <code>callback</code> when it is used. </p>\n<p> The third parameter <code>callback</code> is asynchronous callback. When the content of tooltip&#39;s floating layer is acquired asynchronously, you can introduce the mentioned <code>ticket</code> and <code>html</code> to update the content of tooltip&#39;s floating layer.</p>\n<p> Sample: </p>\n<pre><code class=\"lang-js\"> formatter: function (params, ticket, callback) {\n     $.get(&#39;detail?name=&#39; + params.name, function (content) {\n         callback(ticket, toHTML(content));\n     });\n     return &#39;Loading&#39;;\n }\n</code></pre>\n</li>\n</ol>\n"
          },
          "backgroundColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>The background color of tooltip&#39;s floating layer.</p>\n",
            "default": "'rgba(50,50,50,0.7)'"
          },
          "borderColor": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>The border color of tooltip&#39;s floating layer.</p>\n",
            "default": "'#333'"
          },
          "borderWidth": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The border width of tooltip&#39;s floating layer.</p>\n",
            "default": 0
          },
          "padding": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The floating layer of tooltip internal margin, unit as px,set internal margin of each directions to 5 by default, set the internal margin of four directions of accepting array.</p>\n<p>Examples: </p>\n<pre><code class=\"lang-js\">// Set internal margin to 5\npadding: 5\n// Set the upper and lower margins to 5, left and right margins to 10\npadding: [5, 10]\n// Set each of the four margins as the followings\npadding: [\n    5,  // up\n    10, // right\n    5,  // down\n    10, // left\n]\n</code></pre>\n",
            "default": 5
          },
          "textStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The text syle of tooltip&#39;s floating layer.</p>\n",
            "properties": {
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>text color.</p>\n",
                "default": "'#fff'"
              },
              "fontStyle": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                "default": "'normal'"
              },
              "fontWeight": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                "default": "normal"
              },
              "fontFamily": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>Font series</p>\n",
                "default": "'sans-serief'"
              },
              "fontSize": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>Font size</p>\n",
                "default": 14
              }
            }
          },
          "axisPointer": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The indicator configuration item of coordinate axis, which is valid when <a href=\"#tooltip.trigger\">trigger</a> is <code>&#39;axis&#39;</code>.</p>\n",
            "properties": {
              "type": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the type of indicator.</p>\n<p>Options:</p>\n<ul>\n<li><p><code>&#39;line&#39;</code> line indicator</p>\n</li>\n<li><p><code>&#39;cross&#39;</code>  crosshair indicator</p>\n</li>\n<li><p><code>&#39;shadow&#39;</code> shadow  crosshair</p>\n</li>\n</ul>\n",
                "default": "'line'"
              },
              "axis": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>The coordinate axis, which could be <code>&#39;x&#39;</code>, <code>&#39;y&#39;</code>, <code>&#39;radius&#39;</code>, <code>&#39;angle&#39;</code> and defaults to adopt category axis and time axis.</p>\n",
                "default": "'auto'"
              },
              "animation": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                "default": true
              },
              "animationDuration": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The initial length of the animation.</p>\n",
                "default": 1000
              },
              "animationEasing": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                "default": "cubicOut"
              },
              "animationDurationUpdate": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>Data update animation duration.</p>\n",
                "default": 300
              },
              "animationEasingUpdate": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                "default": "cubicOut"
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>It is valid when <a href=\"#tooltip.axisPointer.type\">axisPointer.type</a> is <code>&#39;line&#39;</code>.</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "#555"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>line width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "solid"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              },
              "crossStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>It is valid when <a href=\"#tooltip.axisPointer.type\">axisPointer.type</a> is <code>&#39;cross&#39;</code>.</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "#555"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>line width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "dashed"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  },
                  "textStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>The text style of crosshair.</p>\n",
                    "properties": {
                      "color": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>text color.</p>\n",
                        "default": "\"#fff\""
                      },
                      "fontStyle": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                        "default": "'normal'"
                      },
                      "fontWeight": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                        "default": "normal"
                      },
                      "fontFamily": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font series</p>\n",
                        "default": "'sans-serief'"
                      },
                      "fontSize": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Font size</p>\n",
                        "default": 12
                      }
                    }
                  }
                }
              },
              "shadowStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>It is valid when <a href=\"#tooltip.axisPointer.type\">axisPointer.type</a> is <code>&#39;shadow&#39;</code>.</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Fill color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'rgba(150,150,150,0.3)"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          }
        }
      },
      "toolbox": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>toolbox. It is internally installed with 5 tools including <a href=\"#toolbox.feature.saveAsImage\">export pictures</a>, <a href=\"#toolbox.feature.dataView\">data view</a>, <a href=\"#toolbox.feature.magicType\">dynamic type switching</a>, <a href=\"#toolbox.feature.dataZoom\">data area zooming</a> and <a href=\"#toolbox.feature.reset\">reset</a>.</p>\n<p><strong>Example: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=line-marker&reset=1&edit=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n",
        "properties": {
          "show": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Whether to show tool box component.</p>\n",
            "default": true
          },
          "orient": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The layout orientation of tool box&#39;s icon.</p>\n<p>Options: </p>\n<ul>\n<li>&#39;horizontal&#39;</li>\n<li>&#39;vertical&#39;</li>\n</ul>\n",
            "default": "'horizontal'"
          },
          "itemSize": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The size of tool box&#39;s icon.</p>\n",
            "default": 15
          },
          "itemGap": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The gap between each icon of tool box. There is horizontal gap in horizontal layout, while vertical gap in vertical layout.</p>\n",
            "default": 10
          },
          "showTitle": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Whether to show the title of each tool icon when mouse hovers.</p>\n",
            "default": true
          },
          "feature": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The configuration item of each tool.</p>\n<p>Besides all the internally installed tool buttons, tool button still can be user-defined. </p>\n<p>Notes: the user-defined tool name could only starts with  <code>my</code>. See the <code>myTool1</code> and <code>myTool2</code> in the below example: </p>\n<pre><code class=\"lang-javascript\">{\n    toolbox: {\n        feature: {\n            myTool1: {\n                show: true,\n                title: &#39;custom extension method 1&#39;,\n                icon: &#39;path://M432.45,595.444c0,2.177-4.661,6.82-11.305,6.82c-6.475,0-11.306-4.567-11.306-6.82s4.852-6.812,11.306-6.812C427.841,588.632,432.452,593.191,432.45,595.444L432.45,595.444z M421.155,589.876c-3.009,0-5.448,2.495-5.448,5.572s2.439,5.572,5.448,5.572c3.01,0,5.449-2.495,5.449-5.572C426.604,592.371,424.165,589.876,421.155,589.876L421.155,589.876z M421.146,591.891c-1.916,0-3.47,1.589-3.47,3.549c0,1.959,1.554,3.548,3.47,3.548s3.469-1.589,3.469-3.548C424.614,593.479,423.062,591.891,421.146,591.891L421.146,591.891zM421.146,591.891&#39;,\n                onclick: function (){\n                    alert(&#39;myToolHandler1&#39;)\n                }\n            },\n            myTool2: {\n                show: true,\n                title: &#39;custom extension method&#39;,\n                icon: &#39;image://http://echarts.baidu.com/images/favicon.png&#39;,\n                onclick: function (){\n                    alert(&#39;myToolHandler2&#39;)\n                }\n            }\n        }\n    }\n}\n</code></pre>\n",
            "properties": {
              "saveAsImage": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>save as image.</p>\n",
                "properties": {
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>the format of saved image, which supports<code>&#39;png&#39;</code> and <code>&#39;jpeg&#39;</code>.</p>\n",
                    "default": "'png'"
                  },
                  "name": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>the name of saved document, which defaults to use <a href=\"#title.text\">title.text</a>.</p>\n"
                  },
                  "backgroundColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>the background color of saved image, which defaults to use <a href=\"#backgroundColor\">backgroundColor</a>. If <code>backgroundColor</code> doesn&#39;t exist, it defaults to adopt white color.</p>\n",
                    "default": "'auto'"
                  },
                  "excludeComponents": {
                    "type": [
                      "Array"
                    ],
                    "descriptionCN": "<p>The component list ignored during saving as image, which defaults to ignore tool box.</p>\n",
                    "default": "['toolbox']"
                  },
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Whether to show the tool.</p>\n",
                    "default": true
                  },
                  "title": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "",
                    "default": "'save as image'"
                  },
                  "icon\r": {
                    "type": [
                      "*"
                    ],
                    "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                  },
                  "iconStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>The style setting of save as image icon.</p>\n",
                    "properties": {
                      "normal": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "#666"
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 1
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      },
                      "emphasis": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "\"#000\""
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 0
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      }
                    }
                  },
                  "pixelRatio": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>The resolution ratio of saving as image, which defaults to be the same with the container. If the image is necessary to be saved with higher  resolution ratio,  a value greater than 1 could be set up, such as 2.</p>\n",
                    "default": 1
                  }
                }
              },
              "restore": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>Restore configuration item.</p>\n",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Whether to show the tool.</p>\n",
                    "default": true
                  },
                  "title": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "",
                    "default": "'restore'"
                  },
                  "icon\r": {
                    "type": [
                      "*"
                    ],
                    "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                  },
                  "iconStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>The style setting of restore icon.</p>\n",
                    "properties": {
                      "normal": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "#666"
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 1
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      },
                      "emphasis": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "\"#000\""
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 0
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "dataView": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>data view tool, which could display adopted data in current diagram and updates after being edited.</p>\n",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Whether to show the tool.</p>\n",
                    "default": true
                  },
                  "title": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "",
                    "default": "'data view'"
                  },
                  "icon\r": {
                    "type": [
                      "*"
                    ],
                    "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                  },
                  "iconStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>The style setting of data view icon.</p>\n",
                    "properties": {
                      "normal": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "#666"
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 1
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      },
                      "emphasis": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "\"#000\""
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 0
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      }
                    }
                  },
                  "readOnly": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Whether it couldn&#39;t be edited (read-only). </p>\n",
                    "default": false
                  },
                  "lang": {
                    "type": [
                      "Array"
                    ],
                    "descriptionCN": "<p>There are 3 langs in data view, which defaults to be <code>[&#39;data view&#39;, &#39;turn off&#39; and &#39;refresh&#39;]</code>.</p>\n",
                    "default": "['data view', 'turn off', 'refresh']"
                  },
                  "backgroundColor": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>The background color of the floating layer in data view.</p>\n",
                    "default": "'#fff'"
                  },
                  "textareaColor": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>The background color of input area of the floating layer in data view.</p>\n",
                    "default": "'#fff'"
                  },
                  "textareaBorderColor": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>The border color of input area of the floating layer in data view.</p>\n",
                    "default": "'#333'"
                  },
                  "textColor": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>text color.</p>\n",
                    "default": "'#000'"
                  },
                  "buttonColor": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>button color.</p>\n",
                    "default": "'#c23531'"
                  },
                  "buttonTextColor": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>the color of button text.</p>\n",
                    "default": "'#fff'"
                  }
                }
              },
              "dataZoom": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>data area zooming, which only supports rectangular coordinate axis zooming at present.</p>\n",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Whether to show the tool.</p>\n",
                    "default": true
                  },
                  "title": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>Restored and zoomed title text.</p>\n",
                    "properties": {
                      "zoom": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "",
                        "default": "'area zooming'"
                      },
                      "back": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "",
                        "default": "'restore area zooming'"
                      }
                    }
                  },
                  "icon\r": {
                    "type": [
                      "*"
                    ],
                    "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                  },
                  "iconStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>The style setting of data area zooming icon.</p>\n",
                    "properties": {
                      "normal": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "#666"
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 1
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      },
                      "emphasis": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "\"#000\""
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 0
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      }
                    }
                  },
                  "xAxisIndex": {
                    "type": [
                      "number",
                      "Array",
                      "boolean"
                    ],
                    "descriptionCN": "<p>Assign which <a href=\"#xAxis\">xAxis</a> should be controlled. With default setting, it controls all x axis. If it was set as <code>false</code>, it would not control any x axis. If it was set as 3, it would control the x axes of which the axisIndex is set as <code>3</code>. If it was set as <code>[0, 3]</code>, it would control the x axes of which the axisIndex is set as <code>0</code> and <code>3</code>.  </p>\n"
                  },
                  "yAxisIndex": {
                    "type": [
                      "number",
                      "Array",
                      "boolean"
                    ],
                    "descriptionCN": "<p>Assign which <a href=\"#yAxis\">yAxis</a> should be controlled. With default setting, it controls all y axis. If it was set as <code>false</code>, it would not control any y axis. If it was set as 3, it would control the y axes of which the axisIndex is set as <code>3</code>. If it was set as <code>[0, 3]</code>, it would control the y axes of which the axisIndex is set as <code>0</code> and <code>3</code>.  </p>\n"
                  },
                  "icon": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>Restored and zoomed icon path.</p>\n",
                    "properties": {
                      "zoom": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                      },
                      "back": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                      }
                    }
                  }
                }
              },
              "magicType": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>magic type switching\n<strong>示例: </strong></p>\n<pre><code class=\"lang-js\">feature: {\n    magicType: {\n        type: [&#39;line&#39;, &#39;bar&#39;, &#39;stack&#39;, &#39;tiled&#39;]\n    }\n}\n</code></pre>\n",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Whether to show the tool.</p>\n",
                    "default": true
                  },
                  "type": {
                    "type": [
                      "Array"
                    ],
                    "descriptionCN": "<p>Enabled magic type, including <code>&#39;line&#39;</code> (switch to broken line chart), <code>&#39;bar&#39;</code> (switch to bar chart), <code>&#39;stack&#39;</code> (switch to stack mode), <code>&#39;tiled&#39;</code> (switch to tiled mode).</p>\n"
                  },
                  "title": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>the different types of title text , which could be configurated individually.</p>\n",
                    "properties": {
                      "line": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "",
                        "default": "'switch to broken line chart'"
                      },
                      "bar": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "",
                        "default": "'switch to bar chart'"
                      },
                      "stack": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "",
                        "default": "'switch to stack mode'"
                      },
                      "tiled": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "",
                        "default": "'switch to tiled mode'"
                      }
                    }
                  },
                  "icon\r": {
                    "type": [
                      "*"
                    ],
                    "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                  },
                  "iconStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>The style setting of magic type switching icon.</p>\n",
                    "properties": {
                      "normal": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "#666"
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 1
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      },
                      "emphasis": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "self-adaptive"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "\"#000\""
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                            "default": 0
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          }
                        }
                      }
                    }
                  },
                  "icon": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>the different types of icon path , which could be configurated individually.</p>\n",
                    "properties": {
                      "line": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                      },
                      "bar": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                      },
                      "stack": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                      },
                      "tiled": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>The character string of Icon&#39;s path. In ECharts 3, the user-difined svg path is supported to be use as icon, the format of which could be refered to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. It could be edited and exported from some tools such as Adobe Illustrator.</p>\n"
                      }
                    }
                  },
                  "option": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>Different types of exclusicve configuration item. The relevant configuration items would be combined during switching to a specific type.  </p>\n",
                    "properties": {
                      "line": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": ""
                      },
                      "bar": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": ""
                      },
                      "stack": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": ""
                      },
                      "tiled": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": ""
                      }
                    }
                  },
                  "seriesIndex": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>The series lists with which each type corresponds with.</p>\n",
                    "properties": {
                      "line": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": ""
                      },
                      "bar": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": ""
                      },
                      "stack": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": ""
                      },
                      "tiled": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": ""
                      }
                    }
                  }
                }
              }
            }
          },
          "iconStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The normal style setting of icon.</p>\n",
            "properties": {
              "normal": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "self-adaptive"
                  },
                  "borderColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                    "default": "#666"
                  },
                  "borderWidth": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                    "default": 1
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              },
              "emphasis": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "self-adaptive"
                  },
                  "borderColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                    "default": "\"#000\""
                  },
                  "borderWidth": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                    "default": 0
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "zlevel": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
            "default": 0
          },
          "z": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
            "default": 2
          },
          "left": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>tool box distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "top": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>tool box distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "right": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>tool box distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "bottom": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>tool box distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "width": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>tool box width of component.self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "height": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>tool box height of component.self-adaptive by default.</p>\n",
            "default": "'auto'"
          }
        }
      },
      "geo": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>geographic coorinate system component.</p>\n<p>geographic coorinate system component is applied in map drawing, which is valid in geographic coorinate system <a href=\"#series-scatter\">scatter diagram</a>, <a href=\"#series-lines\">line serise</a>. </p>\n<p><strong>Example about the application of scatter diagram in geographic coordinate:</strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=scatter-map&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n",
        "properties": {
          "show": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Specify whether to show the geographic coorinate system component.</p>\n",
            "default": true
          },
          "map": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Types of maps.</p>\n<p>Because the accuracy of maps in ECharts 3 have been improved, the map data for enlarging javascript volume would not been internally installed anymore, you can download the map docs you need from <a href=\"http://ecomfe.github.io/echarts-builder-web/map3.html\" target=\"_blank\">Map download page</a> and then import and register them in ECharts. </p>\n<p>2 formats of map data are provided in ECharts, the one is js document which could directly improt script label and then automatically register the map name and data; the other is JSON document which need to be registered manually after being async-loaded by jquery.</p>\n<p>There are practical examples of these 2 types: </p>\n<p><strong> JavaScript importing example </strong></p>\n<pre><code class=\"lang-html\">&lt;script src=&quot;echarts.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;map/js/china.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\nvar chart = echarts.init(document.getElmentById(&#39;main&#39;));\nchart.setOption({\n    series: [{\n        type: &#39;map&#39;,\n        map: &#39;china&#39;\n    }]\n});\n&lt;/script&gt;\n</code></pre>\n<p><strong> JSON importing example </strong></p>\n<pre><code class=\"lang-js\">$.get(&#39;map/json/china.json&#39;, function (chinaJson) {\n    echarts.registerMap(&#39;china&#39;, chinaJson);\n    var chart = echarts.init(document.getElmentById(&#39;main&#39;));\n    chart.setOption({\n        series: [{\n            type: &#39;map&#39;,\n            map: &#39;china&#39;\n        }]\n    });\n});\n</code></pre>\n<p>ECharts uses <a href=\"http://geojson.org/\" target=\"_blank\">geoJSON</a> format as map outline. Except for the above-mentioned data, you can also gain  <a href=\"http://geojson.org/\" target=\"_blank\">geoJSON</a> data through other methods and register it in ECharts. Reference to <a href=\"http://echarts.baidu.com/gallery/editor.html?c=map-usa\" target=\"_blank\">USA Population Estimates</a></p>\n",
            "default": "''"
          },
          "roam": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>whether to enable mouse zooming and translation roaming. Disenable by default. If one wants to enable zooming or translation, can set to <code>&#39;scale&#39;</code> or <code>&#39;move&#39;</code>. Set to <code>true</code> to enable all.</p>\n",
            "default": false
          },
          "nameMap": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>Name map with custom region, for instance: </p>\n<pre><code class=\"lang-js\">{\n    &#39;China&#39; : &#39;China&#39;\n}\n</code></pre>\n"
          },
          "label": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>text label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
            "properties": {
              "normal": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Specify whether to show label in usual status.</p>\n",
                    "default": false
                  },
                  "textStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>The label style in usual status.</p>\n",
                    "properties": {
                      "color": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>text color.</p>\n",
                        "default": "\"#fff\""
                      },
                      "fontStyle": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                        "default": "'normal'"
                      },
                      "fontWeight": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                        "default": "normal"
                      },
                      "fontFamily": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font series</p>\n",
                        "default": "'sans-serief'"
                      },
                      "fontSize": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Font size</p>\n",
                        "default": 12
                      }
                    }
                  }
                }
              },
              "emphasis": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Specify whether to show label in highlight status.</p>\n",
                    "default": false
                  },
                  "textStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "<p>The label style in highlight status.</p>\n",
                    "properties": {
                      "color": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>text color.</p>\n",
                        "default": "\"#fff\""
                      },
                      "fontStyle": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                        "default": "'normal'"
                      },
                      "fontWeight": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                        "default": "normal"
                      },
                      "fontFamily": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font series</p>\n",
                        "default": "'sans-serief'"
                      },
                      "fontSize": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Font size</p>\n",
                        "default": 12
                      }
                    }
                  }
                }
              }
            }
          },
          "itemStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>polygon in map area graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
            "properties": {
              "normal": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The polygon style in usual status.</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "self-adaptive"
                  },
                  "borderColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                    "default": "\"#000\""
                  },
                  "borderWidth": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                    "default": 0
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              },
              "emphasis": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The polygon style in highlight status.</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "self-adaptive"
                  },
                  "borderColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                    "default": "\"#000\""
                  },
                  "borderWidth": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                    "default": 0
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "zlevel": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
            "default": 0
          },
          "z": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
            "default": 2
          },
          "left": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p> distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "top": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p> distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "right": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p> distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "bottom": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p> distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          }
        }
      },
      "parallel": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p><strong>Introduction of parallel coordinates</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Parallel_coordinates\" target=\"_blank\">parallel coordinates (Parallel Coordinates)</a> is a frequently used data chart of  high-dimensional visualization.</p>\n<p>For example, following data are in <a href=\"#series-parallel.data\">series-parallel.data</a> : </p>\n<pre><code class=\"lang-javascript\">[\n    [1,  55,  9,   56,  0.46,  18,  6,  &#39;good&#39;],\n    [2,  25,  11,  21,  0.65,  34,  9,  &#39;excellent&#39;],\n    [3,  56,  7,   63,  0.3,   14,  5,  &#39;good&#39;],\n    [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n    { // data item can also be Object, therefore special setting of lines can be included.\n        value: [5,  42,  24,  44,  0.76,  40,  16, &#39;excellent&#39;]\n        lineStyle: {...},\n    }\n    ...\n]\n</code></pre>\n<p>In data, every line is a 『data item』, every row belongs to a『dimension』. (like every row of data above means: 『date』,『AQI index』, 『PM2.5』, 『PM10』, 『carbon monoxide value』, 『nitrogen dioxide value』, 『sulfur dioxide value』). </p>\n<p>Parallel coordinate is suited to conduct visualization analysis on multidimensional data. Every dimension (row) corresponds to an axis, every『data item』is a line, going through multiple axes. In this axis, data selection and other operations can be carried out, as following:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/parallel-all&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n\n<p><strong>brief introduction of configuration mode</strong></p>\n<p>basic configurations of <code>option</code> in『parallel coordinates』are as followed: </p>\n<pre><code class=\"lang-javascript\">option = {\n    parallelAxis: [                     // These are definitions of numerous 『axis』\n        {dim: 0, name: schema[0].text}, // Every『axis』has a &#39;dim&#39; attribute, representing dimension number of axis.\n        {dim: 1, name: schema[1].text},\n        {dim: 2, name: schema[2].text},\n        {dim: 3, name: schema[3].text},\n        {dim: 4, name: schema[4].text},\n        {dim: 5, name: schema[5].text},\n        {dim: 6, name: schema[6].text},\n        {dim: 7, name: schema[7].text,\n            type: &#39;category&#39;,           //Axis also support category data \n            data: [&#39;Excellent&#39;, &#39;good&#39;, &#39;light pollution&#39;, &#39;moderate pollution&#39;, &#39;heavy pollution&#39;, &#39;severe pollution&#39;]\n        }\n    ],\n    parallel: {                         // This is the definition of『coordinate』\n        left: &#39;5%&#39;,                     // Location setting of parallel coordinate\n        right: &#39;13%&#39;,\n        bottom: &#39;10%&#39;,\n        top: &#39;20%&#39;,\n        parallelAxisDefault: {          // Public attribute of 『axis』can be set here to aviod repeated writing.\n            type: &#39;value&#39;,\n            nameLocation: &#39;end&#39;,\n            nameGap: 20\n        }\n    },\n    series: [                           // These three series share one parallel coordinate\n        {\n            name: &#39;Beijing&#39;,\n            type: &#39;parallel&#39;,           // The type of this series is &#39;parallel&#39;\n            data: [\n                [1,  55,  9,   56,  0.46,  18,  6,  &#39;good&#39;],\n                [2,  25,  11,  21,  0.65,  34,  9,  &#39;excellent&#39;],\n                ...\n            ]\n        },\n        {\n            name: &#39;Shanghai&#39;,\n            type: &#39;parallel&#39;,\n            data: [\n                [3,  56,  7,   63,  0.3,   14,  5,  &#39;good&#39;],\n                [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n                ...\n            ]\n        },\n        {\n            name: &#39;Guangzhou&#39;,\n            type: &#39;parallel&#39;,\n            data: [\n                [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n                [5,  42,  24,  44,  0.76,  40,  16, &#39;excellent&#39;],\n                ...\n            ]\n        }\n    ]\n};\n</code></pre>\n<p>Three concerned components: <a href=\"#parallel\">parallel</a>、<a href=\"#parallelAxis\">parallelAxis</a>、<a href=\"#series-parallel\">series-parallel</a></p>\n<ul>\n<li><p><a href=\"#parallel\">parallel</a></p>\n<p>  The configuration item of this parallel coordinate is『coordinate』itsel.one series (<code>series</code>) or many series (like 『Beijing』、『Shanghai』、『Guangzhou』in the above picture is a series respectively.) They can share thi『coordinate』</p>\n<p>  The same as other coordinates, multiple coordinates can be created.</p>\n<p>  Location setting is also carried out here.</p>\n</li>\n<li><p><a href=\"#parallelAxis\">parallelAxis</a></p>\n<p>  This is axis configuration of 『coordinate』. Naturally, multiple axes are needed.</p>\n<p>  Among which are attributes of  <a href=\"#parallelAxis.parallelIndex\">parallelAxis.parallelIndex</a>, assigning this『axis』in which『coordinate』. Use the first 『coordinate』by default.</p>\n</li>\n<li><p><a href=\"#series-parallel\">series-parallel</a></p>\n<p>  This is the definition of『series』. Series will be drawn to『coordinate』.</p>\n<p>  Among which are attributes of <a href=\"#series-parallel.parallelIndex\">series-parallel.parallelIndex</a>, assigning usage of which『coordinate』.Use the first 『coordinate』by default.</p>\n</li>\n</ul>\n<p><strong>Configuration note and best practices</strong></p>\n<p>When configure multiple <a href=\"#parallelAxis\">parallelAxis</a>, there are some value share the same attribute, If write them multiple times is complicated, then they could be placed in <a href=\"#parallel.parallelAxisDefault\">parallel.parallelAxisDefault</a>. Before initializing axis, configuration item in <code>parallelAxisDefault</code> will integrate into <a href=\"#parallelAxis\">parallelAxis</a> respectively, and finally form the configuration of axis.</p>\n<p><br>\n<br></p>\n",
        "properties": {
          "zlevel": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
            "default": 0
          },
          "z": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
            "default": 2
          },
          "left": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>parallel  distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "top": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>parallel  distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": 60
          },
          "right": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>parallel  distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
            "default": 80
          },
          "bottom": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>parallel  distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
            "default": 60
          },
          "width": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>parallel  width of component.self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "height": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>parallel  height of component.self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "layout": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>layout modes, optional values are: </p>\n<ul>\n<li><p><code>&#39;horizontal&#39;</code>: horizontally configurate every coordinate axis.</p>\n</li>\n<li><p><code>&#39;vertical&#39;</code>: vertically configurate every coordinate axis.</p>\n</li>\n</ul>\n",
            "default": "'horizontal'"
          },
          "parallelAxisDefault": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>When configure multiple <a href=\"#parallelAxis\">parallelAxis</a>, there are some value share the same attribute, If write them multiple times is complicated, then they could be placed in <a href=\"#parallel.parallelAxisDefault\">parallel.parallelAxisDefault</a>. Before initializing axis, configuration item in <code>parallelAxisDefault</code> will integrate into <a href=\"#parallelAxis\">parallelAxis</a> respectively, and finally form the configuration of axis.</p>\n<p><a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/parallel-all&amp;edit=1&amp;reset=1\" target=\"_blank\">See the sample</a></p>\n<p><br></p>\n",
            "properties": {
              "type": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>Type of axis</p>\n<p>Option: </p>\n<ul>\n<li><p><code>&#39;value&#39;</code>\n  numerical axis, suitable for continuous data.</p>\n</li>\n<li><p><code>&#39;category&#39;</code>\n  category axis, suitable for discrete category data, only can set category data through <a href=\"#parallelAxis.data\">data</a>. </p>\n</li>\n<li><p><code>&#39;time&#39;</code>\n  timeaxis, suitable for continuous time series data, has a feature of time formatting  and a different tick calculation method when compared with numerical axis.For instance, it would decide to adopt month, week, day or hour to be the tick unit in terms of the range of span.  </p>\n</li>\n<li><p><code>&#39;log&#39;</code>\n  log axis,suitable for log data.</p>\n</li>\n</ul>\n",
                "default": "value"
              },
              "name": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>The name of coordinate axis.</p>\n"
              },
              "nameLocation": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>The name&#39;s location of coordinate axis.</p>\n<p><strong>Option: </strong></p>\n<ul>\n<li><code>&#39;start&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;end&#39;</code></li>\n</ul>\n",
                "default": "'start'"
              },
              "nameTextStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The text style of the name for coordinate axis.</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>the name of coordinate axistext color.</p>\n",
                    "default": "\"#fff\""
                  },
                  "fontStyle": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>the name of coordinate axisFont style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                    "default": "'normal'"
                  },
                  "fontWeight": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>the name of coordinate axisFont thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                    "default": "normal"
                  },
                  "fontFamily": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>the name of coordinate axisFont series</p>\n",
                    "default": "'sans-serief'"
                  },
                  "fontSize": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>the name of coordinate axisFont size</p>\n",
                    "default": 12
                  }
                }
              },
              "nameGap": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The distance between the name of coordinate axis and axis line. </p>\n",
                "default": 15
              },
              "inverse": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether it is inverse coordinate axis. New option in ECharts 3. </p>\n",
                "default": false
              },
              "boundaryGap": {
                "type": [
                  "boolean",
                  "Array"
                ],
                "descriptionCN": "<p>The boundary gap on both sides of the coordinate axis. The setting and performance of category axis and non-category axis are different.</p>\n<p>The <code>boundaryGap</code> of category axis can be allocated as <code>true</code> and <code>false</code>, which defauts to be allocated as <code>true</code>.  Meanwhile,  <a href=\"#parallelAxis.axisTick\">axisTick</a>can be used only as splitline. Both the label and data marker exist on the band between 2 <a href=\"#parallelAxis.axisTick\">axis tick</a>. </p>\n<p>non-category axis includes time, numerical value, log axis. <code>boundaryGap</code> is an array consisting of 2 values which individually refer to the span range between the maximun and minimum value. The value and the percentage can be directly set. <code>boundaryGap</code> is not available after the <a href=\"#parallelAxis.min\">min</a> and <a href=\"#parallelAxis.max\">max</a> being set. <strong>example: </strong></p>\n<pre><code class=\"lang-js\">boundaryGap: [&#39;20%&#39;, &#39;20%&#39;]\n</code></pre>\n"
              },
              "min": {
                "type": [
                  "number",
                  "string"
                ],
                "descriptionCN": "<p>The minimun value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMin&#39;</code>. Meanwhile, the minmum value in this axis is fetched as the minmun tick.</p>\n",
                "default": "'auto'"
              },
              "max": {
                "type": [
                  "number",
                  "string"
                ],
                "descriptionCN": "<p>The maximum value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMax&#39;</code>. Meanwhile, the maximum value in this axis is fetched as the maximum tick.</p>\n<p>without a particular setting, the maximum value would be caculated automatically to make sure the uniform distribution of axis ticks.</p>\n",
                "default": "'auto'"
              },
              "scale": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>It is available only in numerical axis (<a href=\"#parallelAxis.type\">type</a>: &#39;value&#39;). </p>\n<p>specify whether to get rid of 0 value porpotion. As it is set as <code>true</code>, the axis tick would not compulsorily contains 0 scale, which is more useful in the scatter diagram of double-numerical axis.</p>\n<p>This configuration item is unavailable as the <a href=\"#parallelAxis.min\">min</a> and <a href=\"#parallelAxis.max\">max</a> are set.</p>\n",
                "default": false
              },
              "splitNumber": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>SplitNumber. It should be noticed that this splitNumber is just a predicted value. The finally displayed split number results from the adjustment based on the readability of axis tick which is shown after being segmented.<br>unavailable in category axis.</p>\n",
                "default": 5
              },
              "interval": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The segmented interval of coordinate axis. </p>\n<p>As <a href=\"#parallelAxis.splitNumber\">splitNumber</a>  is a predicted value, the scale caculated through pratical strategy may not achieve the desired effect. Under such condition, interval can be set with <a href=\"#parallelAxis.min\">min</a>, <a href=\"#parallelAxis.max\">max</a> to compulsorily divide the scale, which is generally not recommended.   </p>\n<p>Unavailable in category axis. The timestamp need to be transmitted in timeaxis (<a href=\"#parallelAxis.type\">type</a>: &#39;time&#39;), and the index value need to be transmitted in logaxis. (<a href=\"#parallelAxis.type\">type</a>: &#39;log&#39;).</p>\n"
              },
              "axisLine": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The related settings about axis line.</p>\n",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>To show the axis line or not.</p>\n",
                    "default": true
                  },
                  "lineStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "",
                    "properties": {
                      "color": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>axisLineline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                        "default": "'#333'"
                      },
                      "width": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>axisLineline width.</p>\n",
                        "default": 1
                      },
                      "type": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>axisLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                        "default": "'solid'"
                      },
                      "shadowBlur": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                      },
                      "shadowColor": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                      },
                      "shadowOffsetX": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                        "default": 0
                      },
                      "shadowOffsetY": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                        "default": 0
                      },
                      "opacity": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                      }
                    }
                  }
                }
              },
              "axisTick": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The related settings about the axis tick </p>\n",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Specify whether to show the axis tick.</p>\n",
                    "default": true
                  },
                  "interval": {
                    "type": [
                      "number",
                      "Function"
                    ],
                    "descriptionCN": "<p>axisTick, available in category axis. defaults to be the same as <a href=\"#parallelAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                    "default": "'auto'"
                  },
                  "inside": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>specify the axis tick are inside oriented. It defauts to be outside oriented.</p>\n",
                    "default": false
                  },
                  "length": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>The length of the axis tick </p>\n",
                    "default": 5
                  },
                  "lineStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "",
                    "properties": {
                      "color": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>axisTickline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                        "default": "'#333'"
                      },
                      "width": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>axisTickline width.</p>\n",
                        "default": 1
                      },
                      "type": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>axisTickline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                        "default": "'solid'"
                      },
                      "shadowBlur": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                      },
                      "shadowColor": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                      },
                      "shadowOffsetX": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                        "default": 0
                      },
                      "shadowOffsetY": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                        "default": 0
                      },
                      "opacity": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                      }
                    }
                  }
                }
              },
              "axisLabel": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>The related settings about the axistick lable</p>\n",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>To show the label of axis tick label or not. </p>\n",
                    "default": true
                  },
                  "interval": {
                    "type": [
                      "number",
                      "Function"
                    ],
                    "descriptionCN": "<p>axisTick label, available in category axis.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                    "default": "'auto'"
                  },
                  "inside": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Specify whether the axisTick label is inside oriented. It defaults to be outside oriented.</p>\n",
                    "default": false
                  },
                  "rotate": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>The rotation angle of the tick label. As the category labels in the category axis cannot be shown completely, you can rotate the tick labels to prevent them from overlapping each other.   </p>\n<p>The rotation angle is from -90 degree to 90 degree.</p>\n",
                    "default": 0
                  },
                  "margin": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>The margin between the tick lable and the axis.</p>\n",
                    "default": 8
                  },
                  "formatter": {
                    "type": [
                      "string",
                      "Function"
                    ],
                    "descriptionCN": "<p>The formatter of axi stick label, supporting both string template and callback fuction.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">//using string template, the template variable is the default label of axistick  {value}\nformatter: &#39;{value} kg&#39;\n\n// using callback function template, function parameters are individually\nformatter: function (value, index) {\n    // formatting to be Month/day, the particular year display only in the first scale\n    var date = new Date(value);\n    var texts = [(date.getMonth() + 1), date.getDate()];\n    if (idx === 0) {\n        texts.unshift(date.getYear());\n    }\n    return texts.join(&#39;/&#39;);\n}\n</code></pre>\n",
                    "default": null
                  },
                  "textStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "",
                    "properties": {
                      "color": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>text color.</p>\n",
                        "default": "'#333'"
                      },
                      "fontStyle": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                        "default": "'normal'"
                      },
                      "fontWeight": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                        "default": "normal"
                      },
                      "fontFamily": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Font series</p>\n",
                        "default": "'sans-serief'"
                      },
                      "fontSize": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Font size</p>\n",
                        "default": 12
                      }
                    }
                  }
                }
              },
              "data": {
                "type": [
                  "Array"
                ],
                "descriptionCN": "<p>Category data, available in category axis (<a href=\"#parallelAxis.type\">type</a>: &#39;category&#39;).</p>\n<p>Example: </p>\n<pre><code class=\"lang-js\">//Name list of all categories\ndata: [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n// Each item could also be a specific configuration item. Under this condition, `value` in the configuration should be adopted as the category name \ndata: [{\n    value: &#39;Monday&#39;,\n    // highlight Monday\n    textStyle: {\n        fontSize: 20,\n        color: &#39;red&#39;\n    }\n}, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n</code></pre>\n",
                "items": {
                  "type": "Object",
                  "properties": {
                    "value": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Single category name</p>\n"
                    },
                    "textStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Text style of the category label.</p>\n",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>text color.</p>\n",
                          "default": "\"#fff\""
                        },
                        "align": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Horizontal Alignment of text, automatic by default.</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;left&#39;</code></li>\n<li><code>&#39;center&#39;</code></li>\n<li><code>&#39;right&#39;</code></li>\n</ul>\n"
                        },
                        "baseline": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Baseline Alignment of text, automatic by default.\nOptions are: </p>\n<ul>\n<li><code>&#39;top&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;bottom&#39;</code></li>\n</ul>\n"
                        },
                        "fontStyle": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                          "default": "'normal'"
                        },
                        "fontWeight": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                          "default": "normal"
                        },
                        "fontFamily": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font series</p>\n",
                          "default": "'sans-serief'"
                        },
                        "fontSize": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Font size</p>\n<p>The display interval of </p>\n",
                          "default": 12
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parallelAxis": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>This component is the coordinate axis in parallel coordinate. </p>\n<p><strong>Introduction of parallel coordinates</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Parallel_coordinates\" target=\"_blank\">parallel coordinates (Parallel Coordinates)</a> is a frequently used data chart of  high-dimensional visualization.</p>\n<p>For example, following data are in <a href=\"#series-parallel.data\">series-parallel.data</a> : </p>\n<pre><code class=\"lang-javascript\">[\n    [1,  55,  9,   56,  0.46,  18,  6,  &#39;good&#39;],\n    [2,  25,  11,  21,  0.65,  34,  9,  &#39;excellent&#39;],\n    [3,  56,  7,   63,  0.3,   14,  5,  &#39;good&#39;],\n    [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n    { // data item can also be Object, therefore special setting of lines can be included.\n        value: [5,  42,  24,  44,  0.76,  40,  16, &#39;excellent&#39;]\n        lineStyle: {...},\n    }\n    ...\n]\n</code></pre>\n<p>In data, every line is a 『data item』, every row belongs to a『dimension』. (like every row of data above means: 『date』,『AQI index』, 『PM2.5』, 『PM10』, 『carbon monoxide value』, 『nitrogen dioxide value』, 『sulfur dioxide value』). </p>\n<p>Parallel coordinate is suited to conduct visualization analysis on multidimensional data. Every dimension (row) corresponds to an axis, every『data item』is a line, going through multiple axes. In this axis, data selection and other operations can be carried out, as following:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/parallel-all&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n\n<p><strong>brief introduction of configuration mode</strong></p>\n<p>basic configurations of <code>option</code> in『parallel coordinates』are as followed: </p>\n<pre><code class=\"lang-javascript\">option = {\n    parallelAxis: [                     // These are definitions of numerous 『axis』\n        {dim: 0, name: schema[0].text}, // Every『axis』has a &#39;dim&#39; attribute, representing dimension number of axis.\n        {dim: 1, name: schema[1].text},\n        {dim: 2, name: schema[2].text},\n        {dim: 3, name: schema[3].text},\n        {dim: 4, name: schema[4].text},\n        {dim: 5, name: schema[5].text},\n        {dim: 6, name: schema[6].text},\n        {dim: 7, name: schema[7].text,\n            type: &#39;category&#39;,           //Axis also support category data \n            data: [&#39;Excellent&#39;, &#39;good&#39;, &#39;light pollution&#39;, &#39;moderate pollution&#39;, &#39;heavy pollution&#39;, &#39;severe pollution&#39;]\n        }\n    ],\n    parallel: {                         // This is the definition of『coordinate』\n        left: &#39;5%&#39;,                     // Location setting of parallel coordinate\n        right: &#39;13%&#39;,\n        bottom: &#39;10%&#39;,\n        top: &#39;20%&#39;,\n        parallelAxisDefault: {          // Public attribute of 『axis』can be set here to aviod repeated writing.\n            type: &#39;value&#39;,\n            nameLocation: &#39;end&#39;,\n            nameGap: 20\n        }\n    },\n    series: [                           // These three series share one parallel coordinate\n        {\n            name: &#39;Beijing&#39;,\n            type: &#39;parallel&#39;,           // The type of this series is &#39;parallel&#39;\n            data: [\n                [1,  55,  9,   56,  0.46,  18,  6,  &#39;good&#39;],\n                [2,  25,  11,  21,  0.65,  34,  9,  &#39;excellent&#39;],\n                ...\n            ]\n        },\n        {\n            name: &#39;Shanghai&#39;,\n            type: &#39;parallel&#39;,\n            data: [\n                [3,  56,  7,   63,  0.3,   14,  5,  &#39;good&#39;],\n                [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n                ...\n            ]\n        },\n        {\n            name: &#39;Guangzhou&#39;,\n            type: &#39;parallel&#39;,\n            data: [\n                [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n                [5,  42,  24,  44,  0.76,  40,  16, &#39;excellent&#39;],\n                ...\n            ]\n        }\n    ]\n};\n</code></pre>\n<p>Three concerned components: <a href=\"#parallel\">parallel</a>、<a href=\"#parallelAxis\">parallelAxis</a>、<a href=\"#series-parallel\">series-parallel</a></p>\n<ul>\n<li><p><a href=\"#parallel\">parallel</a></p>\n<p>  The configuration item of this parallel coordinate is『coordinate』itsel.one series (<code>series</code>) or many series (like 『Beijing』、『Shanghai』、『Guangzhou』in the above picture is a series respectively.) They can share thi『coordinate』</p>\n<p>  The same as other coordinates, multiple coordinates can be created.</p>\n<p>  Location setting is also carried out here.</p>\n</li>\n<li><p><a href=\"#parallelAxis\">parallelAxis</a></p>\n<p>  This is axis configuration of 『coordinate』. Naturally, multiple axes are needed.</p>\n<p>  Among which are attributes of  <a href=\"#parallelAxis.parallelIndex\">parallelAxis.parallelIndex</a>, assigning this『axis』in which『coordinate』. Use the first 『coordinate』by default.</p>\n</li>\n<li><p><a href=\"#series-parallel\">series-parallel</a></p>\n<p>  This is the definition of『series』. Series will be drawn to『coordinate』.</p>\n<p>  Among which are attributes of <a href=\"#series-parallel.parallelIndex\">series-parallel.parallelIndex</a>, assigning usage of which『coordinate』.Use the first 『coordinate』by default.</p>\n</li>\n</ul>\n<p><strong>Configuration note and best practices</strong></p>\n<p>When configure multiple <a href=\"#parallelAxis\">parallelAxis</a>, there are some value share the same attribute, If write them multiple times is complicated, then they could be placed in <a href=\"#parallel.parallelAxisDefault\">parallel.parallelAxisDefault</a>. Before initializing axis, configuration item in <code>parallelAxisDefault</code> will integrate into <a href=\"#parallelAxis\">parallelAxis</a> respectively, and finally form the configuration of axis.</p>\n<p><br>\n<br></p>\n",
        "properties": {
          "dim": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The dimension number of coordinate axis.</p>\n<p>For example, following data are in <a href=\"#series-parallel.data\">series-parallel.data</a> : </p>\n<pre><code class=\"lang-javascript\">[\n    [1,  55,  9,   56,  0.46,  18,  6,  &#39;good&#39;],\n    [2,  25,  11,  21,  0.65,  34,  9,  &#39;excellent&#39;],\n    [3,  56,  7,   63,  0.3,   14,  5,  &#39;good&#39;],\n    [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n    { // data item can also be Object, therefore special setting of lines can be included.\n        value: [5,  42,  24,  44,  0.76,  40,  16, &#39;excellent&#39;]\n        lineStyle: {...},\n    }\n    ...\n]\n</code></pre>\n<p>In data, every line is a 『data item』, every row belongs to a『dimension』. (like every row of data above means: 『date』,『AQI index』, 『PM2.5』, 『PM10』, 『carbon monoxide value』, 『nitrogen dioxide value』, 『sulfur dioxide value』). </p>\n<p><code>dim</code> defines which dimension (which『row』) of data would correspond to this coordinate axis. </p>\n<p>Count from  <code>0</code>. For example, the <code>dim</code> of coordinate axis is <code>1</code>, indicating that the second row of data would correspond to this coordinate axis.</p>\n"
          },
          "parallelIndex": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>It is used to define which 『coordinate』the『coordinate axis』should correspond to.</p>\n<p>For example, there is the following configuration: </p>\n<pre><code class=\"lang-javascript\">myChart.setOption({\n    parallel: [\n        {...},                      // the first parallel coordinate\n        {...}                       //  the second parallel coordinate\n    ],\n    parallelAxis: [\n        {parallelIndex: 1, ...},    // the first coordinate axis, corresponding to the second parallel coordinate\n        {parallelIndex: 0, ...},    //  the second coordinate axis, corresponding to the first parallel coordinate\n        {parallelIndex: 1, ...},    //  the third coordinate axis, corresponding to the second parallel coordinate\n        {parallelIndex: 0, ...}     //  the fourth coordinate axis, corresponding to the first parallel coordinate\n    ],\n    ...\n});\n</code></pre>\n<p>If there is only one parallel coordinate, the setting could be ignored, which defaults to be <code>0</code>.</p>\n",
            "default": 0
          },
          "areaSelectStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>Area selecting is available on coordinate axis. Here is some settings about area selecting.</p>\n<p><br></p>\n",
            "properties": {
              "width": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The width of the range of area selecting.</p>\n",
                "default": 20
              },
              "borderWidth": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The border width of the marquee.</p>\n",
                "default": 1
              },
              "borderColor": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>The border color of the marquee.</p>\n",
                "default": "'rgba(160,197,232)'"
              },
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>The border fill color of the marquee.</p>\n",
                "default": "'rgba(160,197,232)'"
              },
              "opacity": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The transparency of the marquee.</p>\n",
                "default": 0.3
              }
            }
          },
          "type": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Type of axis</p>\n<p>Option: </p>\n<ul>\n<li><p><code>&#39;value&#39;</code>\n  numerical axis, suitable for continuous data.</p>\n</li>\n<li><p><code>&#39;category&#39;</code>\n  category axis, suitable for discrete category data, only can set category data through <a href=\"#parallelAxis.data\">data</a>. </p>\n</li>\n<li><p><code>&#39;time&#39;</code>\n  timeaxis, suitable for continuous time series data, has a feature of time formatting  and a different tick calculation method when compared with numerical axis.For instance, it would decide to adopt month, week, day or hour to be the tick unit in terms of the range of span.  </p>\n</li>\n<li><p><code>&#39;log&#39;</code>\n  log axis,suitable for log data.</p>\n</li>\n</ul>\n",
            "default": "value"
          },
          "name": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The name of coordinate axis.</p>\n"
          },
          "nameLocation": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>The name&#39;s location of coordinate axis.</p>\n<p><strong>Option: </strong></p>\n<ul>\n<li><code>&#39;start&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;end&#39;</code></li>\n</ul>\n",
            "default": "'start'"
          },
          "nameTextStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The text style of the name for coordinate axis.</p>\n",
            "properties": {
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>the name of coordinate axistext color.</p>\n",
                "default": "\"#fff\""
              },
              "fontStyle": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                "default": "'normal'"
              },
              "fontWeight": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                "default": "normal"
              },
              "fontFamily": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont series</p>\n",
                "default": "'sans-serief'"
              },
              "fontSize": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>the name of coordinate axisFont size</p>\n",
                "default": 12
              }
            }
          },
          "nameGap": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The distance between the name of coordinate axis and axis line. </p>\n",
            "default": 15
          },
          "inverse": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Specify whether it is inverse coordinate axis. New option in ECharts 3. </p>\n",
            "default": false
          },
          "boundaryGap": {
            "type": [
              "boolean",
              "Array"
            ],
            "descriptionCN": "<p>The boundary gap on both sides of the coordinate axis. The setting and performance of category axis and non-category axis are different.</p>\n<p>The <code>boundaryGap</code> of category axis can be allocated as <code>true</code> and <code>false</code>, which defauts to be allocated as <code>true</code>.  Meanwhile,  <a href=\"#parallelAxis.axisTick\">axisTick</a>can be used only as splitline. Both the label and data marker exist on the band between 2 <a href=\"#parallelAxis.axisTick\">axis tick</a>. </p>\n<p>non-category axis includes time, numerical value, log axis. <code>boundaryGap</code> is an array consisting of 2 values which individually refer to the span range between the maximun and minimum value. The value and the percentage can be directly set. <code>boundaryGap</code> is not available after the <a href=\"#parallelAxis.min\">min</a> and <a href=\"#parallelAxis.max\">max</a> being set. <strong>example: </strong></p>\n<pre><code class=\"lang-js\">boundaryGap: [&#39;20%&#39;, &#39;20%&#39;]\n</code></pre>\n"
          },
          "min": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The minimun value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMin&#39;</code>. Meanwhile, the minmum value in this axis is fetched as the minmun tick.</p>\n",
            "default": "'auto'"
          },
          "max": {
            "type": [
              "number",
              "string"
            ],
            "descriptionCN": "<p>The maximum value of axistick is unavailable in category axis. </p>\n<p>It can be set as particular value <code>&#39;dataMax&#39;</code>. Meanwhile, the maximum value in this axis is fetched as the maximum tick.</p>\n<p>without a particular setting, the maximum value would be caculated automatically to make sure the uniform distribution of axis ticks.</p>\n",
            "default": "'auto'"
          },
          "scale": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>It is available only in numerical axis (<a href=\"#parallelAxis.type\">type</a>: &#39;value&#39;). </p>\n<p>specify whether to get rid of 0 value porpotion. As it is set as <code>true</code>, the axis tick would not compulsorily contains 0 scale, which is more useful in the scatter diagram of double-numerical axis.</p>\n<p>This configuration item is unavailable as the <a href=\"#parallelAxis.min\">min</a> and <a href=\"#parallelAxis.max\">max</a> are set.</p>\n",
            "default": false
          },
          "splitNumber": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>SplitNumber. It should be noticed that this splitNumber is just a predicted value. The finally displayed split number results from the adjustment based on the readability of axis tick which is shown after being segmented.<br>unavailable in category axis.</p>\n",
            "default": 5
          },
          "interval": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>The segmented interval of coordinate axis. </p>\n<p>As <a href=\"#parallelAxis.splitNumber\">splitNumber</a>  is a predicted value, the scale caculated through pratical strategy may not achieve the desired effect. Under such condition, interval can be set with <a href=\"#parallelAxis.min\">min</a>, <a href=\"#parallelAxis.max\">max</a> to compulsorily divide the scale, which is generally not recommended.   </p>\n<p>Unavailable in category axis. The timestamp need to be transmitted in timeaxis (<a href=\"#parallelAxis.type\">type</a>: &#39;time&#39;), and the index value need to be transmitted in logaxis. (<a href=\"#parallelAxis.type\">type</a>: &#39;log&#39;).</p>\n"
          },
          "axisLine": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about axis line.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the axis line or not.</p>\n",
                "default": true
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisLineline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisLineline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisLineline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisTick": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axis tick </p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether to show the axis tick.</p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick, available in category axis. defaults to be the same as <a href=\"#parallelAxis.axisLabel.interval\">axisLabel.interval</a>.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>specify the axis tick are inside oriented. It defauts to be outside oriented.</p>\n",
                "default": false
              },
              "length": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The length of the axis tick </p>\n",
                "default": 5
              },
              "lineStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>axisTickline color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#333'"
                  },
                  "width": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>axisTickline width.</p>\n",
                    "default": 1
                  },
                  "type": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>axisTickline type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                    "default": "'solid'"
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "axisLabel": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The related settings about the axistick lable</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>To show the label of axis tick label or not. </p>\n",
                "default": true
              },
              "interval": {
                "type": [
                  "number",
                  "Function"
                ],
                "descriptionCN": "<p>axisTick label, available in category axis.</p>\n<p>It defaults to adopt strategic interval to show the labels in case labels repeat, which could be set as 0 to compulsorily display all the labels.</p>\n<p>The interval data not only could be presented by numerical value, but also could be controled through callback function.The format of callback function is shown as follow: </p>\n<pre><code class=\"lang-js\">(index:number, value: string) =&gt; boolean\n</code></pre>\n<p>The first parameter is the index of category, and the second value is the name of the category. If it is skipped, it would be back to <code>false</code>.</p>\n",
                "default": "'auto'"
              },
              "inside": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Specify whether the axisTick label is inside oriented. It defaults to be outside oriented.</p>\n",
                "default": false
              },
              "rotate": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The rotation angle of the tick label. As the category labels in the category axis cannot be shown completely, you can rotate the tick labels to prevent them from overlapping each other.   </p>\n<p>The rotation angle is from -90 degree to 90 degree.</p>\n",
                "default": 0
              },
              "margin": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The margin between the tick lable and the axis.</p>\n",
                "default": 8
              },
              "formatter": {
                "type": [
                  "string",
                  "Function"
                ],
                "descriptionCN": "<p>The formatter of axi stick label, supporting both string template and callback fuction.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">//using string template, the template variable is the default label of axistick  {value}\nformatter: &#39;{value} kg&#39;\n\n// using callback function template, function parameters are individually\nformatter: function (value, index) {\n    // formatting to be Month/day, the particular year display only in the first scale\n    var date = new Date(value);\n    var texts = [(date.getMonth() + 1), date.getDate()];\n    if (idx === 0) {\n        texts.unshift(date.getYear());\n    }\n    return texts.join(&#39;/&#39;);\n}\n</code></pre>\n",
                "default": null
              },
              "textStyle": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>text color.</p>\n",
                    "default": "'#333'"
                  },
                  "fontStyle": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                    "default": "'normal'"
                  },
                  "fontWeight": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                    "default": "normal"
                  },
                  "fontFamily": {
                    "type": [
                      "string"
                    ],
                    "descriptionCN": "<p>Font series</p>\n",
                    "default": "'sans-serief'"
                  },
                  "fontSize": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Font size</p>\n",
                    "default": 12
                  }
                }
              }
            }
          },
          "data": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>Category data, available in category axis (<a href=\"#parallelAxis.type\">type</a>: &#39;category&#39;).</p>\n<p>Example: </p>\n<pre><code class=\"lang-js\">//Name list of all categories\ndata: [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n// Each item could also be a specific configuration item. Under this condition, `value` in the configuration should be adopted as the category name \ndata: [{\n    value: &#39;Monday&#39;,\n    // highlight Monday\n    textStyle: {\n        fontSize: 20,\n        color: &#39;red&#39;\n    }\n}, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]\n</code></pre>\n",
            "items": {
              "type": "Object",
              "properties": {
                "value": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Single category name</p>\n"
                },
                "textStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Text style of the category label.</p>\n",
                  "properties": {
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>text color.</p>\n",
                      "default": "\"#fff\""
                    },
                    "align": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Horizontal Alignment of text, automatic by default.</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;left&#39;</code></li>\n<li><code>&#39;center&#39;</code></li>\n<li><code>&#39;right&#39;</code></li>\n</ul>\n"
                    },
                    "baseline": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Baseline Alignment of text, automatic by default.\nOptions are: </p>\n<ul>\n<li><code>&#39;top&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;bottom&#39;</code></li>\n</ul>\n"
                    },
                    "fontStyle": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                      "default": "'normal'"
                    },
                    "fontWeight": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                      "default": "normal"
                    },
                    "fontFamily": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Font series</p>\n",
                      "default": "'sans-serief'"
                    },
                    "fontSize": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Font size</p>\n<p>The display interval of </p>\n",
                      "default": 12
                    }
                  }
                }
              }
            }
          }
        }
      },
      "timeline": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p><code>timeline</code> component, which provides different operational functions such as switch function between multiple <code>ECharts option</code> and play function.  </p>\n<p>Here is the example: </p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/mix-timeline-all&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n<p>Different from other components, <code>timeline</code> component need to operate 『multiple options』  <code>timeline</code> .\nAssume that a traditional ECharts option was called <code>atom option</code>. When <code>timeline</code> is used, the option which is introduced into ECharts becomes a <code>compound option</code>, a collection of multiple <code>atom option</code>.  As shown in the following example: </p>\n<pre><code class=\"lang-javascript\">// as follows, baseOption is a 『atom option』, and every item in options array is also a 『atom option』.\n// each『atom option』is a type of configuration items described in this document.\nmyChart.setOption(\n    {\n        baseOption: {\n            timeline: {\n                ...,\n                data: [&#39;2002-01-01&#39;, &#39;2003-01-01&#39;, &#39;2004-01-01&#39;]\n            },\n            title: {\n                subtext: &#39; the data is from National Bureau of Statistics &#39;\n            },\n            grid: {...},\n            xAxis: [...],\n            yAxis: [...],\n            series: [\n                { // other configurations of series 1\n                    type: &#39;bar&#39;,\n                    ...\n                },\n                { // other configurations of series 2\n                    type: &#39;line&#39;,\n                    ...\n                },\n                { // other configurations of series 3\n                    type: &#39;pie&#39;,\n                    ...\n                }\n            ]\n        },\n        options: [\n            { // it is an option corresponding to &#39;2002-01-01&#39;\n                title: {\n                text: &#39;the statistics of the year 2002&#39;\n                },\n                series: [\n                    {data: []}, // the data of series 1\n                    {data: []}, // the data of series 2\n                    {data: []}  // the data of series 3\n                ]\n            },\n            { // it is an option corresponding to &#39;2003-01-01&#39;\n                title: {\n                    text: &#39;the statistics of the year 2003&#39;\n                },\n                series: [\n                    {data: []},\n                    {data: []},\n                    {data: []}\n                ]\n            },\n            { // it is an option corresponding to &#39;2004-01-01&#39; \n                title: {\n                    text: &#39;the statistics of the year 2004&#39;\n                },\n                series: [\n                    {data: []},\n                    {data: []},\n                    {data: []}\n                ]\n            }\n        ]\n    }\n);\n</code></pre>\n<p>In the previous examples, every item in <code>timeline.data</code> corresponds to every <code>option</code> of <code>options</code> array. </p>\n<p><br>\n<strong>precautions for use and the best practice: </strong></p>\n<ul>\n<li><p>communal configuration item, which is recommended to be allocated in  <code>baseOption</code>. As <code>timeline</code> switching and playing, the corresponding  <code>option</code> in <code>option</code> array would merge with <code>baseOption</code> to become the final <code>option</code>.</p>\n</li>\n<li><p>In <code>options</code> array, if an array item was allocated with an attribute, every other array item must be allocated with a <code>options</code>, no defaults, or this attribute&#39;s operational effect would be left over. </p>\n</li>\n</ul>\n<p><br>\n<strong>Its compatibility with ECharts2: </strong></p>\n<ul>\n<li><p>ECharts3 doesn&#39;t support timeline.notMerge parameter, which implies notMerge mode would not be supported any more. If this scene was needed, the option management could be conducted outside with a notMerge setting like setOption(option, true). </p>\n</li>\n<li><p>Comparing ECharts3 with ECharts2, the define locations of their timeline attributes are different. The one in ECharts3 is moved to  <code>baseOption</code> and is regarded as a common component, which is also compatible with the timeline difine location of ECharts2. It is just not recommended to be written anymore.  </p>\n</li>\n</ul>\n",
        "properties": {
          "show": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Specify whether to show the <code>timeline</code> component. It would not show under a setting of <code>false</code>, but its function still remains.  </p>\n",
            "default": true
          },
          "type": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>At present, this attribute would be valid only if it is set as <code>slider</code>. It&#39;s unnecessary to change it.  </p>\n",
            "default": "'slider'"
          },
          "axisType": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>types of axis. optional values: </p>\n<ul>\n<li><code>&#39;value&#39;</code>\n  value axis, applied to continuous data.</li>\n<li><p><code>&#39;category&#39;</code>\n  category axis, applied to discrete category data.</p>\n</li>\n<li><p><code>&#39;time&#39;</code>\n  time axis, applied to continuous time. Compared with value axis, time axis is equiped with time formatting series data and calculate the scale differently. For example, for time axis, the span range decide whether month, week or day would be the minimum scale.   </p>\n</li>\n</ul>\n",
            "default": "'time'"
          },
          "currentIndex": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Indicating which is the currently selected item. For instance,if <code>currentIndex</code> is <code>0</code>, it indicates that the currently selected item is <code>timeline.data[0]</code> (namely, using <code>options[0]</code>). </p>\n",
            "default": 0
          },
          "autoPlay": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Specify whether to play automatically.</p>\n",
            "default": false
          },
          "rewind": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Indicates whether to play reversely.</p>\n",
            "default": false
          },
          "loop": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Indicates whether to loop playback.</p>\n",
            "default": true
          },
          "playInterval": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Refers to the play speed(interval between beats ), unit is millisecond(ms)  .</p>\n",
            "default": 2000
          },
          "realtime": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<p>Whether the view updates in real time during dragging a dot. </p>\n",
            "default": "true,"
          },
          "controlPosition": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Refer to the location of『play』buttom. optional values: <code>&#39;left&#39;</code>、<code>&#39;right&#39;</code>. </p>\n",
            "default": "'left'"
          },
          "zlevel": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
            "default": 0
          },
          "z": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
            "default": 2
          },
          "left": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>timeline distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "top": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>timeline distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
            "default": "'auto'"
          },
          "right": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>timeline distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "bottom": {
            "type": [
              "string",
              "number"
            ],
            "descriptionCN": "<p>timeline distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
            "default": "'auto'"
          },
          "padding": {
            "type": [
              "number",
              "Array"
            ],
            "descriptionCN": "<p>timeline internal margin, unit as px,set internal margin of each directions to 5 by default, set the internal margin of four directions of accepting array.</p>\n<p>Examples: </p>\n<pre><code class=\"lang-js\">// Set internal margin to 5\npadding: 5\n// Set the upper and lower margins to 5, left and right margins to 10\npadding: [5, 10]\n// Set each of the four margins as the followings\npadding: [\n    5,  // up\n    10, // right\n    5,  // down\n    10, // left\n]\n</code></pre>\n",
            "default": 5
          },
          "orient": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>format of layout, optional values are: </p>\n<ul>\n<li><code>&#39;vertical&#39;</code>: vertical layout.</li>\n<li><code>&#39;horizontal&#39;</code>: horizontal layout.</li>\n</ul>\n",
            "default": "'horizontal'"
          },
          "inverse": {
            "type": [
              "boolean"
            ],
            "descriptionCN": "<ul>\n<li>Whether to reversely put the <code>timeline</code>, which means put it upside and down.</li>\n</ul>\n",
            "default": false
          },
          "symbol": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>timelineLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
            "default": "'emptyCircle'"
          },
          "symbolSize": {
            "type": [
              "number",
              "Array"
            ],
            "descriptionCN": "<p>timelineLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n",
            "default": 10
          },
          "symbolRotate": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>timelineRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
          },
          "symbolOffset": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p>timelineLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
            "default": "[0, 0]"
          },
          "lineStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Whether to show the axis. It could be set as <code>false</code> to not show the axis. It could also be endowed with various styles.  </p>\n",
                "default": true
              },
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>timeline line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                "default": "'#304654'"
              },
              "width": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>timeline line width.</p>\n",
                "default": 2
              },
              "type": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>timeline line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                "default": "solid"
              },
              "shadowBlur": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
              },
              "shadowColor": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
              },
              "shadowOffsetX": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                "default": 0
              },
              "shadowOffsetY": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                "default": 0
              },
              "opacity": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
              }
            }
          },
          "label": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>There are 2 status text labels of axis, which are <code>normal</code> and <code>emphasis</code>. <code>normal</code> refers to the normal style of text, while <code>emphasis</code> is the highlighted style of text. For instance, <code>emphasis</code> would be adopted as text style for mouse hover and highlighted legend linkage.</p>\n",
            "properties": {
              "position": {
                "type": [
                  "string",
                  "number"
                ],
                "descriptionCN": "<p>the optional methods of configuration:</p>\n<ul>\n<li><p><code>&#39;auto&#39;</code>: \n  completely automatical deciding.</p>\n</li>\n<li><p><code>&#39;left&#39;</code>: \n  Put it along the left margin.\n  It is valid as <a href=\"#timeline.orient\">timline.orient</a> is set as <code>&#39;horizontal&#39;</code> .</p>\n</li>\n<li><p><code>&#39;right&#39;</code>: It is valid as <a href=\"#timeline.orient\">timline.orient</a> is set as <code>&#39;horizontal&#39;</code>.\n  Put it along the right margin.</p>\n</li>\n<li><p><code>&#39;top&#39;</code>: \n  Put it along the margin of the top.</p>\n<p>  It is valid as <a href=\"#timeline.orient\">timline.orient</a> is set as <code>&#39;vertical&#39;</code>.</p>\n</li>\n<li><p><code>&#39;bottom&#39;</code>: \n  Put it along the margin of the bottom.\n  It is valid as <a href=\"#timeline.orient\">timline.orient</a> is set as <code>&#39;vertical&#39;</code>.</p>\n</li>\n<li><p><code>number</code>: \n  When it is assigned with a value, it indicates the distance between  <code>label</code> and axis. If it was <code>0</code> , <code>label</code> would be coincident with axis. It can be both positive and negtive value, deciding on which side of the axis the location of <code>label</code> would be.   </p>\n</li>\n</ul>\n",
                "default": "'auto'"
              },
              "normal": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Whether to show the label.</p>\n",
                    "default": true
                  },
                  "interval": {
                    "type": [
                      "string",
                      "number"
                    ],
                    "descriptionCN": "<p>The interval of <code>label</code>. When it is assigned with a numerical value, such as  <code>2</code>, a label would show every 2 items.</p>\n",
                    "default": "'auto'"
                  },
                  "rotate": {
                    "type": [
                      "prefix"
                    ],
                    "descriptionCN": "<p>the rotation angle of <code>label</code> . Positive values refer to counter clockwise rotation. </p>\n",
                    "default": 0
                  },
                  "formatter": {
                    "type": [
                      "string",
                      "Function"
                    ],
                    "descriptionCN": "<p>The formatter of axi stick label, supporting both string template and callback fuction.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">//using string template, the template variable is the default label of axistick  {value}\nformatter: &#39;{value} kg&#39;\n\n// using callback function template, function parameters are individually\nformatter: function (value, index) {\n    // formatting to be Month/day, the particular year display only in the first scale\n    var date = new Date(value);\n    var texts = [(date.getMonth() + 1), date.getDate()];\n    if (idx === 0) {\n        texts.unshift(date.getYear());\n    }\n    return texts.join(&#39;/&#39;);\n}\n</code></pre>\n",
                    "default": null
                  },
                  "textStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "",
                    "properties": {
                      "color": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>timeline.lable.normaltext color.</p>\n",
                        "default": "'#304654'"
                      },
                      "fontStyle": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>timeline.lable.normalFont style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                        "default": "'normal'"
                      },
                      "fontWeight": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>timeline.lable.normalFont thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                        "default": "normal"
                      },
                      "fontFamily": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>timeline.lable.normalFont series</p>\n",
                        "default": "'sans-serief'"
                      },
                      "fontSize": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>timeline.lable.normalFont size</p>\n",
                        "default": 12
                      }
                    }
                  }
                }
              },
              "emphasis": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "show": {
                    "type": [
                      "boolean"
                    ],
                    "descriptionCN": "<p>Whether to show the label.</p>\n",
                    "default": true
                  },
                  "interval": {
                    "type": [
                      "string",
                      "number"
                    ],
                    "descriptionCN": "<p>The interval of <code>label</code>. When it is assigned with a numerical value, such as  <code>2</code>, a label would show every 2 items.</p>\n",
                    "default": "'auto'"
                  },
                  "rotate": {
                    "type": [
                      "prefix"
                    ],
                    "descriptionCN": "<p>the rotation angle of <code>label</code> . Positive values refer to counter clockwise rotation. </p>\n",
                    "default": 0
                  },
                  "formatter": {
                    "type": [
                      "string",
                      "Function"
                    ],
                    "descriptionCN": "<p>The formatter of axi stick label, supporting both string template and callback fuction.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">//using string template, the template variable is the default label of axistick  {value}\nformatter: &#39;{value} kg&#39;\n\n// using callback function template, function parameters are individually\nformatter: function (value, index) {\n    // formatting to be Month/day, the particular year display only in the first scale\n    var date = new Date(value);\n    var texts = [(date.getMonth() + 1), date.getDate()];\n    if (idx === 0) {\n        texts.unshift(date.getYear());\n    }\n    return texts.join(&#39;/&#39;);\n}\n</code></pre>\n",
                    "default": null
                  },
                  "textStyle": {
                    "type": [
                      "Object"
                    ],
                    "descriptionCN": "",
                    "properties": {
                      "color": {
                        "type": [
                          "Color"
                        ],
                        "descriptionCN": "<p>timeline.lable.emphasistext color.</p>\n",
                        "default": "'#c23531'"
                      },
                      "fontStyle": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>timeline.lable.emphasisFont style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                        "default": "'normal'"
                      },
                      "fontWeight": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>timeline.lable.emphasisFont thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                        "default": "normal"
                      },
                      "fontFamily": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>timeline.lable.emphasisFont series</p>\n",
                        "default": "'sans-serief'"
                      },
                      "fontSize": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>timeline.lable.emphasisFont size</p>\n",
                        "default": 12
                      }
                    }
                  }
                }
              }
            }
          },
          "itemStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>timeline  graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
            "properties": {
              "normal": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>timeline color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#304654'"
                  },
                  "borderColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>timeline  stroke color of graphic. Support the same format as <code>color</code></p>\n",
                    "default": "\"#000\""
                  },
                  "borderWidth": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>timeline Width of stroke. No stroke when it is 0 .</p>\n",
                    "default": 1
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              },
              "emphasis": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>timeline color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                    "default": "'#c23531'"
                  },
                  "borderColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>timeline  stroke color of graphic. Support the same format as <code>color</code></p>\n",
                    "default": "\"#000\""
                  },
                  "borderWidth": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>timeline Width of stroke. No stroke when it is 0 .</p>\n",
                    "default": 1
                  },
                  "shadowBlur": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                  },
                  "shadowColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                  },
                  "shadowOffsetX": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                    "default": 0
                  },
                  "shadowOffsetY": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                    "default": 0
                  },
                  "opacity": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                  }
                }
              }
            }
          },
          "checkpointStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The Graphic Styles of『current item』 (<code>checkpoint</code>).</p>\n",
            "properties": {
              "symbol": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>timeline.checkpointStyle Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                "default": "'circle'"
              },
              "symbolSize": {
                "type": [
                  "number",
                  "Array"
                ],
                "descriptionCN": "<p>timeline.checkpointStyle Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n",
                "default": 13
              },
              "symbolRotate": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>timeline.checkpointStyle Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
              },
              "symbolOffset": {
                "type": [
                  "Array"
                ],
                "descriptionCN": "<p>timeline.checkpointStyle Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                "default": "[0, 0]"
              },
              "color": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>The color of『current item』 (<code>checkpoint</code>)  in <code>timeline</code> component.</p>\n",
                "default": "'#c23531'"
              },
              "borderWidth": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The border-width of『current item』 (<code>checkpoint</code>)  in <code>timeline</code> component. </p>\n",
                "default": 5
              },
              "borderColor": {
                "type": [
                  "Color"
                ],
                "descriptionCN": "<p>The border-color of『current item』 (<code>checkpoint</code>)  in <code>timeline</code> component. </p>\n",
                "default": "'rgba(194,53,49, 0.5)'"
              },
              "animation": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>In <code>timeline</code> component, whether there is animation in 『current item』 (<code>checkpoint</code>)  moving during the process of <code>timeline</code> playing and switching. </p>\n",
                "default": true
              },
              "animationDuration": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>The animation duration of『current item』 (<code>checkpoint</code>)  in <code>timeline</code> component. </p>\n",
                "default": 300
              },
              "animationEasing": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>The easing effect of animation of『current item』 (<code>checkpoint</code>)  in <code>timeline</code> component. Different easing effect could refers to <a href=\"http://echarts.baidu.com/gallery/view.html?c=line-easing\" target=\"_blank\">easing sample</a>. </p>\n",
                "default": "'quinticInOut'"
              }
            }
          },
          "controlStyle": {
            "type": [
              "Object"
            ],
            "descriptionCN": "<p>The style of『control button』.『control button』includes: 『play button』、『previous button』、『next button』.</p>\n",
            "properties": {
              "show": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Whether to show 『control button』. When it is set as, it would not show at all. </p>\n",
                "default": true
              },
              "showPlayBtn": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Whether to show 『play button』.</p>\n",
                "default": true
              },
              "showPrevBtn": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Whether to show 『previous button』.</p>\n",
                "default": true
              },
              "showNextBtn": {
                "type": [
                  "boolean"
                ],
                "descriptionCN": "<p>Whether to show 『next button』.</p>\n",
                "default": true
              },
              "itemSize": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>the size of『control button』, and its unit is pixel (px).</p>\n",
                "default": 22
              },
              "itemGap": {
                "type": [
                  "number"
                ],
                "descriptionCN": "<p>the interval between『control button』, and its unit is pixel (px).</p>\n",
                "default": 12
              },
              "position": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the location of 『control button』.</p>\n<ul>\n<li><p>As <a href=\"#timeline.orient\">timeline.orient</a> is set as <code>&#39;horizontal&#39;</code>, <code>&#39;left&#39;</code>、<code>&#39;right&#39;</code>are valid.</p>\n</li>\n<li><p>As <a href=\"#timeline.orient\">timeline.orient</a> is set as <code>&#39;vertical&#39;</code>, <code>&#39;top&#39;</code>、<code>&#39;bottom&#39;</code>are valid.</p>\n</li>\n</ul>\n",
                "default": "'left'"
              },
              "playIcon": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the icon of 『play status』for『play button』.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
              },
              "stopIcon": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the icon of 『stop status』for『play button』.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
              },
              "prevIcon": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the icon of 『previous button』</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
              },
              "nextIcon": {
                "type": [
                  "string"
                ],
                "descriptionCN": "<p>the icon of 『next button』</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
              },
              "normal": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>the style of 『normal status』for control button.</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>button color.</p>\n",
                    "default": "'#304654'"
                  },
                  "borderColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>the color of button border.</p>\n",
                    "default": "'#304654'"
                  },
                  "borderWidth": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>the border width of button.</p>\n",
                    "default": 1
                  }
                }
              },
              "emphasis": {
                "type": [
                  "Object"
                ],
                "descriptionCN": "<p>the button style in 『highlighted status』 (during its hover).</p>\n",
                "properties": {
                  "color": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>button color.</p>\n",
                    "default": "'#c23531'"
                  },
                  "borderColor": {
                    "type": [
                      "Color"
                    ],
                    "descriptionCN": "<p>the color of button border.</p>\n",
                    "default": "'#c23531'"
                  },
                  "borderWidth": {
                    "type": [
                      "number"
                    ],
                    "descriptionCN": "<p>the width of button border.</p>\n",
                    "default": 2
                  }
                }
              }
            }
          },
          "data": {
            "type": [
              "Array"
            ],
            "descriptionCN": "<p><code>timeline</code> data. Every item of <code>Array</code>, it could be a direct numerical. If you need to individually endow each data item with a style definition, the data item should be written as <code>Object</code>. In <code>Object</code>, the attribute of <code>value</code> is numerical value. Other attributes, such as the examples below, could cover the attribute configuration in  <code>timeline</code>.  </p>\n<p>as follows: </p>\n<pre><code class=\"lang-javascript\">[\n    &#39;2002-01-01&#39;,\n    &#39;2003-01-01&#39;,\n    &#39;2004-01-01&#39;,\n    {\n        value: &#39;2005-01-01&#39;,\n        tooltip: {          // Let `tooltip` to be displayed as mouse hovering to this item.\n            formatter: &#39;{b} xxxx&#39;\n        },\n        symbol: &#39;diamond&#39;,  // the special setting of this item&#39;s figure.\n        symbolSize: 16      // the special setting of this item&#39;s size.\n    },\n    &#39;2006-01-01&#39;,\n    &#39;2007-01-01&#39;,\n    &#39;2008-01-01&#39;,\n    &#39;2009-01-01&#39;,\n    &#39;2010-01-01&#39;,\n    {\n        value: &#39;2011-01-01&#39;,\n        tooltip: {          // Let `tooltip` to be displayed as mouse hovering to this item.\n            formatter: function (params) {\n                return params.name + &#39;xxxx&#39;;\n            }\n        },\n        symbol: &#39;diamond&#39;,\n        symbolSize: 18\n    },\n]\n</code></pre>\n"
          }
        }
      },
      "series": {
        "type": "Array",
        "items": {
          "anyOf": [
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>broken line graph</strong></p>\n<p>Broken line graph relates all the data points <a href=\"#series-line.symbol\">symbol</a> by broken lines, which is used to show the trend of data changing. It could be used in both <a href=\"#grid\">rectangular coordinate</a> and<a href=\"#polar\">polar coordinate</a>.</p>\n<p><strong>Tip:</strong> When <a href=\"#series-line.areaStyle\">areaStyle</a> is set, area graph could be drew.</p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'line'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;cartesian2d&#39;</code></p>\n<p>  Using a two-dimensional Cartesian coordinate (also known as Cartesian coordinate), through <a href=\"#series-bar.xAxisIndex\">xAxisIndex</a>, <a href=\"#series-bar.yAxisIndex\">yAxisIndex</a> to assign the corresponding axis component.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&#39;polar&#39;</code></p>\n<p>  Using polar coordinates, through <a href=\"#series-bar.polarIndex\">polarIndex</a> to assign the corresponding polar coordinate component.</p>\n</li>\n</ul>\n",
                  "default": "'cartesian2d'"
                },
                "xAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of  <a href=\"#xAxis\">x axis</a>, which is  useful when there are multiple x axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "yAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#yAxis\">y axis</a>, which is  useful when there are multiple y axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "polarIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#polar\">Polar coordinate</a>, which is  useful when there are multiple polar coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "symbol": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                  "default": "'circle'"
                },
                "symbolSize": {
                  "type": [
                    "number",
                    "Array",
                    "Function"
                  ],
                  "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-line.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                  "default": 4
                },
                "symbolRotate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                },
                "symbolOffset": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                  "default": "[0, 0]"
                },
                "showSymbol": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to show symbol. It would be shown during tooltip hover.</p>\n",
                  "default": true
                },
                "showAllSymbol": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>symbol graphic element defaults to be shown on main axis(following the label gap of main axis to hide the strategies). If you want to show them all, set showAllSymbol as <code>true</code>.</p>\n",
                  "default": false
                },
                "hoverAnimation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable the reminding animation effect of hover on inflection point symbol.</p>\n",
                  "default": true
                },
                "legendHoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable joint highlights <a href=\"#legend\">legend</a> when hover.</p>\n",
                  "default": true
                },
                "stack": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>If stack the value. On the same category axis, the series with the same <code>stack</code> name could stack.</p>\n<p>The effect of the below example could be seen through stack switching of <a href=\"#toolbox\">toolbox</a> on the top right corner:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/line-stack-tiled&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n",
                  "default": null
                },
                "clipOverflow": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to clip the overflowing part, which defaults to clip.</p>\n",
                  "default": true
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>text label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                          "default": "'top'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>the style of the inflection point of broken line.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color",
                            "Function"
                          ],
                          "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n<p>Support the use of callback functions. Callback function takes the following forms: </p>\n<pre><code class=\"lang-js\">(params: Object) =&gt; Color\n</code></pre>\n<p>Incoming are the data item <code>seriesIndex</code>, <code>dataIndex</code>, <code>data</code>, <code>value</code> and other parameters.</p>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "lineStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>line style.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 0
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 0
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "areaStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>the style of area filling.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Fill color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Fill color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "smooth": {
                  "type": [
                    "false"
                  ],
                  "descriptionCN": "<p>Whether to show as smooth curve.</p>\n",
                  "default": false
                },
                "smoothMonotone": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Whether the broken line could maintain the monotonicity when it becomes smooth. It could be set as <code>&#39;x&#39;</code>, <code>&#39;y&#39;</code> to confirm that whether it maintains the monotonicity on x axis or y axis.</p>\n<p>It is usually used on double-value axis.</p>\n<p>Here are 2 examples of broken line graph in double-value axis, showing the differences when <code>smoothMonotone</code> is without any setting, and <code>smoothMonotone</code> is set as <code>&#39;x&#39;</code>.</p>\n<ul>\n<li>no setting about <code>smoothMonotone</code>:</li>\n</ul>\n<p><img width=\"300\" height=\"auto\" src=\"documents/asset/img/smooth-monotone-none.png\"></p>\n<ul>\n<li>it is set as <code>&#39;x&#39;</code>:</li>\n</ul>\n<p><img width=\"300\" height=\"auto\" src=\"documents/asset/img/smooth-monotone-x.png\"></p>\n"
                },
                "sampling": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>the dowmsampling strategy used when the data size is much larger than piex dot. It could optimize the drawing efficiency when it is turned on. And it defaults to be turned off, indicating that all the drawing would not filter data point.</p>\n<p>Options:</p>\n<ul>\n<li><code>&#39;average&#39;</code> average the value of filter points</li>\n<li><code>&#39;max&#39;</code> maximize the value of filter points</li>\n<li><code>&#39;min&#39;</code> minimize the value of filter points</li>\n<li><code>&#39;sum&#39;</code> sum the values of filter points</li>\n</ul>\n"
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Array of data content in series.Array item usually is specific data item. Followings are three data formats </p>\n<ol>\n<li><p>When an axis in the coordinate is category axis, data can be the value of one dimension, the length of array equals to the length of <a href=\"#xAxis.data\">xAxis.data</a>,which is the label array of category axis content.And there is a  one-to-one correspondence between them, for example: </p>\n<pre><code class=\"lang-js\"> [12, 34, 56, 10, 23]\n</code></pre>\n</li>\n<li><p>When both axes in the coordinate are  value axes, every data item needs one array, and at least two of them should represent <code>x</code>,  <code>y</code>in cartesian coordinates or <code>radius</code>, <code>angle</code>in polar coordinates, for example: </p>\n<pre><code class=\"lang-js\"> [[3.4, 4.5, 15], [4.2, 2.3, 20], [10.8, 9.5, 30], [7.2, 8.8, 18]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n<li><p>When both axes in the coordinate are  category axes, every data item also needs one array, a single data item needs to have at least two values representing category index or name on two axes, for example: </p>\n<pre><code class=\"lang-js\"> [[0, 0, 2], [&#39;monday&#39;, 2, 1], [2, 1, 2], [3, 3, 5]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n</ol>\n<pre><code>Examples of double category axis can refer to [Github Punchcard](http://echarts.baidu.com/gallery/editor.html?c=scatter-punchCard).\n</code></pre><p>When it needs to customize certain data label, array item can be treated as subject, among which<code>value</code> stands for specific value, for example: </p>\n<pre><code class=\"lang-js\">[\n    12, 34,\n    {\n        value : 56,\n        //self-define label format, only valid for this data item\n        label: {},\n        //special self-define itemStyle, only valid for this data item\n        itemStyle:{}\n    },\n    10, 23\n]\n</code></pre>\n<p><strong>Tip: </strong>When data to certain category does not exist (ps: &#39;inexistence&#39; doesn&#39;t mean the value is 0), can use&#39;-&#39;to represent, when there is no data, it should be disconnected in  line chart, and no graph in other graphics.</p>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the name of data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>the value of a single data item.</p>\n"
                      },
                      "symbol": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>single dataLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                        "default": "'circle'"
                      },
                      "symbolSize": {
                        "type": [
                          "number",
                          "Array"
                        ],
                        "descriptionCN": "<p>single dataLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n",
                        "default": 4
                      },
                      "symbolRotate": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>single dataRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                      },
                      "symbolOffset": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>single dataLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                        "default": "[0, 0]"
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the style setting about the text of single inflection point.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "top"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the style setting about the symbol of single inflection point.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Bar color..</p>\n",
                                "default": "'auto'"
                              },
                              "barBorderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>The bodrder color of bar.</p>\n",
                                "default": "'#000'"
                              },
                              "barBorderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>The bodrder width of bar. defaults to have no border.</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Bar color..</p>\n",
                                "default": "'auto'"
                              },
                              "barBorderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>The bodrder color of bar.</p>\n",
                                "default": "'#000'"
                              },
                              "barBorderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>The bodrder width of bar. defaults to have no border.</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li><p>Through <a href=\"#series-line.markPoint.data.x\">x</a>, <a href=\"#series-line.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</p>\n</li>\n<li><p>Use <a href=\"#series-line.markPoint.data.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n<li><p>Use <a href=\"#series-line.markPoint.data.type\">type</a> attribute to label the maximum value and minimum value in the series directly.This is when you can use  <a href=\"#series-line.markPoint.data.valueIndex\">valueIndex</a>to assign the maximum value, minimum value and average value in any dimensions. Or use <a href=\"#series-line.markPoint.data.valueDim\">valueDim</a> to assign the maximum value, minimum value and average value in any dimensions.</p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;maximum&#39;,\n        type: &#39;max&#39;\n    }, \n    {\n        name: &#39;certain coordinate&#39;,\n        coord: [10, 20]\n    }, \n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "type": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on.</p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> minimum.</li>\n<li><code>&#39;max&#39;</code> maximum.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                          },
                          "valueIndex": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Available when using <a href=\"#series-line.markPoint.data.type\">type</a> it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis), and use the first value axis dimension by default.</p>\n"
                          },
                          "valueDim": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Available when using  <a href=\"#series-line.markPoint.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                          },
                          "coord": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Coordinate of the label.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-line.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li><p>Through <a href=\"#series-line.markLine.data.0.x\">x</a>, <a href=\"#series-line.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </p>\n</li>\n<li><p>Use <a href=\"#series-line.markLine.data.0.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n<li><p>Use <a href=\"#series-line.markLine.data.0.type\">type</a> attribute to label the maximum value and minimum value in the series directly. This is when you can use  <a href=\"#series-line.markLine.data.0.valueIndex\">valueIndex</a> to assign the maximum value, minimum value and average value in any dimensions. Or you can use <a href=\"#series-line.markPoint.data.valueDim\">valueDim</a> to assign the maximum value, minimum value and average value in any dimensions.</p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p>You can also set the type of the marking line through <code>type</code> , whether it is the maximum value or average value. Likewise, dimensions can be assigned through <code>valueIndex</code>.</p>\n<pre><code>data: [\n    {\n        name: &#39;Average&#39;,\n        // Support &#39;average&#39;, &#39;min&#39;, &#39;max&#39;\n        type: &#39;average&#39;\n    },\n    [\n        {\n            // Items of starting point and finishing point share one name\n            name: &#39;Minimum value to maximum value&#39;,\n            type: &#39;min&#39;\n        },\n        {\n            type: &#39;max&#39;\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two coordinates&#39;,\n            coord: [10, 20]\n        },\n        {\n            coord: [20, 30]\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on. </p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> maximum value.</li>\n<li><code>&#39;max&#39;</code> minimum value.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                            },
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on. </p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> maximum value.</li>\n<li><code>&#39;max&#39;</code> minimum value.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                            },
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>broken line graph zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>broken line graph all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "linear"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>bar chart</strong></p>\n<p>Bar chart shows different data through the height of a bar, which is used in <a href=\"#grid\">rectangular coordinate</a> with at least 1 category axis.</p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'bar'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "legendHoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable joint highlights <a href=\"#legend\">legend</a> when hover.</p>\n",
                  "default": true
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;cartesian2d&#39;</code></p>\n<p>  Using a two-dimensional Cartesian coordinate (also known as Cartesian coordinate), through <a href=\"#series-bar.xAxisIndex\">xAxisIndex</a>, <a href=\"#series-bar.yAxisIndex\">yAxisIndex</a> to assign the corresponding axis component.</p>\n</li>\n</ul>\n",
                  "default": "'cartesian2d'"
                },
                "xAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of  <a href=\"#xAxis\">x axis</a>, which is  useful when there are multiple x axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "yAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#yAxis\">y axis</a>, which is  useful when there are multiple y axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>text label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                          "default": "'inside'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Bar color. defaults to acquire colors from global palette <a href=\"#color\">option.color</a> .</p>\n",
                          "default": "'auto'"
                        },
                        "barBorderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>The bodrder color of bar.</p>\n",
                          "default": "'#000'"
                        },
                        "barBorderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>The bodrder width of bar. defaults to have no border.</p>\n",
                          "default": 0
                        },
                        "barBorderRadius": {
                          "type": [
                            "number",
                            "Array"
                          ],
                          "descriptionCN": "<p>The radius of rounded corner of bar border. Its unit is px. And it supports use array to respectively specify the 4 corner radiuses of the bar.</p>\n<p>For example:</p>\n<pre><code>barBorderRadius: 5, // consistently set the size of 4 rounded corners\nbarBorderRadius: [5, 5, 0, 0] // (clockwise upper left, upper right, bottom right and bottom left)\n</code></pre>",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Bar color..</p>\n",
                          "default": "'auto'"
                        },
                        "barBorderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>The bodrder color of bar.</p>\n",
                          "default": "'#000'"
                        },
                        "barBorderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>The bodrder width of bar. defaults to have no border.</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "stack": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Name of stack. On the same category axis, the series with the same <code>stack</code> name would stack.</p>\n",
                  "default": null
                },
                "barWidth": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The width of the bar. Adaptive when not specified.</p>\n",
                  "default": null
                },
                "barMaxWidth": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The maximum width of the bar. Adaptive when not specified.</p>\n",
                  "default": null
                },
                "barMinHeight": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The minimum width of bar. It could be used to avoid the following situation: the interaction would be affected when the value of some data item is too small.</p>\n",
                  "default": 0
                },
                "barGap": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The gap between bars, defaults to be <code>30%</code> of the bar width, can be set as a fixed value like <code>20</code>.</p>\n",
                  "default": "'30%'"
                },
                "barCategoryGap": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The bar gap between each category of bar, defaults to be <code>20%</code> of the category gap, can be set as a fixed value.</p>\n",
                  "default": "'20%'"
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Array of data content in series.Array item usually is specific data item. Followings are three data formats </p>\n<ol>\n<li><p>When an axis in the coordinate is category axis, data can be the value of one dimension, the length of array equals to the length of <a href=\"#xAxis.data\">xAxis.data</a>,which is the label array of category axis content.And there is a  one-to-one correspondence between them, for example: </p>\n<pre><code class=\"lang-js\"> [12, 34, 56, 10, 23]\n</code></pre>\n</li>\n<li><p>When both axes in the coordinate are  value axes, every data item needs one array, and at least two of them should represent <code>x</code>,  <code>y</code>in cartesian coordinates or <code>radius</code>, <code>angle</code>in polar coordinates, for example: </p>\n<pre><code class=\"lang-js\"> [[3.4, 4.5, 15], [4.2, 2.3, 20], [10.8, 9.5, 30], [7.2, 8.8, 18]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n<li><p>When both axes in the coordinate are  category axes, every data item also needs one array, a single data item needs to have at least two values representing category index or name on two axes, for example: </p>\n<pre><code class=\"lang-js\"> [[0, 0, 2], [&#39;monday&#39;, 2, 1], [2, 1, 2], [3, 3, 5]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n</ol>\n<pre><code>Examples of double category axis can refer to [Github Punchcard](http://echarts.baidu.com/gallery/editor.html?c=scatter-punchCard).\n</code></pre><p>When it needs to customize certain data label, array item can be treated as subject, among which<code>value</code> stands for specific value, for example: </p>\n<pre><code class=\"lang-js\">[\n    12, 34,\n    {\n        value : 56,\n        //self-define label format, only valid for this data item\n        label: {},\n        //special self-define itemStyle, only valid for this data item\n        itemStyle:{}\n    },\n    10, 23\n]\n</code></pre>\n<p><strong>Tip: </strong>When data to certain category does not exist (ps: &#39;inexistence&#39; doesn&#39;t mean the value is 0), can use&#39;-&#39;to represent, when there is no data, it should be disconnected in  line chart, and no graph in other graphics.</p>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>The name of data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>The value of a single data item.</p>\n"
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>The style setting of the text label in a single bar.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "inside"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Bar color..</p>\n",
                                "default": "'auto'"
                              },
                              "barBorderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>The bodrder color of bar.</p>\n",
                                "default": "'#000'"
                              },
                              "barBorderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>The bodrder width of bar. defaults to have no border.</p>\n",
                                "default": 0
                              },
                              "barBorderRadius": {
                                "type": [
                                  "number",
                                  "Array"
                                ],
                                "descriptionCN": "<p>The radius of rounded corner of bar border. Its unit is px. And it supports use array to respectively specify the 4 corner radiuses of the bar.</p>\n<p>For example:</p>\n<pre><code>barBorderRadius: 5, // consistently set the size of 4 rounded corners\nbarBorderRadius: [5, 5, 0, 0] // (clockwise upper left, upper right, bottom right and bottom left)\n</code></pre>",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Bar color..</p>\n",
                                "default": "'auto'"
                              },
                              "barBorderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>The bodrder color of bar.</p>\n",
                                "default": "'#000'"
                              },
                              "barBorderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>The bodrder width of bar. defaults to have no border.</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li><p>Through <a href=\"#series-bar.markPoint.data.x\">x</a>, <a href=\"#series-bar.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</p>\n</li>\n<li><p>Use <a href=\"#series-bar.markPoint.data.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n<li><p>Use <a href=\"#series-bar.markPoint.data.type\">type</a> attribute to label the maximum value and minimum value in the series directly.This is when you can use  <a href=\"#series-bar.markPoint.data.valueIndex\">valueIndex</a>to assign the maximum value, minimum value and average value in any dimensions. Or use <a href=\"#series-bar.markPoint.data.valueDim\">valueDim</a> to assign the maximum value, minimum value and average value in any dimensions.</p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;maximum&#39;,\n        type: &#39;max&#39;\n    }, \n    {\n        name: &#39;certain coordinate&#39;,\n        coord: [10, 20]\n    }, \n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "type": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on.</p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> minimum.</li>\n<li><code>&#39;max&#39;</code> maximum.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                          },
                          "valueIndex": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Available when using <a href=\"#series-bar.markPoint.data.type\">type</a> it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis), and use the first value axis dimension by default.</p>\n"
                          },
                          "valueDim": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Available when using  <a href=\"#series-bar.markPoint.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                          },
                          "coord": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Coordinate of the label.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n<p>prefix</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-bar.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li><p>Through <a href=\"#series-bar.markLine.data.0.x\">x</a>, <a href=\"#series-bar.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </p>\n</li>\n<li><p>Use <a href=\"#series-bar.markLine.data.0.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n<li><p>Use <a href=\"#series-bar.markLine.data.0.type\">type</a> attribute to label the maximum value and minimum value in the series directly. This is when you can use  <a href=\"#series-bar.markLine.data.0.valueIndex\">valueIndex</a> to assign the maximum value, minimum value and average value in any dimensions. Or you can use <a href=\"#series-bar.markPoint.data.valueDim\">valueDim</a> to assign the maximum value, minimum value and average value in any dimensions.</p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p>You can also set the type of the marking line through <code>type</code> , whether it is the maximum value or average value. Likewise, dimensions can be assigned through <code>valueIndex</code>.</p>\n<pre><code>data: [\n    {\n        name: &#39;Average&#39;,\n        // Support &#39;average&#39;, &#39;min&#39;, &#39;max&#39;\n        type: &#39;average&#39;\n    },\n    [\n        {\n            // Items of starting point and finishing point share one name\n            name: &#39;Minimum value to maximum value&#39;,\n            type: &#39;min&#39;\n        },\n        {\n            type: &#39;max&#39;\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two coordinates&#39;,\n            coord: [10, 20]\n        },\n        {\n            coord: [20, 30]\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on. </p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> maximum value.</li>\n<li><code>&#39;max&#39;</code> minimum value.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                            },
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on. </p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> maximum value.</li>\n<li><code>&#39;max&#39;</code> minimum value.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                            },
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>bar graph zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>bar graph all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "cubicOut"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>pie chart</strong></p>\n<p>The pie chart is mainly used for showing data proportion in the total in different categories. Each radians represents the proportion of data quantity.</p>\n<p><strong>Tip:</strong> The pie chart is more suitable for presenting the relations such as the percentage of data relative to the total. If you just want to present the different data of various categories, the <a href=\"bar\" target=\"_blank\">bar graph</a> is more suggested. Compared to tiny length difference,  people is less sensitive to the minor radian difference. Otherwise, it could also be shown as Nightingale chart by allocating the <a href=\"#series-pie.roseType\">roseType</a>, distinguishing different data through radius. </p>\n<p><strong> The below example is the custom Nightingale chart: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=pie-custom&edit=1&reset=1\" width=\"500\" height=\"400\" ></iframe>\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'pie'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "legendHoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable joint highlights <a href=\"#legend\">legend</a> when hover.</p>\n",
                  "default": true
                },
                "hoverAnimation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable the zoom animation effects of hover in the sectors.</p>\n",
                  "default": true
                },
                "selectedMode": {
                  "type": [
                    "boolean",
                    "string"
                  ],
                  "descriptionCN": "<p>Selected mode, indicating whether to support multiple selected objects. It defaults to be closed, supporting Boolean values and string. The optional string value could be <code>&#39;single&#39;</code> or <code>&#39;multiple&#39;</code> which respectively indicate single or multiple selecting.</p>\n",
                  "default": false
                },
                "selectedOffset": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>the offset distance of selected section.</p>\n",
                  "default": 10
                },
                "clockwise": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether the layout of sectors of pie chart is clockwise.</p>\n",
                  "default": true
                },
                "startAngle": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>the start angle, which supports the scale of[0, 360].</p>\n",
                  "default": 90
                },
                "minAngle": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>the minimum angel of sector. It prevents some sector from being too small bacause the some value is too small, which would influence on interaction. </p>\n",
                  "default": 0
                },
                "roseType": {
                  "type": [
                    "boolean",
                    "string"
                  ],
                  "descriptionCN": "<p>Whether to show as Nightingale chart, which distinguishs data through radius. There are 2 optional modes: </p>\n<ul>\n<li><code>&#39;radius&#39;</code> area shows the percentage of data, radius shows data size. </li>\n<li><code>&#39;area&#39;</code> when all the sectors share the same area, the data size is shown only through radiuses.</li>\n</ul>\n",
                  "default": false
                },
                "avoidLabelOverlap": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable the strategy to avoid labels overlap. It defaults to be enabled to move the label positions in the case of crowded labels overlap to avoid labels overlap.</p>\n<p>If this strategy is unnecessary to be enabled, such as in <a href=\"http://echarts.baidu.com/gallery/editor.html?c=pie-doughnut\" target=\"_blank\">pie-doughnut</a>, all the labels are compulsoried to be put in the center and the value should be set as <code>false</code>. </p>\n",
                  "default": true
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>pie charttext label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>the position of lable.</p>\n<p><strong>Options: </strong></p>\n<ul>\n<li><p><code>&#39;outside&#39;</code></p>\n<p>  the outside of sectors of pie chart, which relates to corresponding sector through <a href=\"#series-pie.labelLine\">visual guide line</a>.</p>\n</li>\n<li><p><code>&#39;inside&#39;</code></p>\n<p>  the inside of sectors of pie chart.</p>\n</li>\n<li><p><code>&#39;inner&#39;</code> is the same with <code>&#39;inside&#39;</code>. </p>\n</li>\n<li><p><code>&#39;center&#39;</code></p>\n<p>  In the center of pie chart. Reference to<a href=\"http://echarts.baidu.com/gallery/editor.html?c=pie-doughnut\" target=\"_blank\">pie-doughnut example</a></p>\n</li>\n</ul>\n",
                          "default": "'outside'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n     // percentage\n     percent: number,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>the text style of labels.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "",
                          "default": false
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n     // percentage\n     percent: number,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>the text style of labels.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "labelLine": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>the style of visual guide line. When <a href=\"#series-pie.label.normal.position\">label position</a> is set as <code>&#39;outside&#39;</code>, the visual guide line would show.           </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>the style of visual guide line in normal status.</p>\n",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Whether to show the visual guide line.</p>\n"
                        },
                        "length": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the length of the first segment of visual guide line.</p>\n"
                        },
                        "length2": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the length of the second segment of visual guide line.</p>\n"
                        },
                        "smooth": {
                          "type": [
                            "boolean",
                            "number"
                          ],
                          "descriptionCN": "<p>Whether to smooth the visual guide line. It defaults to be unsmooth and could be set as <code>true</code> or the values from 0 to 1 which indicating the smoothness.   </p>\n",
                          "default": false
                        },
                        "lineStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>the style of visual guide line in emphasis status.</p>\n",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Whether to show the visual guide line.</p>\n"
                        },
                        "lineStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p> graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color",
                            "Function"
                          ],
                          "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n<p>Support the use of callback functions. Callback function takes the following forms: </p>\n<pre><code class=\"lang-js\">(params: Object) =&gt; Color\n</code></pre>\n<p>Incoming are the data item <code>seriesIndex</code>, <code>dataIndex</code>, <code>data</code>, <code>value</code> and other parameters.</p>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "center": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>The center coordinates of pie chart, the first item of array is the abscissa, the second item is ordinate.</p>\n<p>Support set to percentage, the first item when setting to percentage is the width relative to the container, the second item is the height.</p>\n<p><strong>Example: </strong></p>\n<pre><code>// Set to absolute pixel values\ncenter: [400, 300]\n// Set to relative percent\ncenter: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>",
                  "default": "['50%', '50%']"
                },
                "radius": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>the radius of pie chart, the first item of array is inner radius,the second item is outer radius.</p>\n<p>Support set to percentage, equal to half of the smaller item between height and width of the container. </p>\n<p>You can set a large inside radius for a Donut chart (Donut chart).  </p>\n",
                  "default": "[0, '75%']"
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p> data content and array in the series.Array item can be a single data value, for example: </p>\n<pre><code class=\"lang-js\">[12, 34, 56, 10, 23]\n</code></pre>\n<p>If other dimensions need to be added to data  <a href=\"#visualMap\">visualMap</a> component to map color and other graphic properties.Each data item can also be an array, for example: </p>\n<pre><code class=\"lang-js\">[[12, 14], [34, 50], [56, 30], [10, 15], [23, 10]]\n</code></pre>\n<p>Now second value in each arrary can be assigned to <a href=\"#visualMap\">visualMap</a> component.</p>\n<p>In most situation, we need to assign name to each data item,so each item need to be one subject: </p>\n<pre><code class=\"lang-js\">[{\n    // name of date item\n    name: &#39;data1&#39;,\n    // value of date item is 8\n    value: 10\n}, {\n    name: &#39;data2&#39;,\n    value: 20\n}]\n</code></pre>\n<p>When personalized definition needs to be conducted to  sepcific content: </p>\n<pre><code class=\"lang-js\">[{\n    name: &#39;data1&#39;,\n    value: 10\n}, {\n    // name of data item\n    name: &#39;data2&#39;,\n    value : 56,\n    //special self-define tooltip, only valid for this data item\n    tooltip:{},\n    //special self-define itemStyle, only valid for this data item\n    itemStyle:{}\n}]\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the name of data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>data value.</p>\n"
                      },
                      "selected": {
                        "type": [
                          "boolean"
                        ],
                        "descriptionCN": "<p>Whether the data items could be selected.</p>\n",
                        "default": false
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the label configuration of a single sector.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string"
                                ],
                                "descriptionCN": "<p>the position of lable.</p>\n<p><strong>Options: </strong></p>\n<ul>\n<li><p><code>&#39;outside&#39;</code></p>\n<p>  the outside of sectors of pie chart, which relates to corresponding sector through <a href=\"#series-pie.labelLine\">visual guide line</a>.</p>\n</li>\n<li><p><code>&#39;inside&#39;</code></p>\n<p>  the inside of sectors of pie chart.</p>\n</li>\n<li><p><code>&#39;inner&#39;</code> is the same with <code>&#39;inside&#39;</code>. </p>\n</li>\n<li><p><code>&#39;center&#39;</code></p>\n<p>  In the center of pie chart. Reference to<a href=\"http://echarts.baidu.com/gallery/editor.html?c=pie-doughnut\" target=\"_blank\">pie-doughnut example</a></p>\n</li>\n</ul>\n",
                                "default": "'outside'"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>the text style of labels.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "",
                                "default": false
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>the text style of labels.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "labelLine": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>the style of visual guide line in normal status.</p>\n",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Whether to show the visual guide line.</p>\n"
                              },
                              "length": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the length of the first segment of visual guide line.</p>\n"
                              },
                              "length2": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the length of the second segment of visual guide line.</p>\n"
                              },
                              "smooth": {
                                "type": [
                                  "boolean",
                                  "number"
                                ],
                                "descriptionCN": "<p>Whether to smooth the visual guide line. It defaults to be unsmooth and could be set as <code>true</code> or the values from 0 to 1 which indicating the smoothness.   </p>\n",
                                "default": false
                              },
                              "lineStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "\"#000\""
                                  },
                                  "width": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>line width.</p>\n",
                                    "default": 0
                                  },
                                  "type": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                    "default": "solid"
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>the style of visual guide line in emphasis status.</p>\n",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Whether to show the visual guide line.</p>\n"
                              },
                              "lineStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "\"#000\""
                                  },
                                  "width": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>line width.</p>\n",
                                    "default": 0
                                  },
                                  "type": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                    "default": "solid"
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p> graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li>Through <a href=\"#series-pie.markPoint.data.x\">x</a>, <a href=\"#series-pie.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-pie.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li>Through <a href=\"#series-pie.markLine.data.0.x\">x</a>, <a href=\"#series-pie.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<pre><code>data: [\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "cubicOut"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p>Scatter (bubble) diagram . The scatter diagram in <a href=\"#grid\">rectangular coordinate</a> could be used to present the relation between  <code>x</code> and <code>y</code>. If there are multiple dimensions of a data item, the values of the other dimensions can be displayed as bubble diagram through <a href=\"#series-scatter.symbol\">symbol</a> with various sizes and colors. These can be completed by cooperating with <a href=\"#visualMap\">visualMap</a> component.</p>\n<p>It could be applied in <a href=\"#grid\">rectangular coordinate</a> and <a href=\"#polar\">polar coordinate</a> and <a href=\"#geo\">geographical coordinate</a>.</p>\n<p><strong>Tip:</strong> Instead of marking a large number of data points through markPoint in ECharts 2.x, the scatter on <a href=\"#geo\">geographical coordinate</a> is suggested to achieve the same effect in ECharts 3. The following example shows the distribution of air quality is with a scatter diagram on the map of China. What&#39;s more, the <a href=\"#visualMap\">visualMap</a> component is used to map PM2.5 to colors. </p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=scatter-map&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'scatter'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;cartesian2d&#39;</code></p>\n<p>  Using a two-dimensional Cartesian coordinate (also known as Cartesian coordinate), through <a href=\"#series-bar.xAxisIndex\">xAxisIndex</a>, <a href=\"#series-bar.yAxisIndex\">yAxisIndex</a> to assign the corresponding axis component.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&#39;polar&#39;</code></p>\n<p>  Using polar coordinates, through <a href=\"#series-bar.polarIndex\">polarIndex</a> to assign the corresponding polar coordinate component.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&#39;geo&#39;</code></p>\n<p>  Using geographic coordinate, through <a href=\"#series-bar.geoIndex\">geoIndex</a> to assign the corresponding geographic coordinate components.</p>\n</li>\n</ul>\n",
                  "default": "'cartesian2d'"
                },
                "xAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of  <a href=\"#xAxis\">x axis</a>, which is  useful when there are multiple x axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "yAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#yAxis\">y axis</a>, which is  useful when there are multiple y axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "polarIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#polar\">Polar coordinate</a>, which is  useful when there are multiple polar coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "geoIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#geo\">geographic coordinate</a>, which is  useful when there are multiple geographic coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "hoverAnimation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable the reminding animation effect mouse hover.</p>\n"
                },
                "legendHoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable joint highlights <a href=\"#legend\">legend</a> when hover.</p>\n",
                  "default": true
                },
                "symbol": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                  "default": "'circle'"
                },
                "symbolSize": {
                  "type": [
                    "number",
                    "Array",
                    "Function"
                  ],
                  "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-scatter.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                  "default": 10
                },
                "symbolRotate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                },
                "symbolOffset": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                  "default": "[0, 0]"
                },
                "large": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable the optimization of large-scale scatter diagram. The (&gt;=5k)  could be enabled when there is a particularly large number of data graphic elements. </p>\n<p>After being enabled, it should coordinate with <a href=\"#series-scatter.largeThreshold\">largeThreshold</a> to optimize the draw when the data volume is greater than specified threshold value.</p>\n<p>The style of a single data item can&#39;t be custom set and can&#39;t interact after optimization. </p>\n",
                  "default": true
                },
                "largeThreshold": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>the threshold enabling the drawing optimization.</p>\n",
                  "default": 2000
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>text label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                          "default": "'inside'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p> graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color",
                            "Function"
                          ],
                          "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n<p>Support the use of callback functions. Callback function takes the following forms: </p>\n<pre><code class=\"lang-js\">(params: Object) =&gt; Color\n</code></pre>\n<p>Incoming are the data item <code>seriesIndex</code>, <code>dataIndex</code>, <code>data</code>, <code>value</code> and other parameters.</p>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Array of data content in series.Array item usually is specific data item. Followings are three data formats </p>\n<ol>\n<li><p>When an axis in the coordinate is category axis, data can be the value of one dimension, the length of array equals to the length of <a href=\"#xAxis.data\">xAxis.data</a>,which is the label array of category axis content.And there is a  one-to-one correspondence between them, for example: </p>\n<pre><code class=\"lang-js\"> [12, 34, 56, 10, 23]\n</code></pre>\n</li>\n<li><p>When both axes in the coordinate are  value axes, every data item needs one array, and at least two of them should represent <code>x</code>,  <code>y</code>in cartesian coordinates or <code>radius</code>, <code>angle</code>in polar coordinates, for example: </p>\n<pre><code class=\"lang-js\"> [[3.4, 4.5, 15], [4.2, 2.3, 20], [10.8, 9.5, 30], [7.2, 8.8, 18]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n<li><p>When both axes in the coordinate are  category axes, every data item also needs one array, a single data item needs to have at least two values representing category index or name on two axes, for example: </p>\n<pre><code class=\"lang-js\"> [[0, 0, 2], [&#39;monday&#39;, 2, 1], [2, 1, 2], [3, 3, 5]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n</ol>\n<pre><code>Examples of double category axis can refer to [Github Punchcard](http://echarts.baidu.com/gallery/editor.html?c=scatter-punchCard).\n</code></pre><p>When it needs to customize certain data label, array item can be treated as subject, among which<code>value</code> stands for specific value, for example: </p>\n<pre><code class=\"lang-js\">[\n    12, 34,\n    {\n        value : 56,\n        //self-define label format, only valid for this data item\n        label: {},\n        //special self-define itemStyle, only valid for this data item\n        itemStyle:{}\n    },\n    10, 23\n]\n</code></pre>\n<p><strong>Tip: </strong>When data to certain category does not exist (ps: &#39;inexistence&#39; doesn&#39;t mean the value is 0), can use&#39;-&#39;to represent, when there is no data, it should be disconnected in  line chart, and no graph in other graphics.</p>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the name of data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>the value of data item.</p>\n"
                      },
                      "symbol": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>single dataLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                      },
                      "symbolSize": {
                        "type": [
                          "number",
                          "Array"
                        ],
                        "descriptionCN": "<p>single dataLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                      },
                      "symbolRotate": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>single dataRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                      },
                      "symbolOffset": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>single dataLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                        "default": "[0, 0]"
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "inside"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the style setting about single data point(bubble).</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li><p>Through <a href=\"#series-scatter.markPoint.data.x\">x</a>, <a href=\"#series-scatter.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</p>\n</li>\n<li><p>Use <a href=\"#series-scatter.markPoint.data.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n<li><p>Use <a href=\"#series-scatter.markPoint.data.type\">type</a> attribute to label the maximum value and minimum value in the series directly.This is when you can use  <a href=\"#series-scatter.markPoint.data.valueIndex\">valueIndex</a>to assign the maximum value, minimum value and average value in any dimensions. Or use <a href=\"#series-scatter.markPoint.data.valueDim\">valueDim</a> to assign the maximum value, minimum value and average value in any dimensions.</p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;maximum&#39;,\n        type: &#39;max&#39;\n    }, \n    {\n        name: &#39;certain coordinate&#39;,\n        coord: [10, 20]\n    }, \n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "type": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on.</p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> minimum.</li>\n<li><code>&#39;max&#39;</code> maximum.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                          },
                          "valueIndex": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Available when using <a href=\"#series-scatter.markPoint.data.type\">type</a> it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis), and use the first value axis dimension by default.</p>\n"
                          },
                          "valueDim": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Available when using  <a href=\"#series-scatter.markPoint.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                          },
                          "coord": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Coordinate of the label.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-scatter.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li><p>Through <a href=\"#series-scatter.markLine.data.0.x\">x</a>, <a href=\"#series-scatter.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </p>\n</li>\n<li><p>Use <a href=\"#series-scatter.markLine.data.0.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n<li><p>Use <a href=\"#series-scatter.markLine.data.0.type\">type</a> attribute to label the maximum value and minimum value in the series directly. This is when you can use  <a href=\"#series-scatter.markLine.data.0.valueIndex\">valueIndex</a> to assign the maximum value, minimum value and average value in any dimensions. Or you can use <a href=\"#series-scatter.markPoint.data.valueDim\">valueDim</a> to assign the maximum value, minimum value and average value in any dimensions.</p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p>You can also set the type of the marking line through <code>type</code> , whether it is the maximum value or average value. Likewise, dimensions can be assigned through <code>valueIndex</code>.</p>\n<pre><code>data: [\n    {\n        name: &#39;Average&#39;,\n        // Support &#39;average&#39;, &#39;min&#39;, &#39;max&#39;\n        type: &#39;average&#39;\n    },\n    [\n        {\n            // Items of starting point and finishing point share one name\n            name: &#39;Minimum value to maximum value&#39;,\n            type: &#39;min&#39;\n        },\n        {\n            type: &#39;max&#39;\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two coordinates&#39;,\n            coord: [10, 20]\n        },\n        {\n            coord: [20, 30]\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on. </p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> maximum value.</li>\n<li><code>&#39;max&#39;</code> minimum value.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                            },
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on. </p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> maximum value.</li>\n<li><code>&#39;max&#39;</code> minimum value.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                            },
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>scatter diagram zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>scatter diagram all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "cubicOut"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p>The scatter (bubble) graph with ripple animation. The special animation effect can visually highlights some data.</p>\n<p><strong>Tip:</strong>  The effects of map was achieved through markPoint in ECharts 2.x. However, in  ECharts 3, effectScatter on geographic coordinate is recommended for achieving that effects of map.</p>\n<p><strong>Here is the example: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=effectScatter-map&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'effectScatter'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "legendHoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable joint highlights <a href=\"#legend\">legend</a> when hover.</p>\n",
                  "default": true
                },
                "effectType": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Type of effect. Only ripple effect of <code>&#39;ripple&#39;</code> is supported currently.</p>\n",
                  "default": "'ripple'"
                },
                "showEffectOn": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>When to show the effect.</p>\n<p><strong>Options: </strong></p>\n<ul>\n<li><code>&#39;render&#39;</code> Show the effect when rendering is done.</li>\n<li><code>&#39;emphasis&#39;</code> Show the effect when it is highlight (hover).</li>\n</ul>\n",
                  "default": "'render'"
                },
                "rippleEffect": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Related configurations about ripple effect.</p>\n",
                  "properties": {
                    "period": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The duration of animation.</p>\n",
                      "default": 4
                    },
                    "scale": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The maximum zooming scale of ripples in animation.</p>\n",
                      "default": 2.5
                    },
                    "brushType": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>The brush type for ripples. options: <code>&#39;stroke&#39;</code> and <code>&#39;fill&#39;</code>.</p>\n",
                      "default": "'fill'"
                    }
                  }
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;cartesian2d&#39;</code></p>\n<p>  Using a two-dimensional Cartesian coordinate (also known as Cartesian coordinate), through <a href=\"#series-bar.xAxisIndex\">xAxisIndex</a>, <a href=\"#series-bar.yAxisIndex\">yAxisIndex</a> to assign the corresponding axis component.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&#39;polar&#39;</code></p>\n<p>  Using polar coordinates, through <a href=\"#series-bar.polarIndex\">polarIndex</a> to assign the corresponding polar coordinate component.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&#39;geo&#39;</code></p>\n<p>  Using geographic coordinate, through <a href=\"#series-bar.geoIndex\">geoIndex</a> to assign the corresponding geographic coordinate components.</p>\n</li>\n</ul>\n",
                  "default": "'cartesian2d'"
                },
                "xAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of  <a href=\"#xAxis\">x axis</a>, which is  useful when there are multiple x axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "yAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#yAxis\">y axis</a>, which is  useful when there are multiple y axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "polarIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#polar\">Polar coordinate</a>, which is  useful when there are multiple polar coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "geoIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#geo\">geographic coordinate</a>, which is  useful when there are multiple geographic coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "symbol": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                  "default": "'circle'"
                },
                "symbolSize": {
                  "type": [
                    "number",
                    "Array"
                  ],
                  "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n",
                  "default": 10
                },
                "symbolRotate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                },
                "symbolOffset": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                  "default": "[0, 0]"
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>text label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                          "default": "'inside'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p> graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color",
                            "Function"
                          ],
                          "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n<p>Support the use of callback functions. Callback function takes the following forms: </p>\n<pre><code class=\"lang-js\">(params: Object) =&gt; Color\n</code></pre>\n<p>Incoming are the data item <code>seriesIndex</code>, <code>dataIndex</code>, <code>data</code>, <code>value</code> and other parameters.</p>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Array of data content in series.Array item usually is specific data item. Followings are three data formats </p>\n<ol>\n<li><p>When an axis in the coordinate is category axis, data can be the value of one dimension, the length of array equals to the length of <a href=\"#xAxis.data\">xAxis.data</a>,which is the label array of category axis content.And there is a  one-to-one correspondence between them, for example: </p>\n<pre><code class=\"lang-js\"> [12, 34, 56, 10, 23]\n</code></pre>\n</li>\n<li><p>When both axes in the coordinate are  value axes, every data item needs one array, and at least two of them should represent <code>x</code>,  <code>y</code>in cartesian coordinates or <code>radius</code>, <code>angle</code>in polar coordinates, for example: </p>\n<pre><code class=\"lang-js\"> [[3.4, 4.5, 15], [4.2, 2.3, 20], [10.8, 9.5, 30], [7.2, 8.8, 18]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n<li><p>When both axes in the coordinate are  category axes, every data item also needs one array, a single data item needs to have at least two values representing category index or name on two axes, for example: </p>\n<pre><code class=\"lang-js\"> [[0, 0, 2], [&#39;monday&#39;, 2, 1], [2, 1, 2], [3, 3, 5]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n</ol>\n<pre><code>Examples of double category axis can refer to [Github Punchcard](http://echarts.baidu.com/gallery/editor.html?c=scatter-punchCard).\n</code></pre><p>When it needs to customize certain data label, array item can be treated as subject, among which<code>value</code> stands for specific value, for example: </p>\n<pre><code class=\"lang-js\">[\n    12, 34,\n    {\n        value : 56,\n        //self-define label format, only valid for this data item\n        label: {},\n        //special self-define itemStyle, only valid for this data item\n        itemStyle:{}\n    },\n    10, 23\n]\n</code></pre>\n<p><strong>Tip: </strong>When data to certain category does not exist (ps: &#39;inexistence&#39; doesn&#39;t mean the value is 0), can use&#39;-&#39;to represent, when there is no data, it should be disconnected in  line chart, and no graph in other graphics.</p>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "symbol": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>single dataLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                        "default": "'circle'"
                      },
                      "symbolSize": {
                        "type": [
                          "number",
                          "Array"
                        ],
                        "descriptionCN": "<p>single dataLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n",
                        "default": 4
                      },
                      "symbolRotate": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>single dataRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                      },
                      "symbolOffset": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>single dataLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                        "default": "[0, 0]"
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "inside"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li><p>Through <a href=\"#series-effectScatter.markPoint.data.x\">x</a>, <a href=\"#series-effectScatter.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</p>\n</li>\n<li><p>Use <a href=\"#series-effectScatter.markPoint.data.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n<li><p>Use <a href=\"#series-effectScatter.markPoint.data.type\">type</a> attribute to label the maximum value and minimum value in the series directly.This is when you can use  <a href=\"#series-effectScatter.markPoint.data.valueIndex\">valueIndex</a>to assign the maximum value, minimum value and average value in any dimensions. Or use <a href=\"#series-effectScatter.markPoint.data.valueDim\">valueDim</a> to assign the maximum value, minimum value and average value in any dimensions.</p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;maximum&#39;,\n        type: &#39;max&#39;\n    }, \n    {\n        name: &#39;certain coordinate&#39;,\n        coord: [10, 20]\n    }, \n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "type": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on.</p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> minimum.</li>\n<li><code>&#39;max&#39;</code> maximum.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                          },
                          "valueIndex": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Available when using <a href=\"#series-effectScatter.markPoint.data.type\">type</a> it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis), and use the first value axis dimension by default.</p>\n"
                          },
                          "valueDim": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Available when using  <a href=\"#series-effectScatter.markPoint.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                          },
                          "coord": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Coordinate of the label.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n<p>prefix</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-effectScatter.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li><p>Through <a href=\"#series-effectScatter.markLine.data.0.x\">x</a>, <a href=\"#series-effectScatter.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </p>\n</li>\n<li><p>Use <a href=\"#series-effectScatter.markLine.data.0.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n<li><p>Use <a href=\"#series-effectScatter.markLine.data.0.type\">type</a> attribute to label the maximum value and minimum value in the series directly. This is when you can use  <a href=\"#series-effectScatter.markLine.data.0.valueIndex\">valueIndex</a> to assign the maximum value, minimum value and average value in any dimensions. Or you can use <a href=\"#series-effectScatter.markPoint.data.valueDim\">valueDim</a> to assign the maximum value, minimum value and average value in any dimensions.</p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p>You can also set the type of the marking line through <code>type</code> , whether it is the maximum value or average value. Likewise, dimensions can be assigned through <code>valueIndex</code>.</p>\n<pre><code>data: [\n    {\n        name: &#39;Average&#39;,\n        // Support &#39;average&#39;, &#39;min&#39;, &#39;max&#39;\n        type: &#39;average&#39;\n    },\n    [\n        {\n            // Items of starting point and finishing point share one name\n            name: &#39;Minimum value to maximum value&#39;,\n            type: &#39;min&#39;\n        },\n        {\n            type: &#39;max&#39;\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two coordinates&#39;,\n            coord: [10, 20]\n        },\n        {\n            coord: [20, 30]\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on. </p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> maximum value.</li>\n<li><code>&#39;max&#39;</code> minimum value.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                            },
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>special label types are used to label maximum value, minimum value and so on. </p>\n<p><strong>Options are:</strong></p>\n<ul>\n<li><code>&#39;min&#39;</code> maximum value.</li>\n<li><code>&#39;max&#39;</code> minimum value.</li>\n<li><code>&#39;average&#39;</code> average value</li>\n</ul>\n"
                            },
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "cubicOut"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>radar chart</strong></p>\n<p>Radar chart is mainly used to show multivariable data, such as the analysis of football player&#39;s each attribute. It relies on <a href=\"#radar\">radar</a> component.</p>\n<p>Here is the sample of AQI which is showed in radar chart.</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=radar-aqi&edit=1&reset=1\" width=\"600\" height=\"500\" ></iframe>\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'radar'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "radarIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The index of <a href=\"#radar\">radar</a> component used in radar chart. </p>\n"
                },
                "symbol": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                  "default": "'circle'"
                },
                "symbolSize": {
                  "type": [
                    "number",
                    "Array",
                    "Function"
                  ],
                  "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-radar.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                  "default": 4
                },
                "symbolRotate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                },
                "symbolOffset": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                  "default": "[0, 0]"
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>text label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                          "default": "'top'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>The item style of the inflection point of broken line. </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color",
                            "Function"
                          ],
                          "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n<p>Support the use of callback functions. Callback function takes the following forms: </p>\n<pre><code class=\"lang-js\">(params: Object) =&gt; Color\n</code></pre>\n<p>Incoming are the data item <code>seriesIndex</code>, <code>dataIndex</code>, <code>data</code>, <code>value</code> and other parameters.</p>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "lineStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>line style.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 0
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 0
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "areaStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>area filling style.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Fill color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Fill color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>The data in radar chart is multivariable (dimension), here is the example: </p>\n<pre><code class=\"lang-js\">data : [\n    {\n        value : [4300, 10000, 28000, 35000, 50000, 19000],\n        name : &#39;budget allocation (Allocated Budget) &#39;\n    },\n     {\n        value : [5000, 14000, 28000, 31000, 42000, 21000],\n        name : &#39;Actual Spending (Actual Spending) &#39;\n    }\n]\n</code></pre>\n<p>Among them, <code>value</code> item array are specific datas, of which all the values correspond with <a href=\"#radar.indicator\">radar.indicator</a> one by one.   </p>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>data item name</p>\n"
                      },
                      "value": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>the numerical value of single data item.     </p>\n"
                      },
                      "symbol": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>single dataLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                        "default": "'circle'"
                      },
                      "symbolSize": {
                        "type": [
                          "number",
                          "Array"
                        ],
                        "descriptionCN": "<p>single dataLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n",
                        "default": 4
                      },
                      "symbolRotate": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>single dataRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                      },
                      "symbolOffset": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>single dataLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                        "default": "[0, 0]"
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>The style setting about the text of single inflection point.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "top"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>The style setting about the symbol of single inflection point.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Bar color..</p>\n",
                                "default": "'auto'"
                              },
                              "barBorderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>The bodrder color of bar.</p>\n",
                                "default": "'#000'"
                              },
                              "barBorderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>The bodrder width of bar. defaults to have no border.</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Bar color..</p>\n",
                                "default": "'auto'"
                              },
                              "barBorderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>The bodrder color of bar.</p>\n",
                                "default": "'#000'"
                              },
                              "barBorderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>The bodrder width of bar. defaults to have no border.</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      },
                      "lineStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the line style of single item.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "\"#000\""
                              },
                              "width": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>line width.</p>\n",
                                "default": 0
                              },
                              "type": {
                                "type": [
                                  "string"
                                ],
                                "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                "default": "solid"
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "\"#000\""
                              },
                              "width": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>line width.</p>\n",
                                "default": 0
                              },
                              "type": {
                                "type": [
                                  "string"
                                ],
                                "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                "default": "solid"
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      },
                      "areaStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>The area filling style of single item. </p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Fill color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "\"#000\""
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Fill color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "\"#000\""
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>radar chart zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>radar chart all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "cubicOut"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><a href=\"https://en.wikipedia.org/wiki/Treemapping\" target=\"_blank\">Treemap</a> is a common visual way to present 『hierarchical data 』『tree data』.It primarily highlights the important nodes at all hierarchies in 『Tree』with area.</p>\n<p><strong>Example: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=treemap-obama&edit=1&reset=1\" width=\"700\" height=\"580\" ></iframe>\n\n\n\n<p><br>\n<strong>visual mapping: </strong></p>\n<p>treemap firstly map the numberical values to the visual element 『area』.  </p>\n<p>Moreover, it also map other dimensions of data to colors, lightness of colors and etc.. </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br>\n<br>\n<br>\nTip: Compared with ECharts2, Treemap configuration items have changed. Some  immature configuration modes are no longer supported or compatible: </p>\n<ul>\n<li><p><code>center/size</code> locate mode is no longer supported, and the locate mode of <code>left/top/bottom/right/width/height</code> would be used uniformly.</p>\n</li>\n<li><p>the configuration of <code>breadcrumb</code> is moved outside the <code>itemStyle.normal/itemStyle.emphasis</code>, which is in the same level with <code>itemStyle</code>.</p>\n</li>\n<li><p><code>root</code> setting is not avaliable temporarily.At present, <code>zoom</code> could be used to see the details in the subordinate levels.  </p>\n</li>\n<li><p>the configuration of <code>label</code> is moved outside the <code>itemStyle.normal/itemStyle.emphasis</code>, which is in the same level with <code>itemStyle</code>.</p>\n</li>\n<li><p><code>itemStyle.normal.childBorderWidth</code>、<code>itemStyle.normal.childBorderColor</code> are not avaliable anymore (because this configuration can only define 2 levels of treemap).<a href=\"#series-treemap.levels\">series-treemap.levels</a> is used uniformly to define all levels.</p>\n</li>\n</ul>\n<p><br>\n<br></p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'treemap'"
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "left": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>treemap  distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "'auto'"
                },
                "top": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>treemap  distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "middle"
                },
                "right": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>treemap  distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                  "default": "'auto'"
                },
                "bottom": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>treemap  distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                  "default": "'auto'"
                },
                "width": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>treemap  width of component.</p>\n",
                  "default": "80%"
                },
                "height": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>treemap  height of component.</p>\n",
                  "default": "80%"
                },
                "squareRatio": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>expected square ratio. The layout would approach the ratio as close as possible.  </p>\n<p>It defaults to be the golden ratio: <code>0.5 * (1 + Math.sqrt(5))</code>.</p>\n"
                },
                "roam": {
                  "type": [
                    "boolean",
                    "string"
                  ],
                  "descriptionCN": "<p>Whether to enable dragging roam (move and zoom). Optional values are: </p>\n<ul>\n<li><code>false</code>: close.</li>\n<li><code>&#39;scale&#39;</code> or  <code>&#39;zoom&#39;</code>: zoom only.</li>\n<li><code>&#39;move&#39;</code> or <code>&#39;pan&#39;</code>: translation only.</li>\n<li><code>true</code>: both zoom and translation are avaliable.</li>\n</ul>\n",
                  "default": true
                },
                "nodeClick": {
                  "type": [
                    "boolean",
                    "string"
                  ],
                  "descriptionCN": "<p>Optional values are: </p>\n<ul>\n<li><code>false</code>: no response after node clicking.</li>\n<li><code>&#39;zoomToNode&#39;</code>: zooming to node after clicking the node.</li>\n<li><code>&#39;link&#39;</code>: if there is <a href=\"#series-treemap.data.link\">link</a> in node data, hyperlink jump would happen after clickong the node. </li>\n</ul>\n",
                  "default": "'zoomToNode'"
                },
                "zoomToNodeRatio": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Clicking on a node, and then this node would  automatically zoom in to the suitable ratio (node area ratio of node occuppying the viewing area). This configuration is the ratio.</p>\n",
                  "default": "0.32*0.32"
                },
                "levels": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p><strong>multiple levels configuration</strong></p>\n<p>treemap adopts『3-level configuration』such as『series』--『each level』--『each node』.</p>\n<p>Otherwise, we can configurate each node and also can configurate each level of the tree, or set a overall configuration on the series.</p>\n<p>The most frequently used one is『configurate each level』,  the configuration item of <code>levels</code> is the configuration of each level.  For example: </p>\n<pre><code class=\"lang-javascript\">levels: [\n    {...}, // top configuration\n    {...}, // configuration of the next level\n    {...}, // configuration of the level after the next level\n    ...\n]\n</code></pre>\n<p><br>\n<strong>The rules for visual mapping</strong></p>\n<p>Treemap primarily focus on how to visually distinguish 『different levels』 from 『different categories in the same level』, which require to properly set 『rectangular color』,『border thickness』, 『border color』and even『color saturation of rectangular』 and so on on each level.</p>\n<p>Reference to <a href=\"http://echarts.baidu.com/gallery/editor.html?c=treemap-disk&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. The top level is divided by colors into several parts respectively in 『red』『green』『blue』and etc.. Each color block is the next level, using color saturation to distinguish (reference to <code>colorSaturation</code>). The border of the outermost level of Rectangle is 『white』. The border of the next level rectangular is the processed result of current block color added with saturation (See <code>borderColorSaturation</code>).</p>\n<p>Treemap supports this configuration through the following rule: each level computes visual information (the configuration in levels)  of  user configuration such as<code>color</code>、<code>colorSaturation</code>、<code>borderColor</code>、<code>colorSaturation</code>, then pass them to the child node (sublevel). If there is no configuration of child node, the configuration of the parent node would be inherited, or its own configuration would be used.</p>\n<p>Therefore, what can be done is the following: the parent level configurates <code>color</code> list, the child level configurates <code>colorSaturation</code>. Each node of parent level would obtain a color from the <code>color</code> list; and the node of child level would obtain a color from <code>colorSaturation</code> and compound it with the color inherited from the parent node to get its final color.</p>\n<p><br>\n<strong>dimensions and『extra visual mapping』</strong></p>\n<p>Example: every <code>value</code> field is an Array, in which every item corresponds with a dimension (dimension).</p>\n<pre><code class=\"lang-javascript\">[\n    {\n        value: [434, 6969, 8382],\n        children: [\n            {\n                value: [1212, 4943, 5453],\n                id: &#39;someid-1&#39;,\n                name: &#39;description of this node&#39;,\n                children: [...]\n            },\n            {\n                value: [4545, 192, 439],\n                id: &#39;someid-2&#39;,\n                name: &#39;description of this node&#39;,\n                children: [...]\n            },\n            ...\n        ]\n    },\n    {\n        value: [23, 59, 12],\n        children: [...]\n    },\n    ...\n]\n</code></pre>\n<p>treemap defalts to map the first dimension (the first item of Array)  to 『area』. If users want to express more information, users could map another dimension (<a href=\"#series-treemap.viusalDimension\">series-treemap.visualDimension</a>)  to another 『visual element』, such as color lightness and so on.  See the status when <code>Growth</code> is selected in legend in the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=treemap-obama&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>.</p>\n<p><br></p>\n<p><strong>rectangle border/how to avoid confusion with gap setting</strong></p>\n<p>If the rectangle gap is set with the same color, there may be confusion when different levels of rectangular display at the same time.</p>\n<p>See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/treemap-borderColor&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. It should be noticed that the child rectangles in the included red sections are at the deeper level which is different from the level of other rectangles distinguised by white gaps. Therefore, for distinguishing it from other case, we set the gap line color of the rectangular in red section as 『red color with saturation change』in <code>borderColorSaturation</code>.</p>\n",
                  "default": "[]",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "visualDimension": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p><code>treemap</code> supports visual mapping of other dimensions of data.</p>\n<p>First of all, in data format (See <a href=\"#series-treemap.data\">series-treemap.data</a>)  of treemap, the <code>value</code> of every node could be an array. And every item of an array is a『dimension』 (dimension). <code>visualDimension</code> assigns which item would be used in extra『visual mapping』. It defaults to be the <code>0</code> item.   </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>visualDimension</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": 0
                      },
                      "color": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>the color list for nodes at the same level. When it defaults to be empty, the color list of system would be choosed.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>color</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n"
                      },
                      "colorAlpha": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>It indicates the selecting range of color thickness for nodes at the same level. the range of values is 0 ~ 1.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>colorAlpha</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": null
                      },
                      "colorSaturation": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>It Indicates the selecting range of color thickness for nodes at the same level. the range of values is 0 ~ 1.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>colorSaturation</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": null
                      },
                      "colorMappingBy": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>It indicates that what should be based on When the nodes at the same level select from the color list (See the <code>color</code> attribute). Optional values are: </p>\n<ul>\n<li><code>&#39;value&#39;</code>: </li>\n</ul>\n<p>Map the value of nodes (the <a href=\"#series-treemap.data.value\">series-treemap.data.value</a>)  to the color list. The color obtained through this way reflects values of nodes. It could be set with <code>visualDimension</code> attribute and map with that latitudinal value of data. </p>\n<ul>\n<li><code>&#39;index&#39;</code>: </li>\n</ul>\n<p>Map the <code>index</code>(serial number) of nodes to the color list. Namely, in the same level, the first node select the first color from the color list,and the second node gets the second color.  The color obtained through this way could distinguish 2 adjacent nodes easily.</p>\n<ul>\n<li><code>&#39;id&#39;</code>: </li>\n</ul>\n<p>Map the <code>id</code> (namely <a href=\"#series-treemap.data.id\">series-treemap.data.id</a>)  of nodes to the color list. <code>id</code> is assigned by users. It could make sure the consistency that the same <code>id</code> maps to the same color when treemap pass the variable value of  setOption. See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=treemap-obama&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>colorMappingBy</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": "'index'"
                      },
                      "visibleMin": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>If the area of a rectangular node is less than this value (unit: px square), the node will not display.</p>\n<p>Without this limitation, the small nodes will affect the display effect.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>visibleMin</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": 10
                      },
                      "childrenVisibleMin": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>If the area of a rectangular node is less than this value (unit: px square), the child nodes of this node will not display.</p>\n<p>This can hide the details of nodes when the rectangular area is not large enough. When users zoom nodes with mouse, the child node would show if the area is larger than this threshold. </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>childrenVisibleMin</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": null
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p><code>label</code> decribes the text label in each rectangle.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>label</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n<p><br></p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wether to show the text label.</p>\n",
                                "default": true
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "['50%', '50%']"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "ellipsis": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>When the text is beyond the rectangle edges, whether to replace the excess part with apostrophe.</p>\n",
                                    "default": true
                                  },
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "'#fff'"
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  },
                                  "align": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>horizontal alignment. Optional values are <code>&#39;center&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                                    "default": "'center'"
                                  },
                                  "baseline": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>vertical alignment, Optional values are  <code>&#39;middle&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                                    "default": "'middle'"
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wether to show the text label.</p>\n",
                                "default": true
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "['50%', '50%']"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "ellipsis": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>When the text is beyond the rectangle edges, whether to replace the excess part with apostrophe.</p>\n",
                                    "default": true
                                  },
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "'#fff'"
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  },
                                  "align": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>horizontal alignment. Optional values are <code>&#39;center&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                                    "default": "'center'"
                                  },
                                  "baseline": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>vertical alignment, Optional values are  <code>&#39;middle&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                                    "default": "'middle'"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>itemStyle</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n<p><br></p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color of rectangle. It defaults to obtain colors from overall palette <a href=\"#color\">option.color</a>.</p>\n",
                                "default": null
                              },
                              "colorAlpha": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the color thickness. The value range is floating-point number between 0 ~ 1.</p>\n",
                                "default": null
                              },
                              "colorSaturation": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the color saturation of rectangle. The value range is floating-point number between 0 ~ 1.</p>\n",
                                "default": null
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the border width of rectangle. There is no border when it is 0. </p>\n",
                                "default": 0
                              },
                              "gapWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the gap width of child rectangle inside a rectangle.</p>\n",
                                "default": 0
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the border color of rectangle, supporting <code>color</code> with different formats.  </p>\n",
                                "default": "'#fff',"
                              },
                              "borderColorSaturation": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color saturation of rectangle border. The value range is floating-point number between 0 ~ 1.</p>\n<p>Tips: </p>\n<p>If this property is set,  the <code>borderColor</code> setting is invalid. Instead, the color (such as the color inherited from the parent node) calculated by the current node. The final color would be get when the <code>borderColorSaturation</code> is set on this color value. In this way, 『different sections have rectangular interval lines with different colors』effect could be produced, easily to distinguish levels.</p>\n<p><br></p>\n<p><strong>rectangle border/how to avoid confusion with gap setting</strong></p>\n<p>If the rectangle gap is set with the same color, there may be confusion when different levels of rectangular display at the same time.</p>\n<p>See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/treemap-borderColor&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. It should be noticed that the child rectangles in the included red sections are at the deeper level which is different from the level of other rectangles distinguised by white gaps. Therefore, for distinguishing it from other case, we set the gap line color of the rectangular in red section as 『red color with saturation change』in <code>borderColorSaturation</code>.</p>\n",
                                "default": null
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color of rectangle. It defaults to obtain colors from overall palette <a href=\"#color\">option.color</a>.</p>\n",
                                "default": null
                              },
                              "colorAlpha": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the color thickness. The value range is floating-point number between 0 ~ 1.</p>\n",
                                "default": null
                              },
                              "colorSaturation": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the color saturation of rectangle. The value range is floating-point number between 0 ~ 1.</p>\n",
                                "default": null
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the border width of rectangle. There is no border when it is 0. </p>\n",
                                "default": 0
                              },
                              "gapWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the gap width of child rectangle inside a rectangle.</p>\n",
                                "default": 0
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the border color of rectangle, supporting <code>color</code> with different formats.  </p>\n",
                                "default": "'#fff',"
                              },
                              "borderColorSaturation": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color saturation of rectangle border. The value range is floating-point number between 0 ~ 1.</p>\n<p>Tips: </p>\n<p>If this property is set,  the <code>borderColor</code> setting is invalid. Instead, the color (such as the color inherited from the parent node) calculated by the current node. The final color would be get when the <code>borderColorSaturation</code> is set on this color value. In this way, 『different sections have rectangular interval lines with different colors』effect could be produced, easily to distinguish levels.</p>\n<p><br></p>\n<p><strong>rectangle border/how to avoid confusion with gap setting</strong></p>\n<p>If the rectangle gap is set with the same color, there may be confusion when different levels of rectangular display at the same time.</p>\n<p>See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/treemap-borderColor&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. It should be noticed that the child rectangles in the included red sections are at the deeper level which is different from the level of other rectangles distinguised by white gaps. Therefore, for distinguishing it from other case, we set the gap line color of the rectangular in red section as 『red color with saturation change』in <code>borderColorSaturation</code>.</p>\n",
                                "default": null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "visualDimension": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p><code>treemap</code> supports visual mapping of other dimensions of data.</p>\n<p>First of all, in data format (See <a href=\"#series-treemap.data\">series-treemap.data</a>)  of treemap, the <code>value</code> of every node could be an array. And every item of an array is a『dimension』 (dimension). <code>visualDimension</code> assigns which item would be used in extra『visual mapping』. It defaults to be the <code>0</code> item.   </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>visualDimension</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                  "default": 0
                },
                "color": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>the color list for nodes at the same level. When it defaults to be empty, the color list of system would be choosed.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>color</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n"
                },
                "colorAlpha": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>It indicates the selecting range of color thickness for nodes at the same level. the range of values is 0 ~ 1.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>colorAlpha</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                  "default": null
                },
                "colorSaturation": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>It Indicates the selecting range of color thickness for nodes at the same level. the range of values is 0 ~ 1.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>colorSaturation</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                  "default": null
                },
                "colorMappingBy": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>It indicates that what should be based on When the nodes at the same level select from the color list (See the <code>color</code> attribute). Optional values are: </p>\n<ul>\n<li><code>&#39;value&#39;</code>: </li>\n</ul>\n<p>Map the value of nodes (the <a href=\"#series-treemap.data.value\">series-treemap.data.value</a>)  to the color list. The color obtained through this way reflects values of nodes. It could be set with <code>visualDimension</code> attribute and map with that latitudinal value of data. </p>\n<ul>\n<li><code>&#39;index&#39;</code>: </li>\n</ul>\n<p>Map the <code>index</code>(serial number) of nodes to the color list. Namely, in the same level, the first node select the first color from the color list,and the second node gets the second color.  The color obtained through this way could distinguish 2 adjacent nodes easily.</p>\n<ul>\n<li><code>&#39;id&#39;</code>: </li>\n</ul>\n<p>Map the <code>id</code> (namely <a href=\"#series-treemap.data.id\">series-treemap.data.id</a>)  of nodes to the color list. <code>id</code> is assigned by users. It could make sure the consistency that the same <code>id</code> maps to the same color when treemap pass the variable value of  setOption. See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=treemap-obama&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>colorMappingBy</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                  "default": "'index'"
                },
                "visibleMin": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>If the area of a rectangular node is less than this value (unit: px square), the node will not display.</p>\n<p>Without this limitation, the small nodes will affect the display effect.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>visibleMin</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                  "default": 10
                },
                "childrenVisibleMin": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>If the area of a rectangular node is less than this value (unit: px square), the child nodes of this node will not display.</p>\n<p>This can hide the details of nodes when the rectangular area is not large enough. When users zoom nodes with mouse, the child node would show if the area is larger than this threshold. </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>childrenVisibleMin</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                  "default": null
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p><code>label</code> decribes the text label in each rectangle.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>label</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n<p><br></p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wether to show the text label.</p>\n",
                          "default": true
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                          "default": "['50%', '50%']"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "ellipsis": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>When the text is beyond the rectangle edges, whether to replace the excess part with apostrophe.</p>\n",
                              "default": true
                            },
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "'#fff'"
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            },
                            "align": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>horizontal alignment. Optional values are <code>&#39;center&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                              "default": "'center'"
                            },
                            "baseline": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>vertical alignment, Optional values are  <code>&#39;middle&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                              "default": "'middle'"
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wether to show the text label.</p>\n",
                          "default": true
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                          "default": "['50%', '50%']"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "ellipsis": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>When the text is beyond the rectangle edges, whether to replace the excess part with apostrophe.</p>\n",
                              "default": true
                            },
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "'#fff'"
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            },
                            "align": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>horizontal alignment. Optional values are <code>&#39;center&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                              "default": "'center'"
                            },
                            "baseline": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>vertical alignment, Optional values are  <code>&#39;middle&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                              "default": "'middle'"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>itemStyle</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n<p><br></p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>the color of rectangle. It defaults to obtain colors from overall palette <a href=\"#color\">option.color</a>.</p>\n",
                          "default": null
                        },
                        "colorAlpha": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the color thickness. The value range is floating-point number between 0 ~ 1.</p>\n",
                          "default": null
                        },
                        "colorSaturation": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the color saturation of rectangle. The value range is floating-point number between 0 ~ 1.</p>\n",
                          "default": null
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the border width of rectangle. There is no border when it is 0. </p>\n",
                          "default": 0
                        },
                        "gapWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the gap width of child rectangle inside a rectangle.</p>\n",
                          "default": 0
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>the border color of rectangle, supporting <code>color</code> with different formats.  </p>\n",
                          "default": "'#fff',"
                        },
                        "borderColorSaturation": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>the color saturation of rectangle border. The value range is floating-point number between 0 ~ 1.</p>\n<p>Tips: </p>\n<p>If this property is set,  the <code>borderColor</code> setting is invalid. Instead, the color (such as the color inherited from the parent node) calculated by the current node. The final color would be get when the <code>borderColorSaturation</code> is set on this color value. In this way, 『different sections have rectangular interval lines with different colors』effect could be produced, easily to distinguish levels.</p>\n<p><br></p>\n<p><strong>rectangle border/how to avoid confusion with gap setting</strong></p>\n<p>If the rectangle gap is set with the same color, there may be confusion when different levels of rectangular display at the same time.</p>\n<p>See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/treemap-borderColor&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. It should be noticed that the child rectangles in the included red sections are at the deeper level which is different from the level of other rectangles distinguised by white gaps. Therefore, for distinguishing it from other case, we set the gap line color of the rectangular in red section as 『red color with saturation change』in <code>borderColorSaturation</code>.</p>\n",
                          "default": null
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>the color of rectangle. It defaults to obtain colors from overall palette <a href=\"#color\">option.color</a>.</p>\n",
                          "default": null
                        },
                        "colorAlpha": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the color thickness. The value range is floating-point number between 0 ~ 1.</p>\n",
                          "default": null
                        },
                        "colorSaturation": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the color saturation of rectangle. The value range is floating-point number between 0 ~ 1.</p>\n",
                          "default": null
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the border width of rectangle. There is no border when it is 0. </p>\n",
                          "default": 0
                        },
                        "gapWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the gap width of child rectangle inside a rectangle.</p>\n",
                          "default": 0
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>the border color of rectangle, supporting <code>color</code> with different formats.  </p>\n",
                          "default": "'#fff',"
                        },
                        "borderColorSaturation": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>the color saturation of rectangle border. The value range is floating-point number between 0 ~ 1.</p>\n<p>Tips: </p>\n<p>If this property is set,  the <code>borderColor</code> setting is invalid. Instead, the color (such as the color inherited from the parent node) calculated by the current node. The final color would be get when the <code>borderColorSaturation</code> is set on this color value. In this way, 『different sections have rectangular interval lines with different colors』effect could be produced, easily to distinguish levels.</p>\n<p><br></p>\n<p><strong>rectangle border/how to avoid confusion with gap setting</strong></p>\n<p>If the rectangle gap is set with the same color, there may be confusion when different levels of rectangular display at the same time.</p>\n<p>See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/treemap-borderColor&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. It should be noticed that the child rectangles in the included red sections are at the deeper level which is different from the level of other rectangles distinguised by white gaps. Therefore, for distinguishing it from other case, we set the gap line color of the rectangular in red section as 『red color with saturation change』in <code>borderColorSaturation</code>.</p>\n",
                          "default": null
                        }
                      }
                    }
                  }
                },
                "breadcrumb": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>breadcrumb, showing the path of current node.</p>\n",
                  "properties": {
                    "show": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to show the breadcrumb. </p>\n",
                      "default": true
                    },
                    "left": {
                      "type": [
                        "string",
                        "number"
                      ],
                      "descriptionCN": "<p>asdf  distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                      "default": "'center'"
                    },
                    "top": {
                      "type": [
                        "string",
                        "number"
                      ],
                      "descriptionCN": "<p>asdf  distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                      "default": "'auto'"
                    },
                    "right": {
                      "type": [
                        "string",
                        "number"
                      ],
                      "descriptionCN": "<p>asdf  distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                      "default": "'auto'"
                    },
                    "bottom": {
                      "type": [
                        "string",
                        "number"
                      ],
                      "descriptionCN": "<p>asdf  distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                      "default": 0
                    },
                    "height": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>the height of breadcrumb. .asdf <code>series-treemap.breadcrumb</code></p>\n",
                      "default": 22
                    },
                    "emptyItemWidth": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>When is no content in breadcrumb, this minimun width need to be set up.</p>\n",
                      "default": 25
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p> graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                      "properties": {
                        "normal\r": {
                          "type": [
                            "*"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>boxplotcolor of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "rgba(0,0,0,0.7)"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>boxplot stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "rgba(255,255,255,0.7)"
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>boxplotWidth of stroke. No stroke when it is 0 .</p>\n",
                              "default": 1
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n",
                              "default": 3
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n",
                              "default": "rgba(150,150,150,1)"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "#fff"
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis\r": {
                          "type": [
                            "*"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>boxplotcolor of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "rgba(0,0,0,0.7)"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>boxplot stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "rgba(255,255,255,0.7)"
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>boxplotWidth of stroke. No stroke when it is 0 .</p>\n",
                              "default": 1
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n",
                              "default": 3
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n",
                              "default": "rgba(150,150,150,1)"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "#fff"
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>the the data format of <a href=\"#series-treemap.data\">series-treemap.data</a> is tree. For example: </p>\n<pre><code class=\"lang-javascript\">[ // tips, the outmost level is an array. It is unnecessary to start from a root node. \n    {\n        value: 1212,\n        children: [\n            {\n                value: 2323,    // the value of value field, corresponding to area size.\n                                // it could also be array, such as [2323, 43, 55], in which the first item of array corresponds to the area size. \n                                // array is used for extra visual mapping. See details in series-treemp.levels. \n                id: &#39;someid-1&#39;, // id is not something have to be set.\n                                // If some node need to be changed by API, it need id to locate. \n                name: &#39;description of this node&#39;, // show the description text in rectangle.\n                children: [...],\n                label: {        // the special label definition of this node(if necessary)\n                    ...         // the format of label refers to series-treemap.label.\n                },\n                itemStyle: {    // the special itemStyle definition of this node(if necessary).\n                    ...         // the format of label refers to series-treemap.itemStyle.\n                }\n            },\n            {\n                value: 4545,\n                id: &#39;someid-2&#39;,\n                name: &#39;description of this node&#39;,\n                children: [\n                    {\n                        value: 5656,\n                        id: &#39;someid-3&#39;,\n                        name: &#39;description of this node&#39;,\n                        children: [...]\n                    },\n                    ...\n                ]\n            }\n        ]\n    },\n    {\n        value: [23, 59, 12]\n        // if there is no children, here could be nothing. \n    },\n    ...\n]\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "value": {
                        "type": [
                          "number",
                          "Array"
                        ],
                        "descriptionCN": "<p>The value of nodes in each tree, which corresponds to area size. It could be number or array, such as <code>[2323, 43, 55]</code>. So the first item corresponds to the area size.</p>\n"
                      },
                      "id": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the id of each tree node. id is not necessarily to be set. If some node need to be changed by API, it needs id to locate.  </p>\n"
                      },
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Show the description text in rectangle. </p>\n"
                      },
                      "visualDimension": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p><code>treemap</code> supports visual mapping of other dimensions of data.</p>\n<p>First of all, in data format (See <a href=\"#series-treemap.data\">series-treemap.data</a>)  of treemap, the <code>value</code> of every node could be an array. And every item of an array is a『dimension』 (dimension). <code>visualDimension</code> assigns which item would be used in extra『visual mapping』. It defaults to be the <code>0</code> item.   </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>visualDimension</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": 0
                      },
                      "color": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>the color list for nodes at the same level. When it defaults to be empty, the color list of system would be choosed.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>color</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n"
                      },
                      "colorAlpha": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>It indicates the selecting range of color thickness for nodes at the same level. the range of values is 0 ~ 1.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>colorAlpha</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": null
                      },
                      "colorSaturation": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>It Indicates the selecting range of color thickness for nodes at the same level. the range of values is 0 ~ 1.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>colorSaturation</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": null
                      },
                      "colorMappingBy": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>It indicates that what should be based on When the nodes at the same level select from the color list (See the <code>color</code> attribute). Optional values are: </p>\n<ul>\n<li><code>&#39;value&#39;</code>: </li>\n</ul>\n<p>Map the value of nodes (the <a href=\"#series-treemap.data.value\">series-treemap.data.value</a>)  to the color list. The color obtained through this way reflects values of nodes. It could be set with <code>visualDimension</code> attribute and map with that latitudinal value of data. </p>\n<ul>\n<li><code>&#39;index&#39;</code>: </li>\n</ul>\n<p>Map the <code>index</code>(serial number) of nodes to the color list. Namely, in the same level, the first node select the first color from the color list,and the second node gets the second color.  The color obtained through this way could distinguish 2 adjacent nodes easily.</p>\n<ul>\n<li><code>&#39;id&#39;</code>: </li>\n</ul>\n<p>Map the <code>id</code> (namely <a href=\"#series-treemap.data.id\">series-treemap.data.id</a>)  of nodes to the color list. <code>id</code> is assigned by users. It could make sure the consistency that the same <code>id</code> maps to the same color when treemap pass the variable value of  setOption. See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=treemap-obama&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>colorMappingBy</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": "'index'"
                      },
                      "visibleMin": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>If the area of a rectangular node is less than this value (unit: px square), the node will not display.</p>\n<p>Without this limitation, the small nodes will affect the display effect.</p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>visibleMin</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": 10
                      },
                      "childrenVisibleMin": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>If the area of a rectangular node is less than this value (unit: px square), the child nodes of this node will not display.</p>\n<p>This can hide the details of nodes when the rectangular area is not large enough. When users zoom nodes with mouse, the child node would show if the area is larger than this threshold. </p>\n<p>About the visual setting, see details in <a href=\"#series-treemap.levels\">series-treemap.levels</a>.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>childrenVisibleMin</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n",
                        "default": null
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p><code>label</code> decribes the text label in each rectangle.</p>\n<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>label</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n<p><br></p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wether to show the text label.</p>\n",
                                "default": true
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "['50%', '50%']"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "ellipsis": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>When the text is beyond the rectangle edges, whether to replace the excess part with apostrophe.</p>\n",
                                    "default": true
                                  },
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "'#fff'"
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  },
                                  "align": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>horizontal alignment. Optional values are <code>&#39;center&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                                    "default": "'center'"
                                  },
                                  "baseline": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>vertical alignment, Optional values are  <code>&#39;middle&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                                    "default": "'middle'"
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wether to show the text label.</p>\n",
                                "default": true
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "['50%', '50%']"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "ellipsis": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>When the text is beyond the rectangle edges, whether to replace the excess part with apostrophe.</p>\n",
                                    "default": true
                                  },
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "'#fff'"
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  },
                                  "align": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>horizontal alignment. Optional values are <code>&#39;center&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                                    "default": "'center'"
                                  },
                                  "baseline": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>vertical alignment, Optional values are  <code>&#39;middle&#39;</code>、<code>&#39;right</code> and <code>&#39;left&#39;</code>.</p>\n",
                                    "default": "'middle'"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p><br></p>\n<blockquote>\n<p>Tps: In treemap, <code>itemStyle</code> attribute could exist in much places: </p>\n<ul>\n<li><p>It could exist under <a href=\"#series-treemap\">sereis-treemap</a> root, indicating the unified setting of this overall series.</p>\n</li>\n<li><p>It could exist in every array element of  <a href=\"#series-treemap.levels\">series-treemap.levels</a>, indicating the unified setting of every level of tree. </p>\n</li>\n<li><p>It could exist n every node of <a href=\"#series-treemap.data\">series-treemap.data</a>, indicating the particular setting of each node.</p>\n</li>\n</ul>\n</blockquote>\n<p><br></p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color of rectangle. It defaults to obtain colors from overall palette <a href=\"#color\">option.color</a>.</p>\n",
                                "default": null
                              },
                              "colorAlpha": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the color thickness. The value range is floating-point number between 0 ~ 1.</p>\n",
                                "default": null
                              },
                              "colorSaturation": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the color saturation of rectangle. The value range is floating-point number between 0 ~ 1.</p>\n",
                                "default": null
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the border width of rectangle. There is no border when it is 0. </p>\n",
                                "default": 0
                              },
                              "gapWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the gap width of child rectangle inside a rectangle.</p>\n",
                                "default": 0
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the border color of rectangle, supporting <code>color</code> with different formats.  </p>\n",
                                "default": "'#fff',"
                              },
                              "borderColorSaturation": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color saturation of rectangle border. The value range is floating-point number between 0 ~ 1.</p>\n<p>Tips: </p>\n<p>If this property is set,  the <code>borderColor</code> setting is invalid. Instead, the color (such as the color inherited from the parent node) calculated by the current node. The final color would be get when the <code>borderColorSaturation</code> is set on this color value. In this way, 『different sections have rectangular interval lines with different colors』effect could be produced, easily to distinguish levels.</p>\n<p><br></p>\n<p><strong>rectangle border/how to avoid confusion with gap setting</strong></p>\n<p>If the rectangle gap is set with the same color, there may be confusion when different levels of rectangular display at the same time.</p>\n<p>See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/treemap-borderColor&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. It should be noticed that the child rectangles in the included red sections are at the deeper level which is different from the level of other rectangles distinguised by white gaps. Therefore, for distinguishing it from other case, we set the gap line color of the rectangular in red section as 『red color with saturation change』in <code>borderColorSaturation</code>.</p>\n",
                                "default": null
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color of rectangle. It defaults to obtain colors from overall palette <a href=\"#color\">option.color</a>.</p>\n",
                                "default": null
                              },
                              "colorAlpha": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the color thickness. The value range is floating-point number between 0 ~ 1.</p>\n",
                                "default": null
                              },
                              "colorSaturation": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the color saturation of rectangle. The value range is floating-point number between 0 ~ 1.</p>\n",
                                "default": null
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the border width of rectangle. There is no border when it is 0. </p>\n",
                                "default": 0
                              },
                              "gapWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the gap width of child rectangle inside a rectangle.</p>\n",
                                "default": 0
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the border color of rectangle, supporting <code>color</code> with different formats.  </p>\n",
                                "default": "'#fff',"
                              },
                              "borderColorSaturation": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color saturation of rectangle border. The value range is floating-point number between 0 ~ 1.</p>\n<p>Tips: </p>\n<p>If this property is set,  the <code>borderColor</code> setting is invalid. Instead, the color (such as the color inherited from the parent node) calculated by the current node. The final color would be get when the <code>borderColorSaturation</code> is set on this color value. In this way, 『different sections have rectangular interval lines with different colors』effect could be produced, easily to distinguish levels.</p>\n<p><br></p>\n<p><strong>rectangle border/how to avoid confusion with gap setting</strong></p>\n<p>If the rectangle gap is set with the same color, there may be confusion when different levels of rectangular display at the same time.</p>\n<p>See the <a href=\"http://echarts.baidu.com/gallery/editor.html?c=doc-example/treemap-borderColor&amp;edit=1&amp;reset=1\" target=\"_blank\">example</a>. It should be noticed that the child rectangles in the included red sections are at the deeper level which is different from the level of other rectangles distinguised by white gaps. Therefore, for distinguishing it from other case, we set the gap line color of the rectangular in red section as 『red color with saturation change』in <code>borderColorSaturation</code>.</p>\n",
                                "default": null
                              }
                            }
                          }
                        }
                      },
                      "link": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Click on the hyperlink which could jump. It is avaliable when the value of <a href=\"#series-treemap.nodeClick\">series-treemap.nodeClick</a> is <code>&#39;link&#39;</code>.  </p>\n<p>See <a href=\"#series-treemap.data.target\">series-treemap.data.target</a>.</p>\n"
                      },
                      "target": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>The same meaning with <code>target</code> in <code>html</code> <code>&lt;a&gt;</code> label, referring to <a href=\"#series-treemap.data.link\">series-treemap.data.link</a>. Option values are: <code>&#39;blank&#39;</code> or <code>&#39;self&#39;</code>.</p>\n",
                        "default": "'blank'"
                      },
                      "children": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>children node, recursive definition, its format is the same with <a href=\"#series-treemap.data\">series-treemap.data</a>.</p>\n"
                      }
                    }
                  }
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1500
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "quinticInOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><a href=\"https://en.wikipedia.org/wiki/Box_plot\" target=\"_blank\">Boxplot</a> is a convenient way of graphically depicting groups of numerical data through their quartiles.</p>\n<p><strong>Example: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=boxplot-light-velocity&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n<p><br>\nMultiple <code>series</code> are allow to be in the same coordinate axis. Reference to <a href=\"http://echarts.baidu.com/gallery/editor.html?c=boxplot-multi&amp;edit=1&amp;reset=1\" target=\"_blank\">sample</a>.</p>\n<p><br>\n<br></p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'boxplot'"
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;cartesian2d&#39;</code></p>\n<p>  Using a two-dimensional Cartesian coordinate (also known as Cartesian coordinate), through <a href=\"#series-cartesian2d.xAxisIndex\">xAxisIndex</a>, <a href=\"#series-cartesian2d.yAxisIndex\">yAxisIndex</a> to assign the corresponding axis component.</p>\n</li>\n</ul>\n",
                  "default": "'cartesian2d'"
                },
                "xAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of  <a href=\"#xAxis\">x axis</a>, which is  useful when there are multiple x axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "yAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#yAxis\">y axis</a>, which is  useful when there are multiple y axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "legendHoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable joint highlights <a href=\"#legend\">legend</a> when hover.</p>\n",
                  "default": true
                },
                "hoverAnimation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable the motion effect of hover on box.</p>\n",
                  "default": true
                },
                "layout": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>layout methods, optional values:</p>\n<ul>\n<li><p><code>&#39;horizontal&#39;</code>: horizontal layout of all boxes.</p>\n</li>\n<li><p><code>&#39;vertical&#39;</code>: vertical layout of all boxes.</p>\n</li>\n</ul>\n<p>The default value is decided by the current situation of coordinate axis: if <code>category</code> is horizontal axis, there would be horizontal layout; otherwise, there would be vertical layout; if there is no <code>category</code> axis, it would be horizontal layout.</p>\n",
                  "default": null
                },
                "boxWidth": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>the limitation of box width. the array means: <code>[min, max]</code>.</p>\n<p>It could be absolute value, such as <code>[7, 50]</code>, and also could be percentage, such as <code>[&#39;40%&#39;, &#39;90%&#39;]</code>. The percentage means the percentage of the maximum possible width.</p>\n",
                  "default": "[7, 50]"
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>boxplot graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>boxplotcolor of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "#fff"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>boxplot stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>boxplotWidth of stroke. No stroke when it is 0 .</p>\n",
                          "default": 1
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>boxplotcolor of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "#fff"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>boxplot stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>boxplotWidth of stroke. No stroke when it is 0 .</p>\n",
                          "default": 2
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n",
                          "default": 5
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n",
                          "default": "rgba(0,0,0,0.4)"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 2
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 2
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Data format is double dimensional array which is shown in the following example.</p>\n<pre><code class=\"lang-javascript\">[\n    [655, 850, 940, 980, 1175],\n    [672.5, 800, 845, 885, 1012.5],\n    [780, 840, 855, 880, 940],\n    [621.25, 767.5, 815, 865, 1011.25],\n    { // the data item could also be Object, so it could contains special setting values for this data item.\n\n        value: [713.75, 807.5, 810, 870, 963.75],\n        itemStyle: {...}\n    },\n    ...\n]\n</code></pre>\n<p>Every data item (each line in the example above)  in double dimensional array renders a box, which contains 5 values. They are:</p>\n<pre><code class=\"lang-javascript\">[min,  Q1,  median (or Q2),  Q3,  max]\n</code></pre>\n<p><strong>data processing</strong></p>\n<p>the original data processing is not internally installed in ECharts. The data input to <code>boxplot</code> should be the values as above from the 5 statistical results.</p>\n<p>However, ECharts also provide extra and simple <a href=\"https://github.com/ecomfe/echarts/tree/dev-3.0.0/extension/dataTool\" target=\"_blank\">original data manipulation function</a>. For example, this <a href=\"http://echarts.baidu.com/gallery/editor.html?c=boxplot-light-velocity&amp;edit=1&amp;reset=1\" target=\"_blank\">sample</a> uses <code>echarts.dataTool.prepareBoxplotData</code> to proceed simple data statistics.</p>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the name of data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>the value of data item.</p>\n<pre><code class=\"lang-javascript\">[min,  Q1,  median (or Q2),  Q3,  max]\n</code></pre>\n"
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>boxplot graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": ""
                          },
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>boxplotcolor of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "#fff"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>boxplot stroke color of graphic. Support the same format as <code>color</code></p>\n",
                            "default": "\"#000\""
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>boxplotWidth of stroke. No stroke when it is 0 .</p>\n",
                            "default": 2
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n",
                            "default": 5
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n",
                            "default": "rgba(0,0,0,0.4)"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 2
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 2
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": ""
                          }
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li><p>Through <a href=\"#series-scatter.markPoint.data.x\">x</a>, <a href=\"#series-scatter.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</p>\n</li>\n<li><p>Use <a href=\"#series-scatter.markPoint.data.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;certain coordinate&#39;,\n        coord: [10, 20]\n    }, \n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "valueIndex": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Available when using <a href=\"#series-scatter.markPoint.data.type\">type</a> it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis), and use the first value axis dimension by default.</p>\n"
                          },
                          "valueDim": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Available when using  <a href=\"#series-scatter.markPoint.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                          },
                          "coord": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Coordinate of the label.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-scatter.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li><p>Through <a href=\"#series-scatter.markLine.data.0.x\">x</a>, <a href=\"#series-scatter.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </p>\n</li>\n<li><p>Use <a href=\"#series-scatter.markLine.data.0.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<pre><code>data: [\n    [\n        {\n            name: &#39;Marking line between two coordinates&#39;,\n            coord: [10, 20]\n        },\n        {\n            coord: [20, 30]\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Box plot zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Box plot all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 800
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "elasticOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><a href=\"https://en.wikipedia.org/wiki/Candlestick_chart\" target=\"_blank\">Candlestick</a> is what we usually call <code>K line graph</code>. </p>\n<p>ECharts3  supports both <code>&#39;candlestick&#39;</code> and <code>&#39;k&#39;</code> which are 2 kinds of <code>&#39;series.type&#39;</code> (<code>&#39;k&#39;</code> would automatically turns into <code>&#39;candlestick&#39;</code>).</p>\n<p><strong>Here is the example: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=candlestick-sh&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n<p><br>\n<strong>about the colors of『rise』『fall』: </strong></p>\n<p>Different countries or areas define the colors of K line graph differently. It may be 『red for rise and green for fall』or『red for rise and blue for fall』 (such as Mainland China, Taiwan, Japan, Korea and etc.) ; and it may be 『green for rise and red for fall』 (such as western countries, Hongkong, Singapore and etc.). It is not necessary to use red and blue, red and green to show rise and fall. Other methods such as 『colorful/colorless』are also available.</p>\n<p>Thre default configuration item is『red for rise and blue for fall』. If you want to change this color configuration, it should be changed in these configuration items: </p>\n<ul>\n<li><a href=\"#series-candlestick.itemStyle.normal.color\">series-candlestick.itemStyle.normal.color</a>: positive filling color (namely『rise』) </li>\n<li><a href=\"#series-candlestick.itemStyle.normal.color0\">series-candlestick.itemStyle.normal.color0</a>: negtive filling color (namely『fall』) </li>\n<li><a href=\"#series-candlestick.itemStyle.normal.borderColor\">series-candlestick.itemStyle.normal.borderColor</a>: positive border color (namely『rise』) </li>\n<li><a href=\"series-candlestick.itemStyle.normal.borderColor0\" target=\"_blank\">series-candlestick.itemStyle.normal.borderColor0</a>: negtive border color (namely『fall』) </li>\n</ul>\n<p><br>\n<br></p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'candlestick'"
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;cartesian2d&#39;</code></p>\n<p>  Using a two-dimensional Cartesian coordinate (also known as Cartesian coordinate), through <a href=\"#series-cartesian2d.xAxisIndex\">xAxisIndex</a>, <a href=\"#series-cartesian2d.yAxisIndex\">yAxisIndex</a> to assign the corresponding axis component.</p>\n</li>\n</ul>\n",
                  "default": "'cartesian2d'"
                },
                "xAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of  <a href=\"#xAxis\">x axis</a>, which is  useful when there are multiple x axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "yAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#yAxis\">y axis</a>, which is  useful when there are multiple y axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "legendHoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable joint highlights <a href=\"#legend\">legend</a> when hover.</p>\n",
                  "default": true
                },
                "hoverAnimation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable the hover animitation on box.</p>\n",
                  "default": true
                },
                "layout": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>layout method, optional values: </p>\n<ul>\n<li><p><code>&#39;horizontal&#39;</code>: horizontal layout of all boxs.</p>\n</li>\n<li><p><code>&#39;vertical&#39;</code>: vertical layout of all boxs.</p>\n</li>\n</ul>\n<p>The default value is decided by the current situation of coordinate axis: if <code>category</code> is horizontal axis, there would be horizontal layout; otherwise, there would be vertical layout; if there is no <code>category</code> axis, it would be horizontal layout. </p>\n",
                  "default": null
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>candlestick graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of <code>positive line</code> .</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "#c23531"
                        },
                        "color0": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of <code>negtive line</code> . It supports the same format of <code>color</code>.</p>\n",
                          "default": "#314656"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>border color of <code>positive line</code> in graph.  It supports the same format of <code>color</code>. </p>\n",
                          "default": "#c23531"
                        },
                        "borderColor0": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>border color of <code>negtive line</code> in graph.  It supports the same format of <code>color</code>. </p>\n",
                          "default": "#314656"
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>border width of candlestick. There is no border when it is 0.</p>\n",
                          "default": 1
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of <code>positive line</code> .</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "#c23531"
                        },
                        "color0": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of <code>negtive line</code> . It supports the same format of <code>color</code>.</p>\n",
                          "default": "#314656"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>border color of <code>positive line</code> in graph.  It supports the same format of <code>color</code>. </p>\n",
                          "default": "#c23531"
                        },
                        "borderColor0": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>border color of <code>negtive line</code> in graph.  It supports the same format of <code>color</code>. </p>\n",
                          "default": "#314656"
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>border width of candlestick. There is no border when it is 0.</p>\n",
                          "default": 2
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Data format is double dimensional array which is shown in the following example.</p>\n<pre><code class=\"lang-javascript\">[\n    [2320.26, 2320.26, 2287.3,  2362.94],\n    [2300,    2291.3,  2288.26, 2308.38],\n    { // the data item could also be Object, so it could contains special setting values for this data item.\n        value: [2300,    2291.3,  2288.26, 2308.38],\n        itemStyle: {...}\n    },\n    ...\n]\n</code></pre>\n<p>Every data item (each line in the example above)  in double dimensional array renders a box, which contains 5 values. They are: </p>\n<pre><code class=\"lang-javascript\">[open, close, lowest, highest]  (namely: [opening value, closing value, lowest value, highest value])\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the name of data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>The value of data item.</p>\n<pre><code class=\"lang-javascript\">[open, close, lowest, highest]  (namely: [opening value, closing value, lowest value, highest value])\n</code></pre>\n"
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>candlestick graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": ""
                          },
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of <code>positive line</code> .</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "#c23531"
                          },
                          "color0": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>color of <code>negtive line</code> . It supports the same format of <code>color</code>.</p>\n",
                            "default": "#314656"
                          },
                          "borderColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>border color of <code>positive line</code> in graph.  It supports the same format of <code>color</code>. </p>\n",
                            "default": "#c23531"
                          },
                          "borderColor0": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>border color of <code>negtive line</code> in graph.  It supports the same format of <code>color</code>. </p>\n",
                            "default": "#314656"
                          },
                          "borderWidth": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>border width of candlestick. There is no border when it is 0.</p>\n",
                            "default": 2
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": ""
                          }
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li><p>Through <a href=\"#series-scatter.markPoint.data.x\">x</a>, <a href=\"#series-scatter.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</p>\n</li>\n<li><p>Use <a href=\"#series-scatter.markPoint.data.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;certain coordinate&#39;,\n        coord: [10, 20]\n    }, \n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "valueIndex": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Available when using <a href=\"#series-scatter.markPoint.data.type\">type</a> it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis), and use the first value axis dimension by default.</p>\n"
                          },
                          "valueDim": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Available when using  <a href=\"#series-scatter.markPoint.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                          },
                          "coord": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Coordinate of the label.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-scatter.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li><p>Through <a href=\"#series-scatter.markLine.data.0.x\">x</a>, <a href=\"#series-scatter.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </p>\n</li>\n<li><p>Use <a href=\"#series-scatter.markLine.data.0.coord\">coord</a> attribute assigns coordinates position of data in the corresponding coordinate. </p>\n</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<pre><code>data: [\n    [\n        {\n            name: &#39;Marking line between two coordinates&#39;,\n            coord: [10, 20]\n        },\n        {\n            coord: [20, 30]\n        }\n    ],\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "valueIndex": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>, it is used to assign maximum value and minimum value in dimensions, it could be <code>0</code> (xAxis, radiusAxis), <code>1</code> (yAxis, angleAxis)  and use the first value axis dimension by default.</p>\n"
                            },
                            "valueDim": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Available when using <a href=\"#series-.markLine.data.type\">type</a>,it is used to assign maximum value and minimum value in dimensions, it could be the direct name of the dimension, for example, names could be <code>x</code>、<code>angle</code>in line chart、<code>open</code>、<code>close</code>in candlestick chart.</p>\n"
                            },
                            "coord": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>Coordinates of the starting point or finishing point.Coordinates format depends on the coordinate of the series.It could be <code>x</code>, <code>y</code> in <a href=\"#grid\">grid coordinates</a>, or  <code>radius</code>, <code>angle</code>in <a href=\"#polar\">polar coordinates</a>.</p>\n<p><strong>Attention: </strong>In ECharts 2.x , <code>xAxis</code> and <code>yAxis</code> will be used to label position in grid coordinates,ECharts 3 is no longer recommended.</p>\n"
                            },
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>K line graph zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>K line graph all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 300
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "linear"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>heat map</strong></p>\n<p>Heat map mainly shows the numerical values through colors, which have to coordinate with <a href=\"#visualMap\">visualMap</a> component. </p>\n<p>It could be applied in both <a href=\"#grid\">rectangular coordinate</a> and <a href=\"#geo\">geographic coordinate</a>. The patterns of manifestation in these 2 coordinat system are totally different. There must be 2 category axes used in rectangular coordinate.</p>\n<p>Here are the examples applied respectively in rectangular coordinate and geographic coordinate: </p>\n<p><strong>rectangular coordinate: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=heatmap-cartesian&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n<p><strong>geographic coordinate: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=heatmap-map&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'heatmap'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;cartesian2d&#39;</code></p>\n<p>  Using a two-dimensional Cartesian coordinate (also known as Cartesian coordinate), through <a href=\"#series-heatmap.xAxisIndex\">xAxisIndex</a>, <a href=\"#series-heatmap.yAxisIndex\">yAxisIndex</a> to assign the corresponding axis component.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&#39;geo&#39;</code></p>\n<p>  Using geographic coordinate, through <a href=\"#series-heatmap.geoIndex\">geoIndex</a> to assign the corresponding geographic coordinate components.</p>\n</li>\n</ul>\n",
                  "default": "'cartesian2d'"
                },
                "xAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of  <a href=\"#xAxis\">x axis</a>, which is  useful when there are multiple x axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "yAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#yAxis\">y axis</a>, which is  useful when there are multiple y axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "geoIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#geo\">geographic coordinate</a>, which is  useful when there are multiple geographic coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "blurSize": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>It is valid in geographic coordinate(<a href=\"#series-heatmap.coordinateSystem\">coordinateSystem</a>: &#39;geo&#39;).</p>\n",
                  "default": 20
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Array of data content in series.Array item usually is specific data item. Followings are three data formats </p>\n<ol>\n<li><p>When an axis in the coordinate is category axis, data can be the value of one dimension, the length of array equals to the length of <a href=\"#xAxis.data\">xAxis.data</a>,which is the label array of category axis content.And there is a  one-to-one correspondence between them, for example: </p>\n<pre><code class=\"lang-js\"> [12, 34, 56, 10, 23]\n</code></pre>\n</li>\n<li><p>When both axes in the coordinate are  value axes, every data item needs one array, and at least two of them should represent <code>x</code>,  <code>y</code>in cartesian coordinates or <code>radius</code>, <code>angle</code>in polar coordinates, for example: </p>\n<pre><code class=\"lang-js\"> [[3.4, 4.5, 15], [4.2, 2.3, 20], [10.8, 9.5, 30], [7.2, 8.8, 18]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n<li><p>When both axes in the coordinate are  category axes, every data item also needs one array, a single data item needs to have at least two values representing category index or name on two axes, for example: </p>\n<pre><code class=\"lang-js\"> [[0, 0, 2], [&#39;monday&#39;, 2, 1], [2, 1, 2], [3, 3, 5]]\n</code></pre>\n<p> Every array of data value is able to present other data dimensions from the third one, using <a href=\"#visualMap\">visualMap</a> component can map one or more assigned dimensions to color, size and other graphic properties.</p>\n</li>\n</ol>\n<pre><code>Examples of double category axis can refer to [Github Punchcard](http://echarts.baidu.com/gallery/editor.html?c=scatter-punchCard).\n</code></pre><p>When it needs to customize certain data label, array item can be treated as subject, among which<code>value</code> stands for specific value, for example: </p>\n<pre><code class=\"lang-js\">[\n    12, 34,\n    {\n        value : 56,\n        //self-define label format, only valid for this data item\n        label: {},\n        //special self-define itemStyle, only valid for this data item\n        itemStyle:{}\n    },\n    10, 23\n]\n</code></pre>\n<p><strong>Tip: </strong>When data to certain category does not exist (ps: &#39;inexistence&#39; doesn&#39;t mean the value is 0), can use&#39;-&#39;to represent, when there is no data, it should be disconnected in  line chart, and no graph in other graphics.</p>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>name of data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>value of data item.</p>\n"
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>It is valid in rectangular coordinate(<a href=\"#series-heatmap.coordinateSystem\">coordinateSystem</a>: &#39;cartesian2d&#39;).</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "inside"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the style setting of single data point. It is valid in rectangular coordinate(<a href=\"#series-heatmap.coordinateSystem\">coordinateSystem</a>: &#39;cartesian2d&#39;).</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li>Through <a href=\"#series-heatmap.markPoint.data.x\">x</a>, <a href=\"#series-heatmap.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-heatmap.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li>Through <a href=\"#series-heatmap.markLine.data.0.x\">x</a>, <a href=\"#series-heatmap.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<pre><code>data: [\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>heat map zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>heat map all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>Map.</strong></p>\n<p>Map is maily used in the visulization of geographic area data, which coordinates with <a href=\"#visualMap\">visualMap</a> component to show the datas such as population distribution density in diffrent areas.     </p>\n<p>The same series of multiple <a href=\"#series-map.map\">map type</a> would show in one map. At this point, the configuration item of the first series should be used as the configuration for map drawing. </p>\n<p><strong>Tip: </strong><code>markLine</code> and <code>markPoint</code> are not recommended any more in ECharts 3.  If you want to realize the visulization of punctual data and line data, you could use the <a href=\"#series-scatter\">scatter diagram</a>和<a href=\"#series-lines\">line graph</a> in <a href=\"#geo\">geographic coordinate component</a>.</p>\n<p><strong>Sample: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/map-example&reset=1&edit=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'map'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "map": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Types of maps.</p>\n<p>Because the accuracy of maps in ECharts 3 have been improved, the map data for enlarging javascript volume would not been internally installed anymore, you can download the map docs you need from <a href=\"http://ecomfe.github.io/echarts-builder-web/map3.html\" target=\"_blank\">Map download page</a> and then import and register them in ECharts. </p>\n<p>2 formats of map data are provided in ECharts, the one is js document which could directly improt script label and then automatically register the map name and data; the other is JSON document which need to be registered manually after being async-loaded by jquery.</p>\n<p>There are practical examples of these 2 types: </p>\n<p><strong> JavaScript importing example </strong></p>\n<pre><code class=\"lang-html\">&lt;script src=&quot;echarts.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;map/js/china.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\nvar chart = echarts.init(document.getElmentById(&#39;main&#39;));\nchart.setOption({\n    series: [{\n        type: &#39;map&#39;,\n        map: &#39;china&#39;\n    }]\n});\n&lt;/script&gt;\n</code></pre>\n<p><strong> JSON importing example </strong></p>\n<pre><code class=\"lang-js\">$.get(&#39;map/json/china.json&#39;, function (chinaJson) {\n    echarts.registerMap(&#39;china&#39;, chinaJson);\n    var chart = echarts.init(document.getElmentById(&#39;main&#39;));\n    chart.setOption({\n        series: [{\n            type: &#39;map&#39;,\n            map: &#39;china&#39;\n        }]\n    });\n});\n</code></pre>\n<p>ECharts uses <a href=\"http://geojson.org/\" target=\"_blank\">geoJSON</a> format as map outline. Except for the above-mentioned data, you can also gain  <a href=\"http://geojson.org/\" target=\"_blank\">geoJSON</a> data through other methods and register it in ECharts. Reference to <a href=\"http://echarts.baidu.com/gallery/editor.html?c=map-usa\" target=\"_blank\">USA Population Estimates</a></p>\n",
                  "default": "''"
                },
                "roam": {
                  "type": [
                    "boolean",
                    "string"
                  ],
                  "descriptionCN": "<p>whether to enable mouse zooming and translation roaming. Disenable by default. If one wants to enable zooming or translation, can set to <code>&#39;scale&#39;</code> or <code>&#39;move&#39;</code>. Set to <code>true</code> to enable all.</p>\n",
                  "default": false
                },
                "nameMap": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Name map with custom region, for instance: </p>\n<pre><code class=\"lang-js\">{\n    &#39;China&#39; : &#39;China&#39;\n}\n</code></pre>\n"
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>text label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Specify whether to show label in usual status.</p>\n",
                          "default": false
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>The label style in usual status.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Specify whether to show label in highlight status.</p>\n",
                          "default": false
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>The label style in highlight status.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>polygon in map area graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>The polygon style in usual status.</p>\n",
                      "properties": {
                        "areaColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>The color in map area.</p>\n",
                          "default": "'#eee'"
                        },
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>The polygon style in highlight status.</p>\n",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "left": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "'auto'"
                },
                "top": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "'auto'"
                },
                "right": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                  "default": "'auto'"
                },
                "bottom": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                  "default": "'auto'"
                },
                "mapValueCalculation": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Multiple series containing the same <a href=\"#series-map.map\">map type</a> would use the same map to shoe. If several series have values in the same area, ECharts would gather the statistics of these values and then get a data. This configuration item refers to the methods applied in configuration statistics, including:   </p>\n<ul>\n<li><code>&#39;sum&#39;</code>   sum.</li>\n<li><code>&#39;average&#39;</code> averaging.</li>\n<li><code>&#39;max&#39;</code>   maximum value.</li>\n<li><code>&#39;min&#39;</code>   minimum value.</li>\n</ul>\n",
                  "default": "'sum'"
                },
                "selectedMode": {
                  "type": [
                    "boolean",
                    "string"
                  ],
                  "descriptionCN": "<p>selected mode indicating whether to support multiple selected targets, which defaults to be turned off and support boolean value and character string. The value of character string could be <code>&#39;single&#39;</code> or <code>&#39;multiple&#39;</code>.</p>\n",
                  "default": false
                },
                "showLegendSymbol": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Show the color symbol of legend in related area (dot of series symbol). Is valid when <a href=\"#legend\">legend</a> component exists.</p>\n"
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>map data content and array in the series.Array item can be a single data value, for example: </p>\n<pre><code class=\"lang-js\">[12, 34, 56, 10, 23]\n</code></pre>\n<p>If other dimensions need to be added to data  <a href=\"#visualMap\">visualMap</a> component to map color and other graphic properties.Each data item can also be an array, for example: </p>\n<pre><code class=\"lang-js\">[[12, 14], [34, 50], [56, 30], [10, 15], [23, 10]]\n</code></pre>\n<p>Now second value in each arrary can be assigned to <a href=\"#visualMap\">visualMap</a> component.</p>\n<p>In most situation, we need to assign name to each data item,so each item need to be one subject: </p>\n<pre><code class=\"lang-js\">[{\n    // name of date item\n    name: &#39;data1&#39;,\n    // value of date item is 8\n    value: 10\n}, {\n    name: &#39;data2&#39;,\n    value: 20\n}]\n</code></pre>\n<p>When personalized definition needs to be conducted to  sepcific content: </p>\n<pre><code class=\"lang-js\">[{\n    name: &#39;data1&#39;,\n    value: 10\n}, {\n    // name of data item\n    name: &#39;data2&#39;,\n    value : 56,\n    //special self-define tooltip, only valid for this data item\n    tooltip:{},\n    //special self-define itemStyle, only valid for this data item\n    itemStyle:{}\n}]\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>The name of the map area where the data belongs to, such as <code>&#39;Guangdong&#39;</code> or <code>&#39;Zhejiang&#39;</code> .</p>\n"
                      },
                      "value": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>The numerical value of this area.</p>\n"
                      }
                    }
                  }
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p>The series of parallel coordinate.</p>\n<p><strong>Introduction of parallel coordinates</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Parallel_coordinates\" target=\"_blank\">parallel coordinates (Parallel Coordinates)</a> is a frequently used data chart of  high-dimensional visualization.</p>\n<p>For example, following data are in <a href=\"#series-parallel.data\">series-parallel.data</a> : </p>\n<pre><code class=\"lang-javascript\">[\n    [1,  55,  9,   56,  0.46,  18,  6,  &#39;good&#39;],\n    [2,  25,  11,  21,  0.65,  34,  9,  &#39;excellent&#39;],\n    [3,  56,  7,   63,  0.3,   14,  5,  &#39;good&#39;],\n    [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n    { // data item can also be Object, therefore special setting of lines can be included.\n        value: [5,  42,  24,  44,  0.76,  40,  16, &#39;excellent&#39;]\n        lineStyle: {...},\n    }\n    ...\n]\n</code></pre>\n<p>In data, every line is a 『data item』, every row belongs to a『dimension』. (like every row of data above means: 『date』,『AQI index』, 『PM2.5』, 『PM10』, 『carbon monoxide value』, 『nitrogen dioxide value』, 『sulfur dioxide value』). </p>\n<p>Parallel coordinate is suited to conduct visualization analysis on multidimensional data. Every dimension (row) corresponds to an axis, every『data item』is a line, going through multiple axes. In this axis, data selection and other operations can be carried out, as following:</p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=doc-example/parallel-all&edit=1&reset=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n\n\n<p><strong>brief introduction of configuration mode</strong></p>\n<p>basic configurations of <code>option</code> in『parallel coordinates』are as followed: </p>\n<pre><code class=\"lang-javascript\">option = {\n    parallelAxis: [                     // These are definitions of numerous 『axis』\n        {dim: 0, name: schema[0].text}, // Every『axis』has a &#39;dim&#39; attribute, representing dimension number of axis.\n        {dim: 1, name: schema[1].text},\n        {dim: 2, name: schema[2].text},\n        {dim: 3, name: schema[3].text},\n        {dim: 4, name: schema[4].text},\n        {dim: 5, name: schema[5].text},\n        {dim: 6, name: schema[6].text},\n        {dim: 7, name: schema[7].text,\n            type: &#39;category&#39;,           //Axis also support category data \n            data: [&#39;Excellent&#39;, &#39;good&#39;, &#39;light pollution&#39;, &#39;moderate pollution&#39;, &#39;heavy pollution&#39;, &#39;severe pollution&#39;]\n        }\n    ],\n    parallel: {                         // This is the definition of『coordinate』\n        left: &#39;5%&#39;,                     // Location setting of parallel coordinate\n        right: &#39;13%&#39;,\n        bottom: &#39;10%&#39;,\n        top: &#39;20%&#39;,\n        parallelAxisDefault: {          // Public attribute of 『axis』can be set here to aviod repeated writing.\n            type: &#39;value&#39;,\n            nameLocation: &#39;end&#39;,\n            nameGap: 20\n        }\n    },\n    series: [                           // These three series share one parallel coordinate\n        {\n            name: &#39;Beijing&#39;,\n            type: &#39;parallel&#39;,           // The type of this series is &#39;parallel&#39;\n            data: [\n                [1,  55,  9,   56,  0.46,  18,  6,  &#39;good&#39;],\n                [2,  25,  11,  21,  0.65,  34,  9,  &#39;excellent&#39;],\n                ...\n            ]\n        },\n        {\n            name: &#39;Shanghai&#39;,\n            type: &#39;parallel&#39;,\n            data: [\n                [3,  56,  7,   63,  0.3,   14,  5,  &#39;good&#39;],\n                [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n                ...\n            ]\n        },\n        {\n            name: &#39;Guangzhou&#39;,\n            type: &#39;parallel&#39;,\n            data: [\n                [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n                [5,  42,  24,  44,  0.76,  40,  16, &#39;excellent&#39;],\n                ...\n            ]\n        }\n    ]\n};\n</code></pre>\n<p>Three concerned components: <a href=\"#parallel\">parallel</a>、<a href=\"#parallelAxis\">parallelAxis</a>、<a href=\"#series-parallel\">series-parallel</a></p>\n<ul>\n<li><p><a href=\"#parallel\">parallel</a></p>\n<p>  The configuration item of this parallel coordinate is『coordinate』itsel.one series (<code>series</code>) or many series (like 『Beijing』、『Shanghai』、『Guangzhou』in the above picture is a series respectively.) They can share thi『coordinate』</p>\n<p>  The same as other coordinates, multiple coordinates can be created.</p>\n<p>  Location setting is also carried out here.</p>\n</li>\n<li><p><a href=\"#parallelAxis\">parallelAxis</a></p>\n<p>  This is axis configuration of 『coordinate』. Naturally, multiple axes are needed.</p>\n<p>  Among which are attributes of  <a href=\"#parallelAxis.parallelIndex\">parallelAxis.parallelIndex</a>, assigning this『axis』in which『coordinate』. Use the first 『coordinate』by default.</p>\n</li>\n<li><p><a href=\"#series-parallel\">series-parallel</a></p>\n<p>  This is the definition of『series』. Series will be drawn to『coordinate』.</p>\n<p>  Among which are attributes of <a href=\"#series-parallel.parallelIndex\">series-parallel.parallelIndex</a>, assigning usage of which『coordinate』.Use the first 『coordinate』by default.</p>\n</li>\n</ul>\n<p><strong>Configuration note and best practices</strong></p>\n<p>When configure multiple <a href=\"#parallelAxis\">parallelAxis</a>, there are some value share the same attribute, If write them multiple times is complicated, then they could be placed in <a href=\"#parallel.parallelAxisDefault\">parallel.parallelAxisDefault</a>. Before initializing axis, configuration item in <code>parallelAxisDefault</code> will integrate into <a href=\"#parallelAxis\">parallelAxis</a> respectively, and finally form the configuration of axis.</p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'parallel'"
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;parallel&#39;</code></p>\n<p>  Using parallel coordinates, through <a href=\"#series-parallel.parallelIndex\">parallelIndex</a> to assign the corresponding parallel coordinate components.</p>\n</li>\n</ul>\n",
                  "default": "'parallel'"
                },
                "parallelIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#parallel\">parallel coordinates</a>, which is  useful when there are multiple parallel coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "lineStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>line style.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 2
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n",
                          "default": 0.45
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 2
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n",
                          "default": 0.45
                        }
                      }
                    }
                  }
                },
                "inactiveOpacity": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>In box selection, the unselected line would be set as this『transparency』 (which could lead to melanized effect).</p>\n",
                  "default": 0.05
                },
                "activeOpacity": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>In box selection, the selected line would be set as this『opacity』 (which could lead to highlighted effect).</p>\n",
                  "default": 1
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>For example, following data are in <a href=\"#series-parallel.data\">series-parallel.data</a> : </p>\n<pre><code class=\"lang-javascript\">[\n    [1,  55,  9,   56,  0.46,  18,  6,  &#39;good&#39;],\n    [2,  25,  11,  21,  0.65,  34,  9,  &#39;excellent&#39;],\n    [3,  56,  7,   63,  0.3,   14,  5,  &#39;good&#39;],\n    [4,  33,  7,   29,  0.33,  16,  6,  &#39;excellent&#39;],\n    { // data item can also be Object, therefore special setting of lines can be included.\n        value: [5,  42,  24,  44,  0.76,  40,  16, &#39;excellent&#39;]\n        lineStyle: {...},\n    }\n    ...\n]\n</code></pre>\n<p>In data, every line is a 『data item』, every row belongs to a『dimension』. (like every row of data above means: 『date』,『AQI index』, 『PM2.5』, 『PM10』, 『carbon monoxide value』, 『nitrogen dioxide value』, 『sulfur dioxide value』). </p>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the name of configuration item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>the value of data item.</p>\n"
                      },
                      "lineStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>line style.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": ""
                          },
                          "color": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                            "default": "\"#000\""
                          },
                          "width": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>line width.</p>\n",
                            "default": 2
                          },
                          "type": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                            "default": "solid"
                          },
                          "shadowBlur": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                          },
                          "shadowColor": {
                            "type": [
                              "Color"
                            ],
                            "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                          },
                          "shadowOffsetX": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                            "default": 0
                          },
                          "shadowOffsetY": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                            "default": 0
                          },
                          "opacity": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n",
                            "default": 0.45
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": ""
                          }
                        }
                      }
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>parallel coordinate zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>parallel coordinate all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "linear"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>lines graph</strong></p>\n<p>It is used to draw the line data with the information about &quot;from&quot; and &quot;to&quot;; and it is applied fot drawing the air routes on map, which visualizes these routes.</p>\n<p>ECharts 2.x uses the <code>markLine</code> from map to draw the migrating effect; while in ECharts 3, the <code>lines</code> graph is recommended to be used individually.</p>\n<p><strong>migrating example: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=geo-lines&edit=1&reset=1\" width=\"700\" height=\"500\" ></iframe>\n\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'lines'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;cartesian2d&#39;</code></p>\n<p>  Using a two-dimensional Cartesian coordinate (also known as Cartesian coordinate), through <a href=\"#series-lines.xAxisIndex\">xAxisIndex</a>, <a href=\"#series-lines.yAxisIndex\">yAxisIndex</a> to assign the corresponding axis component.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&#39;geo&#39;</code></p>\n<p>  Using geographic coordinate, through <a href=\"#series-lines.geoIndex\">geoIndex</a> to assign the corresponding geographic coordinate components.</p>\n</li>\n</ul>\n",
                  "default": "'geo'"
                },
                "xAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of  <a href=\"#xAxis\">x axis</a>, which is  useful when there are multiple x axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "yAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#yAxis\">y axis</a>, which is  useful when there are multiple y axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "geoIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#geo\">geographic coordinate</a>, which is  useful when there are multiple geographic coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "effect": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>the setting about special effect of lines.</p>\n<p><strong>Tips: </strong>All the graphs with contrail effect should be individually put on one layer. It indicates that <a href=\"#series-lines.zlevel\">zlevel</a> need to be individually set up and the animation (<a href=\"#series-lines.animation\">animation</a>: false)  of this layer is suggested to turn off at the meanwhile. Otherwise, other graphic elements in other series and the <a href=\"#series-lines.label\">label</a> of animation would produce unnecessary shadows.  </p>\n",
                  "properties": {
                    "show": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to show special effect.</p>\n",
                      "default": false
                    },
                    "period": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>the duration of special effect, which unit is s.</p>\n",
                      "default": 4
                    },
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>the symbol of special graph.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n<p>The above example is the graphic elements which present plane by default the symbol of path. </p>\n<p><strong>Tip:</strong> the angle of symbol changes as the tangent line of track changes. If you use the symbol of default path, you should make sure that the path graphic elements are upward oriented. It would ensure that the graphic elements always move toward the right moving direction when the symbol moves along the track. </p>\n",
                      "default": "'circle'"
                    },
                    "symbolSize": {
                      "type": [
                        "Array",
                        "number"
                      ],
                      "descriptionCN": "<p>the symbol size of special effect, which could be set as single number such as <code>10</code>. What&#39;s more, arrays could be used to decribe the height and width respectively. For instance, <code>[20, 10]</code> indicates <code>20</code> for width and  <code>10</code> for height.  </p>\n",
                      "default": 3
                    },
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>the color of special effect symbol, which defaults to be <a href=\"#series-lines.lineStyle.normal.color\">lineStyle.normal.color</a>.</p>\n"
                    },
                    "trailLength": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>the length of contrails of special effect.  The values from 0 to 1 could be set. It would be longer as the the value becomes larger. </p>\n",
                      "default": 0.2
                    }
                  }
                },
                "lineStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color. get color from <a href=\"#color\">option.color palette</a> by default</p>\n<p>Support the use of callback functions. Callback function takes the following forms: </p>\n<pre><code class=\"lang-js\">(params: Object) =&gt; Color\n</code></pre>\n<p>Incoming are data item <code>seriesIndex</code>, <code>dataIndex</code>, <code>data</code>, <code>value</code> and other parameters.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "'self-adaptive'"
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 0
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n",
                          "default": 0.5
                        },
                        "curveness": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the curveness of edge. The values from 0 to 1 could be set. The curveness would be larger as the the value becomes larger. </p>\n",
                          "default": 0
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 0
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>the related configuration of label.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>whether to show label.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>the position of label, options: </p>\n<ul>\n<li><code>&#39;start&#39;</code> the start point of lines.</li>\n<li><code>&#39;end&#39;</code>   the end point of lines.</li>\n</ul>\n",
                          "default": "'end'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li>Through <a href=\"#series-lines.markPoint.data.x\">x</a>, <a href=\"#series-lines.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-lines.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li>Through <a href=\"#series-lines.markLine.data.0.x\">x</a>, <a href=\"#series-lines.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<pre><code>data: [\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>lines graph zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>lines graph all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "cubicOut"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>the data set of lines.</p>\n<p>Every data item is an array, the first item in the array is starting position,  the second is finishing position. Through attribute <code>coord</code> you can assign position in the corresponding coordinate.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    [{\n        coord: [10, 20],\n        // numerical magnitude\n        value: 10\n    }, {\n        coord: [20, 30]\n    }]\n]\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "0": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the date on the starting point.</p>\n",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>the name of starting point.</p>\n"
                          },
                          "coord": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>the coordinate of starting point, which could be the <code>[x, y]</code> in <a href=\"#grid\">rectangular coordinate</a> and <code>[lng, lat]</code> in <a href=\"#geo\">geographic coordinate</a>.</p>\n"
                          },
                          "lineStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>the line style of this data item. the <code>lineStyle</code> of both the start and end points would be combined together.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "\"#000\""
                                  },
                                  "width": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>line width.</p>\n",
                                    "default": 0
                                  },
                                  "type": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                    "default": "solid"
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  },
                                  "curveness": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>the curveness of edge. The values from 0 to 1 could be set. The curveness would be larger as the the value becomes larger. </p>\n",
                                    "default": 0
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "\"#000\""
                                  },
                                  "width": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>line width.</p>\n",
                                    "default": 0
                                  },
                                  "type": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                    "default": "solid"
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  },
                                  "curveness": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                    "default": 0
                                  }
                                }
                              }
                            }
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>data value.</p>\n"
                          }
                        }
                      },
                      "1": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the data of the end point.</p>\n",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>the name of end point.</p>\n"
                          },
                          "coord": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>the coordinate of end point, which could be the <code>[x, y]</code> in <a href=\"#grid\">rectangular coordinate</a> and <code>[lng, lat]</code> in <a href=\"#geo\">geographic coordinate</a>.</p>\n"
                          },
                          "lineStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>the line style of this data item. the <code>lineStyle</code> of both the start and end points would be combined together.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "\"#000\""
                                  },
                                  "width": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>line width.</p>\n",
                                    "default": 0
                                  },
                                  "type": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                    "default": "solid"
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  },
                                  "curveness": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>the curveness of edge. The values from 0 to 1 could be set. The curveness would be larger as the the value becomes larger. </p>\n",
                                    "default": 0
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "\"#000\""
                                  },
                                  "width": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>line width.</p>\n",
                                    "default": 0
                                  },
                                  "type": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                    "default": "solid"
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  },
                                  "curveness": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                    "default": 0
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>relation graph</strong></p>\n<p>Graph is a diagram to represent <a href=\"#series-graph.nodes\">nodes</a> and the <a href=\"#series-graph.links\">links</a> connecting nodes.</p>\n<p><strong>Tips: </strong> In ECharts 2.x , the diagram of <code>force</code> type will not be available in ECharts 3 any more, which has been changed to use <code>graph</code> to show graph data. If you want to use force to lead the layout, you can set the  <a href=\"#series-graph.layout\">layout</a> configuration as <code>&#39;force&#39;</code>.</p>\n<p><strong>Example: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=graph&reset=1&edit=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'graph'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "legendHoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable joint highlights <a href=\"#legend\">legend</a> when hover.</p>\n",
                  "default": true
                },
                "coordinateSystem": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The coordinate used in the series,  options are:</p>\n<ul>\n<li><p><code>&#39;cartesian2d&#39;</code></p>\n<p>  Using a two-dimensional Cartesian coordinate (also known as Cartesian coordinate), through <a href=\"#series-graph.xAxisIndex\">xAxisIndex</a>, <a href=\"#series-graph.yAxisIndex\">yAxisIndex</a> to assign the corresponding axis component.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&#39;polar&#39;</code></p>\n<p>  Using polar coordinates, through <a href=\"#series-graph.polarIndex\">polarIndex</a> to assign the corresponding polar coordinate component.</p>\n</li>\n</ul>\n<ul>\n<li><p><code>&#39;geo&#39;</code></p>\n<p>  Using geographic coordinate, through <a href=\"#series-graph.geoIndex\">geoIndex</a> to assign the corresponding geographic coordinate components.</p>\n</li>\n</ul>\n",
                  "default": null
                },
                "xAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of  <a href=\"#xAxis\">x axis</a>, which is  useful when there are multiple x axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "yAxisIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#yAxis\">y axis</a>, which is  useful when there are multiple y axes in one graphic chart.</p>\n",
                  "default": 0
                },
                "polarIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#polar\">Polar coordinate</a>, which is  useful when there are multiple polar coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "geoIndex": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Using the index of <a href=\"#geo\">geographic coordinate</a>, which is  useful when there are multiple geographic coordinates in one graphic chart.</p>\n",
                  "default": 0
                },
                "hoverAnimation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable the highlight animation effect of mousr hover node.</p>\n"
                },
                "layout": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Graph layout.</p>\n<p><strong>Options: </strong></p>\n<ul>\n<li><p><code>&#39;none&#39;</code> No any layout, use  <a href=\"#series-graph.data.x\">x</a>,  <a href=\"#series-graph.data.y\">y</a> provided in <a href=\"#series-graph.data\">node</a> as the position of node.</p>\n</li>\n<li><p><code>&#39;circular&#39;</code> Adopt circular layout, see the example <a href=\"http://echarts.baidu.com/gallery/editor.html?c=graph-circular-layout\" target=\"_blank\">Les Miserables</a>.</p>\n</li>\n<li><p><code>&#39;force&#39;</code> Adopt force-directed layout, see the example <a href=\"http://echarts.baidu.com/gallery/editor.html?c=graph-force\" target=\"_blank\">Force</a>, the detail about configrations of layout are in <a href=\"#series-graph.force\">graph.force</a></p>\n</li>\n</ul>\n",
                  "default": "'none'"
                },
                "force": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Configuration items about force-directed layout. Force-directed layout simulates spring/charge model, which will add a repulsion between 2 nodes and add a attraction between 2 nodes of each edge. In each iteration nodes will move under the effect of repulsion and attraction. After several iterations, the nodes will be static in a balanced position. As a result, the energy local minimum of this whole model will be realized.</p>\n<p>The result of force-directed layout has a good symmetries and clustering, which is also aesthetically pleasing.</p>\n",
                  "properties": {
                    "initLayout": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>The initial layout before force-directed layout, which will influence on the result of force-directed layout.</p>\n<p>It defaults not to do any layout and use <a href=\"#series-graph.data.x\">x</a>, <a href=\"#series-graph.data.y\">y</a> provided in <a href=\"#series-graph.data\">node</a> as the position of node. If it doesn&#39;t exist, the position will be generated randomly.</p>\n<p>You can also use circular layout <code>&#39;circular&#39;</code>.</p>\n"
                    },
                    "repulsion": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The repulsion factor between nodes. The repulsion will be stronger and the distance between 2 nodes becomes further as this value becomes larger.</p>\n",
                      "default": 50
                    },
                    "gravity": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The gravity factor enforcing nodes approach to the center. The nodes will be closer to the center as the value becomes larger.</p>\n",
                      "default": 0.1
                    },
                    "edgeLength": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The distance between 2 nodes on edge. This distance is also affected by <a href=\"#series-graph.force.repulsion\">repulsion</a>.</p>\n",
                      "default": 30
                    },
                    "layoutAnimation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Because the force-directed layout will be steady after several iterations, this parameter will be decide whether to show the iteration animation of layout. It is not recommended to be close on browser when there are a lot of node data (&gt;100) as the layout process will cause browser to hang.</p>\n",
                      "default": true
                    }
                  }
                },
                "roam": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>whether to enable mouse zooming and translation roaming. Disenable by default. If one wants to enable zooming or translation, can set to <code>&#39;scale&#39;</code> or <code>&#39;move&#39;</code>. Set to <code>true</code> to enable all.</p>\n",
                  "default": false
                },
                "nodeScaleRatio": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Related zooming ratio of nodes when mouse zooming in or out. When it is set as 0, the node will not zoom as the mouse zooms.</p>\n",
                  "default": 0.6
                },
                "draggable": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>If node is draggable. Only available in force-directed layout.</p>\n",
                  "default": false
                },
                "symbol": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>node of relation graphLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                  "default": "'circle'"
                },
                "symbolSize": {
                  "type": [
                    "number",
                    "Array",
                    "Function"
                  ],
                  "descriptionCN": "<p>node of relation graphLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                  "default": 10
                },
                "symbolRotate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>node of relation graphRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                },
                "symbolOffset": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>node of relation graphLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                  "default": "[0, 0]"
                },
                "edgeSymbol": {
                  "type": [
                    "Array",
                    "string"
                  ],
                  "descriptionCN": "<p>Symbol of two ends of edge line.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">edgeSymbol: [&#39;circle&#39;, &#39;arrow&#39;]\n</code></pre>\n",
                  "default": "['none', 'none']"
                },
                "edgeSymbolSize": {
                  "type": [
                    "Array",
                    "number"
                  ],
                  "descriptionCN": "<p>Size of symbol of two ends of edge line. Can be an array or a single number.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">// Start symbol has size 5 and end symbol has size 10\nsymbolSize: [5, 10],\n// All has size 10\nsymbolSize: 10\n</code></pre>\n",
                  "default": 10
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p> graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color",
                            "Function"
                          ],
                          "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n<p>Support the use of callback functions. Callback function takes the following forms: </p>\n<pre><code class=\"lang-js\">(params: Object) =&gt; Color\n</code></pre>\n<p>Incoming are the data item <code>seriesIndex</code>, <code>dataIndex</code>, <code>data</code>, <code>value</code> and other parameters.</p>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "lineStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>The style of edge line.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "'#aaa'"
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 1
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n",
                          "default": 0.5
                        },
                        "curveness": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                          "default": 0
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "\"#000\""
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 0
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "solid"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>text label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                          "default": "'inside'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "edgeLabel": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>If show label on edge.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Label position, options：</p>\n<ul>\n<li><code>&#39;start&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;end&#39;</code></li>\n</ul>\n",
                          "default": "'middle'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>If show label on edge.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Label position, options：</p>\n<ul>\n<li><code>&#39;start&#39;</code></li>\n<li><code>&#39;middle&#39;</code></li>\n<li><code>&#39;end&#39;</code></li>\n</ul>\n",
                          "default": "'middle'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "categories": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>The categories of node, which is optional.\nIf there is a classification of nodes, the category of each node can be assigned through <a href=\"#series-graph.data.category\">data[i].category</a>. And the style of category will also be applied in the style of nodes. <code>categories</code> can also be used to show in <a href=\"#legend\">legend</a>.</p>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Name of category, which is used to correspond with <a href=\"#legend\">legend</a> and format the content of <a href=\"#tooltip\">tooltip</a>.</p>\n"
                      },
                      "symbol": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>node of this categoryLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                      },
                      "symbolSize": {
                        "type": [
                          "number",
                          "Array"
                        ],
                        "descriptionCN": "<p>node of this categoryLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                      },
                      "symbolRotate": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>node of this categoryRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                      },
                      "symbolOffset": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>node of this categoryLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                        "default": "[0, 0]"
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>The style of node in this category.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>The label style of node in this category.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                                "default": "inside"
                              },
                              "formatter": {
                                "type": [
                                  "string",
                                  "Function"
                                ],
                                "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p> data content and array in the series.Array item can be a single data value, for example: </p>\n<pre><code class=\"lang-js\">[12, 34, 56, 10, 23]\n</code></pre>\n<p>If other dimensions need to be added to data  <a href=\"#visualMap\">visualMap</a> component to map color and other graphic properties.Each data item can also be an array, for example: </p>\n<pre><code class=\"lang-js\">[[12, 14], [34, 50], [56, 30], [10, 15], [23, 10]]\n</code></pre>\n<p>Now second value in each arrary can be assigned to <a href=\"#visualMap\">visualMap</a> component.</p>\n<p>In most situation, we need to assign name to each data item,so each item need to be one subject: </p>\n<pre><code class=\"lang-js\">[{\n    // name of date item\n    name: &#39;data1&#39;,\n    // value of date item is 8\n    value: 10\n}, {\n    name: &#39;data2&#39;,\n    value: 20\n}]\n</code></pre>\n<p>When personalized definition needs to be conducted to  sepcific content: </p>\n<pre><code class=\"lang-js\">[{\n    name: &#39;data1&#39;,\n    value: 10\n}, {\n    // name of data item\n    name: &#39;data2&#39;,\n    value : 56,\n    //special self-define tooltip, only valid for this data item\n    tooltip:{},\n    //special self-define itemStyle, only valid for this data item\n    itemStyle:{}\n}]\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>Name of data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "number",
                          "Array"
                        ],
                        "descriptionCN": "<p>Value of data item.</p>\n"
                      },
                      "category": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>Index of category which the data item belongs to.</p>\n"
                      },
                      "symbol": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>node of this categoryLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                      },
                      "symbolSize": {
                        "type": [
                          "number",
                          "Array"
                        ],
                        "descriptionCN": "<p>node of this categoryLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                      },
                      "symbolRotate": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>node of this categoryRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                      },
                      "symbolOffset": {
                        "type": [
                          "Array"
                        ],
                        "descriptionCN": "<p>node of this categoryLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                        "default": "[0, 0]"
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>The style of this node.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>The label style of this node.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "nodes": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>the same as <a href=\"#series-graph.data\">data</a></p>\n"
                },
                "links": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Relational data between nodes. Example:</p>\n<pre><code class=\"lang-js\">links: [{\n    source: &#39;n1&#39;,\n    target: &#39;n2&#39;\n}, {\n    source: &#39;n2&#39;,\n    target: &#39;n3&#39;\n}]\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "source": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p><a href=\"#series-graph.data.name\">name of source node</a> on edge</p>\n"
                      },
                      "target": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p><a href=\"#series-graph.data.name\">name of target node</a> on edge</p>\n"
                      },
                      "lineStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>Line style of relational edges.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "\"#000\""
                              },
                              "width": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>line width.</p>\n",
                                "default": 0
                              },
                              "type": {
                                "type": [
                                  "string"
                                ],
                                "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                "default": "solid"
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              },
                              "curveness": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>The curveness od edge, supporting values from 0 to 1. The curveness will be larger as the value becomes lager.</p>\n",
                                "default": 0
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "\"#000\""
                              },
                              "width": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>line width.</p>\n",
                                "default": 0
                              },
                              "type": {
                                "type": [
                                  "string"
                                ],
                                "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                "default": "solid"
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "edges": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>the same as <a href=\"#series-graph.links\">links</a></p>\n"
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li>Through <a href=\"#series-graph.markPoint.data.x\">x</a>, <a href=\"#series-graph.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-graph.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li>Through <a href=\"#series-graph.markLine.data.0.x\">x</a>, <a href=\"#series-graph.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<pre><code>data: [\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "left": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "'auto'"
                },
                "top": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "'center'"
                },
                "right": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                  "default": "'auto'"
                },
                "bottom": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n<p>self-adaptive by default.</p>\n",
                  "default": "'auto'"
                },
                "width": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> width of component.</p>\n",
                  "default": "self-adaptation"
                },
                "height": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p> height of component.</p>\n",
                  "default": "self-adaptation"
                },
                "color": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>Color list of palette. If there is no color setting for <a href=\"#series-graph.categories\">node type</a>, it will adopt colors sequentially and circularly from this list.</p>\n<p>Defaults:</p>\n<pre><code class=\"lang-js\">[&#39;#c23531&#39;, &#39;#314656&#39;, &#39;#61a0a8&#39;, &#39;#dd8668&#39;, &#39;#91c7ae&#39;, &#39;#6e7074&#39;, &#39;#61a0a8&#39;, &#39;#bda29a&#39;, &#39;#44525d&#39;, &#39;#c4ccd3&#39;]\n</code></pre>\n"
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "cubicOut"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong> sankey graph </strong></p>\n<p>It is a kind of special flow graph, which is mainly used to present how raw materials, energy and so on from the initial status to the final form after processing and transformation.</p>\n<p><strong>Example: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=sankey-energy&edit=1&reset=1\" width=\"700\" height=\"580\" ></iframe>\n\n\n\n<p><br>\n<strong>visible coding: </strong></p>\n<p>The sankey graph encodes each <code>node</code> of the original data into a small rectangular. And different nodes are presented in different colors. The <code>label</code> coding next to the small rectangular is the name of the node.</p>\n<p>In addition, the edge coding between two small rectangulars in the graph is the <code>link</code> of the original data. The thickness coding of edge is the <code>value</code>of <code>link</code>.</p>\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'sankey'"
                },
                "zlevel": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> zlevel value of all graphic elements.</p>\n<p><code>zlevel</code>is used to layer Canvas, graphic elements of different <code>zlevel</code> values will be placed in different Canvas, layering Canvas is a common optimization technique. We can set configurations of some frequently changed graphic elements(like animations) to a single <code>zlevel</code>. Please noted that too much Canvas will increase greater memory overhead, and this needs to be used carefully on mobile phones to avoid bread down.</p>\n<p>Canvas with bigger zlevel will be placed in Canvas with smaller zlevel.</p>\n",
                  "default": 0
                },
                "z": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p> all graphic elements <code>z</code> value of components. Control graphic elements sequence. Graphic elements with smaller <code>z</code> value will be overrided by ones with bigger <code>z</code> value.</p>\n<p>Compared to <code>zlevel</code>, <code>z</code> has lower priority,and it will not create new Canvas.</p>\n",
                  "default": 2
                },
                "left": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>sankey distance of component  from the left side of the container.</p>\n<p>left value can be specific pixel value like<code>20</code> , it can also be relative percentage  to the container width like <code>&#39;20%&#39;</code> , and also  <code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>.</p>\n<p>if the left value is<code>&#39;left&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;right&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "'auto'"
                },
                "top": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>sankey distance of component  from the upper side of the container.</p>\n<p>top value can be specific pixel value like <code>20</code> , it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>,  and also <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>.\nif the  top value is<code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code>, component will align automatically based on cooresponding position.</p>\n",
                  "default": "5%"
                },
                "right": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>sankey distance of component  from the right side of the container.</p>\n<p>right value can be specific pixel value like <code>20</code> ,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
                  "default": "20%"
                },
                "bottom": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>sankey distance of component  from the down side of the container.</p>\n<p>bottom value can be specific pixel value like <code>20</code>,it can also be relative percentage  to the container height and width like <code>&#39;20%&#39;</code>.</p>\n",
                  "default": "5%"
                },
                "width": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>sankey width of component.</p>\n",
                  "default": null
                },
                "height": {
                  "type": [
                    "string",
                    "number"
                  ],
                  "descriptionCN": "<p>sankey height of component.</p>\n",
                  "default": null
                },
                "nodeWidth": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>the node width of rectangle in graph.</p>\n",
                  "default": 20
                },
                "nodeGap": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>the gap between any 2 regtangles in each row from the graph.</p>\n",
                  "default": 8
                },
                "layoutIterations": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>the iterations of layout, which is used to continuously optimize the nodes&#39; positions in graph, decreasing the overlapping between nodes and edges.</p>\n<p>the default iterations of layout: <code>32</code>.</p>\n<p>The test shows that iterations of layout could not be less than the default value.</p>\n",
                  "default": 32
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p><code>label</code> describes the text style in each rectangular node.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": true
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                          "default": "'right'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string",
                            "Array"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Label of font style.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>the style of node rectangle in sankey graph.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "'#aaa'"
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 1
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "lineStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>the line style of sankey graph.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>the color of the edge in snakey graph.</p>\n",
                          "default": "\"'#314656'\""
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the opacity of the edge in snakey graph.</p>\n",
                          "default": 0.2
                        },
                        "curveness": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the curveness of the edge in snakey graph.</p>\n",
                          "default": 0.5
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>the color of the edge in snakey graph.</p>\n",
                          "default": "\"'#314656'\""
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the opacity of the edge in snakey graph.</p>\n",
                          "default": 0.2
                        },
                        "curveness": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>the curveness of the edge in snakey graph.</p>\n",
                          "default": 0.5
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p> data content and array in the series.Array item can be a single data value, for example: </p>\n<pre><code class=\"lang-js\">[12, 34, 56, 10, 23]\n</code></pre>\n<p>If other dimensions need to be added to data  <a href=\"#visualMap\">visualMap</a> component to map color and other graphic properties.Each data item can also be an array, for example: </p>\n<pre><code class=\"lang-js\">[[12, 14], [34, 50], [56, 30], [10, 15], [23, 10]]\n</code></pre>\n<p>Now second value in each arrary can be assigned to <a href=\"#visualMap\">visualMap</a> component.</p>\n<p>In most situation, we need to assign name to each data item,so each item need to be one subject: </p>\n<pre><code class=\"lang-js\">[{\n    // name of date item\n    name: &#39;data1&#39;,\n    // value of date item is 8\n    value: 10\n}, {\n    name: &#39;data2&#39;,\n    value: 20\n}]\n</code></pre>\n<p>When personalized definition needs to be conducted to  sepcific content: </p>\n<pre><code class=\"lang-js\">[{\n    name: &#39;data1&#39;,\n    value: 10\n}, {\n    // name of data item\n    name: &#39;data2&#39;,\n    value : 56,\n    //special self-define tooltip, only valid for this data item\n    tooltip:{},\n    //special self-define itemStyle, only valid for this data item\n    itemStyle:{}\n}]\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "number",
                          "Array"
                        ],
                        "descriptionCN": "<p>the value of data item.</p>\n"
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the style of this node.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the lable style of this node.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string",
                                  "Array"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>Label of font style.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "nodes": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>equals to <a href=\"#series-sankey.data\">data</a></p>\n"
                },
                "links": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>the relational data of nodes. Example:</p>\n<pre><code class=\"lang-js\">links: [{\n    source: &#39;n1&#39;,\n    target: &#39;n2&#39;\n}, {\n    source: &#39;n2&#39;,\n    target: &#39;n3&#39;\n}]\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "source": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the <a href=\"#series-graph.data.name\">name of source node</a> of edge</p>\n"
                      },
                      "target": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the <a href=\"#series-graph.data.name\">name of target node</a></p>\n"
                      },
                      "value": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>the value of edge, which decides the width of edge.</p>\n"
                      },
                      "lineStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>the line stlye of  relational edge.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color of the edge in snakey graph.</p>\n",
                                "default": "\"'#314656'\""
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the opacity of the edge in snakey graph.</p>\n",
                                "default": 0.2
                              },
                              "curveness": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the curveness of the edge in snakey graph.</p>\n",
                                "default": 0.5
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>the color of the edge in snakey graph.</p>\n",
                                "default": "\"'#314656'\""
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the opacity of the edge in snakey graph.</p>\n",
                                "default": 0.2
                              },
                              "curveness": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>the curveness of the edge in snakey graph.</p>\n",
                                "default": 0.5
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "edges": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p>equals to <a href=\"#series-sankey.links\">links</a></p>\n"
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "'linear'"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>Funnel chart</strong></p>\n<p><strong>sample: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=funnel&reset=1&edit=1\" width=\"600\" height=\"400\" ></iframe>\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'funnel'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n"
                },
                "min": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The specified minimum value.</p>\n",
                  "default": 0
                },
                "max": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The specified maximum value.</p>\n",
                  "default": 100
                },
                "minSize": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The mapped width from minimum data value <a href=\"#series-funnel.min\">min</a>.</p>\n<p>It can be absolute pixel and also the percentage of <a href=\"#series-funnel.width\">layout width</a>. If you don&#39;t want the graph of minimum value to be a triangle, you can set up this property larger than 0.</p>\n",
                  "default": "'0%'"
                },
                "maxSize": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>The mapped width from maximum data value <a href=\"#series-funnel.max\">max</a>.</p>\n<p>It can be absolute pixel and also the percentage of <a href=\"#series-funnel.width\">layout width</a>.</p>\n",
                  "default": "'100%'"
                },
                "sort": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data sorting, which can be whether <code>&#39;ascending&#39;</code> or <code>&#39;descending&#39;</code>.</p>\n",
                  "default": "'descending'"
                },
                "gap": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Gap between each trapezoid.</p>\n",
                  "default": 0
                },
                "legendHoverLink": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to enable joint highlights <a href=\"#legend\">legend</a> when hover.</p>\n",
                  "default": true
                },
                "funnelAlign": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Horizontal align. Defaults to align center. Can be &#39;left&#39;, &#39;right&#39;, &#39;center&#39;.</p>\n",
                  "default": "'center'"
                },
                "label": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>funnel charttext label on the graphic can be used to explain some data information of the graphic, for example, value, name and so on.<code>label</code> is placed in ECharts 2.x under <code>itemStyle.normal</code>. In ECharts 3, in order to make the whole configuration structure more reasonable and flat, <code>label</code>is taked to the same level as <code>itemStyle</code> and possesses rwo status <code>normal</code> and <code>emphasis</code> like <code>itemStyle</code>.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "",
                          "default": false
                        },
                        "position": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Label position.</p>\n<p><strong>Options: </strong></p>\n<ul>\n<li><p><code>&#39;left&#39;</code></p>\n<p>  Left side of funnel chart. The corresponding trapezoid would be related to through <a href=\"#series-funnel.labelLine\">visual guide line</a>.</p>\n</li>\n<li><p><code>&#39;right&#39;</code></p>\n<p> Right side of funnel chart. The corresponding trapezoid would be related to through <a href=\"#series-funnel.labelLine\">visual guide line</a>.</p>\n</li>\n<li><p><code>&#39;inside&#39;</code></p>\n<p>  Inside the trapezoid of funnel chart.</p>\n</li>\n<li><p><code>&#39;inner&#39;</code> equals to <code>&#39;inside&#39;</code>.</p>\n</li>\n<li><code>&#39;center&#39;</code> equals to <code>&#39;inside&#39;</code>.</li>\n</ul>\n",
                          "default": "'outside'"
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n     // percentage\n     percent: number,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>the font style of lable.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "",
                          "default": false
                        },
                        "formatter": {
                          "type": [
                            "string",
                            "Function"
                          ],
                          "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n     // percentage\n     percent: number,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                        },
                        "textStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>the font style of lable.</p>\n",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>text color.</p>\n",
                              "default": "\"#fff\""
                            },
                            "fontStyle": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                              "default": "'normal'"
                            },
                            "fontWeight": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                              "default": "normal"
                            },
                            "fontFamily": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>Font series</p>\n",
                              "default": "'sans-serief'"
                            },
                            "fontSize": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Font size</p>\n",
                              "default": 12
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "labelLine": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>The visual guide line style of label. When <a href=\"#series-funnel.label.normal.position\">label position</a> is set as <code>&#39;left&#39;</code>or<code>&#39;right&#39;</code>, the visual guide line will show.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>The style of visual guide line in normal status.</p>\n",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Whether to show visual guide line.</p>\n"
                        },
                        "length": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>The length of the first part from visual guide line.</p>\n"
                        },
                        "lineStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>The style of visual guide line in emphasis status.</p>\n",
                      "properties": {
                        "show": {
                          "type": [
                            "boolean"
                          ],
                          "descriptionCN": "<p>Whether to show visual guide line.</p>\n"
                        },
                        "lineStyle": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p> graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color",
                            "Function"
                          ],
                          "descriptionCN": "<p>color of the graphic. Get color from the global palette <a href=\"#color\">option.color</a> by default.  </p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n<p>Support the use of callback functions. Callback function takes the following forms: </p>\n<pre><code class=\"lang-js\">(params: Object) =&gt; Color\n</code></pre>\n<p>Incoming are the data item <code>seriesIndex</code>, <code>dataIndex</code>, <code>data</code>, <code>value</code> and other parameters.</p>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "data": {
                  "type": [
                    "Array"
                  ],
                  "descriptionCN": "<p> data content and array in the series.Array item can be a single data value, for example: </p>\n<pre><code class=\"lang-js\">[12, 34, 56, 10, 23]\n</code></pre>\n<p>If other dimensions need to be added to data  <a href=\"#visualMap\">visualMap</a> component to map color and other graphic properties.Each data item can also be an array, for example: </p>\n<pre><code class=\"lang-js\">[[12, 14], [34, 50], [56, 30], [10, 15], [23, 10]]\n</code></pre>\n<p>Now second value in each arrary can be assigned to <a href=\"#visualMap\">visualMap</a> component.</p>\n<p>In most situation, we need to assign name to each data item,so each item need to be one subject: </p>\n<pre><code class=\"lang-js\">[{\n    // name of date item\n    name: &#39;data1&#39;,\n    // value of date item is 8\n    value: 10\n}, {\n    name: &#39;data2&#39;,\n    value: 20\n}]\n</code></pre>\n<p>When personalized definition needs to be conducted to  sepcific content: </p>\n<pre><code class=\"lang-js\">[{\n    name: &#39;data1&#39;,\n    value: 10\n}, {\n    // name of data item\n    name: &#39;data2&#39;,\n    value : 56,\n    //special self-define tooltip, only valid for this data item\n    tooltip:{},\n    //special self-define itemStyle, only valid for this data item\n    itemStyle:{}\n}]\n</code></pre>\n",
                  "items": {
                    "type": "Object",
                    "properties": {
                      "name": {
                        "type": [
                          "string"
                        ],
                        "descriptionCN": "<p>the name of data item.</p>\n"
                      },
                      "value": {
                        "type": [
                          "number"
                        ],
                        "descriptionCN": "<p>data value.</p>\n"
                      },
                      "label": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p>The label configuration of a single data item.</p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "",
                                "default": false
                              },
                              "position": {
                                "type": [
                                  "string"
                                ],
                                "descriptionCN": "<p>Label position.</p>\n<p><strong>Options: </strong></p>\n<ul>\n<li><p><code>&#39;left&#39;</code></p>\n<p>  Left side of funnel chart. The corresponding trapezoid would be related to through <a href=\"#series-funnel.labelLine\">visual guide line</a>.</p>\n</li>\n<li><p><code>&#39;right&#39;</code></p>\n<p> Right side of funnel chart. The corresponding trapezoid would be related to through <a href=\"#series-funnel.labelLine\">visual guide line</a>.</p>\n</li>\n<li><p><code>&#39;inside&#39;</code></p>\n<p>  Inside the trapezoid of funnel chart.</p>\n</li>\n<li><p><code>&#39;inner&#39;</code> equals to <code>&#39;inside&#39;</code>.</p>\n</li>\n<li><code>&#39;center&#39;</code> equals to <code>&#39;inside&#39;</code>.</li>\n</ul>\n",
                                "default": "'outside'"
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>the font style of lable.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "",
                                "default": false
                              },
                              "textStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "<p>the font style of lable.</p>\n",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>text color.</p>\n",
                                    "default": "\"#fff\""
                                  },
                                  "fontStyle": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                    "default": "'normal'"
                                  },
                                  "fontWeight": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                    "default": "normal"
                                  },
                                  "fontFamily": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>Font series</p>\n",
                                    "default": "'sans-serief'"
                                  },
                                  "fontSize": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Font size</p>\n",
                                    "default": 12
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "labelLine": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The style of visual guide line in normal status.</p>\n",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Whether to show visual guide line.</p>\n"
                              },
                              "length": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>The length of the first part from visual guide line.</p>\n"
                              },
                              "lineStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "\"#000\""
                                  },
                                  "width": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>line width.</p>\n",
                                    "default": 0
                                  },
                                  "type": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                    "default": "solid"
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The style of visual guide line in emphasis status.</p>\n",
                            "properties": {
                              "show": {
                                "type": [
                                  "boolean"
                                ],
                                "descriptionCN": "<p>Whether to show visual guide line.</p>\n"
                              },
                              "lineStyle": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "\"#000\""
                                  },
                                  "width": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>line width.</p>\n",
                                    "default": 0
                                  },
                                  "type": {
                                    "type": [
                                      "string"
                                    ],
                                    "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                    "default": "solid"
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "itemStyle": {
                        "type": [
                          "Object"
                        ],
                        "descriptionCN": "<p> graphic pattern, There are two status, <code>normal</code> and <code>emphasis</code>, <code>normal</code> is the normal pattern of a graphic, <code>emphasis</code> is the highlight pattern of a graphic, like the graphic pattern of <code>emphasis</code> when mouse hovers over or legend linkage highlights. </p>\n",
                        "properties": {
                          "normal": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          },
                          "emphasis": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "color": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                "default": "self-adaptive"
                              },
                              "borderColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                "default": "\"#000\""
                              },
                              "borderWidth": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                "default": 0
                              },
                              "shadowBlur": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                              },
                              "shadowColor": {
                                "type": [
                                  "Color"
                                ],
                                "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                              },
                              "shadowOffsetX": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                "default": 0
                              },
                              "shadowOffsetY": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                "default": 0
                              },
                              "opacity": {
                                "type": [
                                  "number"
                                ],
                                "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li>Through <a href=\"#series-funnel.markPoint.data.x\">x</a>, <a href=\"#series-funnel.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-funnel.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li>Through <a href=\"#series-funnel.markLine.data.0.x\">x</a>, <a href=\"#series-funnel.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<pre><code>data: [\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "cubicOut"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            },
            {
              "type": [
                "Object"
              ],
              "descriptionCN": "<p><strong>Gauge chart</strong></p>\n<p><strong>Example: </strong></p>\n<iframe data-src=\"http://echarts.baidu.com/gallery/view.html?c=gauge-car\" width=\"600\" height=\"500\" ></iframe>\n\n\n",
              "properties": {
                "type": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "",
                  "default": "'gauge'"
                },
                "name": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>series name is used to present <a href=\"#tooltip\">tooltip</a> and legend filter of <a href=\"#legend\">legend</a>. When updating data and configuration item of <code>setOption</code>,series name is used to assign corresponding series.</p>\n<!-- overwrite radius -->\n"
                },
                "radius": {
                  "type": [
                    "number",
                    "string"
                  ],
                  "descriptionCN": "<p>The radius of gauge chart. It can be a percentage value of the smaller of container half width and half height, also can be an absolute value.</p>\n<p>{{ use partial-legend-hover-link }}</p>\n",
                  "default": "'75%'"
                },
                "startAngle": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The start angle of gauge chart. The direct right side of <a href=\"#series-gauge.center\">circle center</a> is <code>0</code> degree, the right above it is <code>90</code> degree, the direct left side of it is <code>180</code> degree.</p>\n",
                  "default": 225
                },
                "endAngle": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The end angle of gauge chart.</p>\n",
                  "default": -45
                },
                "clockwise": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether the scale in gauge chart increases clockwise.</p>\n",
                  "default": true
                },
                "min": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The minimum data value which map to <a href=\"#series-gauge.minAngle\">minAngle</a>.</p>\n",
                  "default": 0
                },
                "max": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The maximum data value which map to  <a href=\"#series-gauge.maxAngle\">maxAngle</a>.</p>\n",
                  "default": 100
                },
                "splitNumber": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The number of split segments of gauge chart scale.</p>\n",
                  "default": 10
                },
                "axisLine": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>The related configuration about the axis line of gauge chart.</p>\n",
                  "properties": {
                    "show": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to show the axis line of gauge chart.</p>\n",
                      "default": true
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>The style of the axis line of gauge chart.</p>\n",
                      "properties": {
                        "color": {
                          "type": [
                            "Array"
                          ],
                          "descriptionCN": "<p>The axis line of gauge chart can be divided to several segments in different colors. The end position and color of each segment can be expressed by an array.</p>\n<p>Default value:</p>\n<pre><code class=\"lang-js\">[[0.2, &#39;#91c7ae&#39;], [0.8, &#39;#63869e&#39;], [1, &#39;#c23531&#39;]]\n</code></pre>\n"
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>The width of axis line.</p>\n",
                          "default": 30
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "splitLine": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>The style of split line.</p>\n",
                  "properties": {
                    "show": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to show the split line.</p>\n",
                      "default": true
                    },
                    "length": {
                      "type": [
                        "number",
                        "string"
                      ],
                      "descriptionCN": "<p>The length of split line, can be a pecentage value relative to radius.</p>\n",
                      "default": 30
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "#eee"
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 2
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "'solid'"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "axisTick": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>The tick line style.</p>\n",
                  "properties": {
                    "show": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to show the scale.</p>\n",
                      "default": true
                    },
                    "splitNumber": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The split scale number between split line.</p>\n",
                      "default": 5
                    },
                    "length": {
                      "type": [
                        "number",
                        "string"
                      ],
                      "descriptionCN": "<p>The length of tick line, can be a pecentage value relative to radius.</p>\n",
                      "default": 8
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "#eee"
                        },
                        "width": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>line width.</p>\n",
                          "default": 1
                        },
                        "type": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                          "default": "'solid'"
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "axisLabel": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Axis tick label.</p>\n",
                  "properties": {
                    "show": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to show the label.</p>\n",
                      "default": true
                    },
                    "formatter": {
                      "type": [
                        "string",
                        "Function"
                      ],
                      "descriptionCN": "<p>The content formatter of scale label, which supports both string template and callback function.\nExample:</p>\n<pre><code class=\"lang-js\">// use string template. the template variable {value} represent the default label text\nformatter: &#39;{value} kg&#39;\n\n// use function callback. the function parameters are scale values.\nformatter: function (value) {\n    return value + &#39;km/h&#39;;\n}\n</code></pre>\n"
                    },
                    "textStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>text color.</p>\n",
                          "default": "\"#fff\""
                        },
                        "fontStyle": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                          "default": "'normal'"
                        },
                        "fontWeight": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                          "default": "normal"
                        },
                        "fontFamily": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font series</p>\n",
                          "default": "'sans-serief'"
                        },
                        "fontSize": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Font size</p>\n",
                          "default": 12
                        }
                      }
                    },
                    "color": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>The scale color</p>\n",
                      "default": "'auto'"
                    }
                  }
                },
                "pointer": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Gauge chart pointer.</p>\n",
                  "properties": {
                    "show": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to show the pointer.</p>\n",
                      "default": true
                    },
                    "length": {
                      "type": [
                        "string",
                        "number"
                      ],
                      "descriptionCN": "<p>The length of pointer which could be absolute value and also the percentage relative to <a href=\"#series-gauge.radius\">radius</a>.</p>\n",
                      "default": "'80%'"
                    },
                    "width": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The width of pointer.</p>\n",
                      "default": 8
                    }
                  }
                },
                "itemStyle": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>The style of gauge chart.</p>\n",
                  "properties": {
                    "normal": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>The color of pointer. Defaults to use <a href=\"#series-gauge.axisLine.lineStyle.color\">the color of section</a> where the numerical value belongs to.</p>\n",
                          "default": "'auto'"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n<!-- overwrite color -->\n"
                        }
                      }
                    },
                    "emphasis": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                          "default": "self-adaptive"
                        },
                        "borderColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                          "default": "\"#000\""
                        },
                        "borderWidth": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                          "default": 0
                        },
                        "shadowBlur": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                        },
                        "shadowColor": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                        },
                        "shadowOffsetX": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                          "default": 0
                        },
                        "shadowOffsetY": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                          "default": 0
                        },
                        "opacity": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                        }
                      }
                    }
                  }
                },
                "title": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>The title of gauge chart.</p>\n",
                  "properties": {
                    "show": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to show the title.</p>\n",
                      "default": true
                    },
                    "offsetCenter": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>The offset position relative to the center of gauge chart. The first item of array is the horizontal offset; the second item of array is the vertical offset. It could be absolute value and also the percentage relative to the radius of gauge chart.</p>\n",
                      "default": "[0, '-40%']"
                    },
                    "textStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>text color.</p>\n",
                          "default": "'#333'"
                        },
                        "fontStyle": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                          "default": "'normal'"
                        },
                        "fontWeight": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                          "default": "normal"
                        },
                        "fontFamily": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font series</p>\n",
                          "default": "'sans-serief'"
                        },
                        "fontSize": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Font size</p>\n",
                          "default": 15
                        }
                      }
                    }
                  }
                },
                "detail": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>The detail about gauge chart which is used to show data.</p>\n",
                  "properties": {
                    "show": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to show the details.</p>\n",
                      "default": true
                    },
                    "width": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The width of detail.</p>\n",
                      "default": 100
                    },
                    "height": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The height of detail.</p>\n",
                      "default": 40
                    },
                    "backgroundColor": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>The background color of detail.</p>\n",
                      "default": "'transparent'"
                    },
                    "borderWidth": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The border width of detail.</p>\n",
                      "default": 0
                    },
                    "borderColor": {
                      "type": [
                        "Color"
                      ],
                      "descriptionCN": "<p>The border color of detail.</p>\n",
                      "default": "'#ccc'"
                    },
                    "offsetCenter": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>The offset position relative to the center of gauge chart. The first item of array is the horizontal offset; the second item of array is the vertical offset. It could be absolute value and also the percentage relative to the radius of gauge chart.</p>\n",
                      "default": "[0, '40%']"
                    },
                    "textStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "color": {
                          "type": [
                            "Color"
                          ],
                          "descriptionCN": "<p>The text color. Defaults to use <a href=\"#series-gauge.axisLine.lineStyle.color\">the color of section</a> where the numerical value belongs to.</p>\n",
                          "default": "'auto'"
                        },
                        "fontStyle": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                          "default": "'normal'"
                        },
                        "fontWeight": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                          "default": "normal"
                        },
                        "fontFamily": {
                          "type": [
                            "string"
                          ],
                          "descriptionCN": "<p>Font series</p>\n",
                          "default": "'sans-serief'"
                        },
                        "fontSize": {
                          "type": [
                            "number"
                          ],
                          "descriptionCN": "<p>Font size</p>\n<!-- overwrite color -->\n",
                          "default": 15
                        }
                      }
                    }
                  }
                },
                "markPoint": {
                  "type": [
                    "Object"
                  ],
                  "descriptionCN": "<p>Chart callouts.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n",
                      "default": "'pin'"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array",
                        "Function"
                      ],
                      "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n<p>If graphic size of every data needs to be different, you can set to the callback function in the following format: </p>\n<pre><code class=\"lang-js\">(value: Array|number, params: Object) =&gt; number|Array\n</code></pre>\n<p>Among which the first parameter <code>value</code> is the data value in <a href=\"#series-.data\">data</a>. The second parameter <code>params</code>is the parameter of other data item.</p>\n",
                      "default": 50
                    },
                    "symbolRotate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                    },
                    "symbolOffset": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                      "default": "[0, 0]"
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n",
                              "default": "'inside'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                              "default": false
                            },
                            "position": {
                              "type": [
                                "string",
                                "Array"
                              ],
                              "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, representing series name, date name, data value respectively.</p>\n<p> <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {c}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: \n  . </p>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            },
                            "textStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Label of font style.</p>\n",
                              "properties": {
                                "color": {
                                  "type": [
                                    "Color"
                                  ],
                                  "descriptionCN": "<p>text color.</p>\n",
                                  "default": "\"#fff\""
                                },
                                "fontStyle": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                  "default": "'normal'"
                                },
                                "fontWeight": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                  "default": "normal"
                                },
                                "fontFamily": {
                                  "type": [
                                    "string"
                                  ],
                                  "descriptionCN": "<p>Font series</p>\n",
                                  "default": "'sans-serief'"
                                },
                                "fontSize": {
                                  "type": [
                                    "number"
                                  ],
                                  "descriptionCN": "<p>Font size</p>\n",
                                  "default": 12
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Callout style.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "borderColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                              "default": "\"#000\""
                            },
                            "borderWidth": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                              "default": 0
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data": {
                      "type": [
                        "Array"
                      ],
                      "descriptionCN": "<p>Label data array. Every array is an object, followings are several ways to assign the position the labeling.</p>\n<ol>\n<li>Through <a href=\"#series-gauge.markPoint.data.x\">x</a>, <a href=\"#series-gauge.markPoint.data.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container.</li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<p><strong>For example: </strong></p>\n<pre><code class=\"lang-js\">data: [\n    {\n        name: &#39;cetain screen coordinate&#39;,\n        x: 100,\n        y: 100\n    }\n]\n</code></pre>\n",
                      "items": {
                        "type": "Object",
                        "properties": {
                          "name": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Label name.</p>\n",
                            "default": "''"
                          },
                          "x": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                          },
                          "y": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                          },
                          "value": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Label value can be  unset.</p>\n"
                          },
                          "symbol": {
                            "type": [
                              "string"
                            ],
                            "descriptionCN": "<p>Labelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                          },
                          "symbolSize": {
                            "type": [
                              "number",
                              "Array"
                            ],
                            "descriptionCN": "<p>Label size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                          },
                          "symbolRotate": {
                            "type": [
                              "number"
                            ],
                            "descriptionCN": "<p>Rotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                          },
                          "symbolOffset": {
                            "type": [
                              "Array"
                            ],
                            "descriptionCN": "<p>Label the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                            "default": "[0, 0]"
                          },
                          "itemStyle": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "<p>The callout style.</p>\n",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "color": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>color of the graphic.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                    "default": "self-adaptive"
                                  },
                                  "borderColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p> stroke color of graphic. Support the same format as <code>color</code></p>\n",
                                    "default": "\"#000\""
                                  },
                                  "borderWidth": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Width of stroke. No stroke when it is 0 .</p>\n",
                                    "default": 0
                                  },
                                  "shadowBlur": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                  },
                                  "shadowColor": {
                                    "type": [
                                      "Color"
                                    ],
                                    "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                  },
                                  "shadowOffsetX": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "shadowOffsetY": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                    "default": 0
                                  },
                                  "opacity": {
                                    "type": [
                                      "number"
                                    ],
                                    "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                  }
                                }
                              }
                            }
                          },
                          "label": {
                            "type": [
                              "Object"
                            ],
                            "descriptionCN": "",
                            "properties": {
                              "normal": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              },
                              "emphasis": {
                                "type": [
                                  "Object"
                                ],
                                "descriptionCN": "",
                                "properties": {
                                  "show": {
                                    "type": [
                                      "boolean"
                                    ],
                                    "descriptionCN": "<p>Wheteher shows tag.</p>\n",
                                    "default": false
                                  },
                                  "position": {
                                    "type": [
                                      "string",
                                      "Array"
                                    ],
                                    "descriptionCN": "<p>Label position.</p>\n<p><strong>Followings are the options: </strong></p>\n<ul>\n<li><p>[x, y]</p>\n<p>  Represent label relative to the graphics on the left corner of bounding box by relative percentage or absolute pixel value.\n  For example: </p>\n<pre><code class=\"lang-js\">  // Absolute pixel values\n  position: [10, 10],\n  // Relative percent\n  position: [&#39;50%&#39;, &#39;50%&#39;]\n</code></pre>\n</li>\n<li><p>&#39;top&#39;</p>\n</li>\n<li>&#39;left&#39;</li>\n<li>&#39;right&#39;</li>\n<li>&#39;bottom&#39;</li>\n<li>&#39;inside&#39;</li>\n<li>&#39;insideLeft&#39;</li>\n<li>&#39;insideRight&#39;</li>\n<li>&#39;insideTop&#39;</li>\n<li>&#39;insideBottom&#39;</li>\n<li>&#39;insideLeftTop&#39;</li>\n<li>&#39;insideLeftBottom&#39;</li>\n<li>&#39;insideRightTop&#39;</li>\n<li>&#39;insideRightBottom&#39;</li>\n</ul>\n"
                                  },
                                  "textStyle": {
                                    "type": [
                                      "Object"
                                    ],
                                    "descriptionCN": "<p>Label of font style.</p>\n",
                                    "properties": {
                                      "color": {
                                        "type": [
                                          "Color"
                                        ],
                                        "descriptionCN": "<p>text color.</p>\n",
                                        "default": "\"#fff\""
                                      },
                                      "fontStyle": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
                                        "default": "'normal'"
                                      },
                                      "fontWeight": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
                                        "default": "normal"
                                      },
                                      "fontFamily": {
                                        "type": [
                                          "string"
                                        ],
                                        "descriptionCN": "<p>Font series</p>\n",
                                        "default": "'sans-serief'"
                                      },
                                      "fontSize": {
                                        "type": [
                                          "number"
                                        ],
                                        "descriptionCN": "<p>Font size</p>\n",
                                        "default": 12
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "markLine\r": {
                  "type": [
                    "*"
                  ],
                  "descriptionCN": "<p>mark line of the chart.</p>\n",
                  "properties": {
                    "symbol": {
                      "type": [
                        "string",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag type, it can be one array referring to both ends respectively or in a unified way, specific format can refer to (~series-gauge.markLine.data.0.symbol). </p>\n"
                    },
                    "symbolSize": {
                      "type": [
                        "number",
                        "Array"
                      ],
                      "descriptionCN": "<p>Marking the ends of the tag size, it can be one array referring to both ends respectively or in a unified way.</p>\n<p><strong>Attention: </strong> In here, you can not assign height and width through array like the usual symbolSize.</p>\n"
                    },
                    "precision": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Numerical precison of marking line is useful when presenting average value line.</p>\n",
                      "default": 2
                    },
                    "label": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "<p>Mark line text.</p>\n",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "show": {
                              "type": [
                                "boolean"
                              ],
                              "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                              "default": true
                            },
                            "position": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                              "default": "'end'"
                            },
                            "formatter": {
                              "type": [
                                "string",
                                "Function"
                              ],
                              "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "lineStyle": {
                      "type": [
                        "Object"
                      ],
                      "descriptionCN": "",
                      "properties": {
                        "normal": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "self-adaptive"
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            },
                            "curveness": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                              "default": 0
                            }
                          }
                        },
                        "emphasis": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "",
                          "properties": {
                            "color": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                              "default": "\"#000\""
                            },
                            "width": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>line width.</p>\n",
                              "default": 0
                            },
                            "type": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                              "default": "solid"
                            },
                            "shadowBlur": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                            },
                            "shadowColor": {
                              "type": [
                                "Color"
                              ],
                              "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                            },
                            "shadowOffsetX": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                              "default": 0
                            },
                            "shadowOffsetY": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                              "default": 0
                            },
                            "opacity": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                            }
                          }
                        }
                      }
                    },
                    "data\r": {
                      "type": [
                        "*"
                      ],
                      "descriptionCN": "<p>Data array of marking line. Every array can be  one with one or two value, representing starting point and finishing point of the line, and every item is an object, followings are several ways to assign the positions of starting point and finishing point.</p>\n<ol>\n<li>Through <a href=\"#series-gauge.markLine.data.0.x\">x</a>, <a href=\"#series-gauge.markLine.data.0.y\">y</a> attribute assigns screen coorditaes and per pixel of relative container. </li>\n</ol>\n<p>When multiple attributes exist simultaneously, the order of priority is as described above.</p>\n<pre><code>data: [\n    [\n        {\n            name: &#39;Marking line between two screen coordinates&#39;,\n            x: 100,\n            y: 100\n        },\n        {\n            x: 500,\n            y: 200\n        }\n    ]\n]\n</code></pre>",
                      "properties": {
                        "0": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the starting point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>starting pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>starting pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>starting pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "1": {
                          "type": [
                            "Object"
                          ],
                          "descriptionCN": "<p>Data of the finishing point.</p>\n",
                          "properties": {
                            "x": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen x coordinate of relative container, per pixel.</p>\n"
                            },
                            "y": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>screen y coordinate of relative container, per pixel.</p>\n"
                            },
                            "value": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>Label value can be  unset.</p>\n"
                            },
                            "symbol": {
                              "type": [
                                "string"
                              ],
                              "descriptionCN": "<p>finishing pointLabelled graphic.</p>\n<p>You can choose the marking type, there are \n<code>&#39;circle&#39;</code>, <code>&#39;rect&#39;</code>, <code>&#39;roundRect&#39;</code>, <code>&#39;triangle&#39;</code>, <code>&#39;diamond&#39;</code>, <code>&#39;pin&#39;</code>, <code>&#39;arrow&#39;</code></p>\n<p>you can also set to picture through <code>&#39;image://url&#39;</code> , in which url is the link to a picture.</p>\n<p>In ECharts 3, you can set to any vector paths through <code>&#39;path://&#39;</code> , and you need not to worry about the serrate or blurriness cause the zoom comparing to the pictures, what&#39;s more you can set to any color.Path graphics will adjust to appropriate size automatically ( symbol as in symbolSize). Path format can refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">SVG PathData</a>. You can also edit and extract it from tools such as Adobe Illustrator.</p>\n"
                            },
                            "symbolSize": {
                              "type": [
                                "number",
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel size can set to single number as <code>10</code>, or use array to represent height and width, such as <code>[20, 10]</code> meaning labelled width is<code>20</code>, height is<code>10</code>.</p>\n"
                            },
                            "symbolRotate": {
                              "type": [
                                "number"
                              ],
                              "descriptionCN": "<p>finishing pointRotation angle of the label.Please noted that in <code>markLine</code>,when <code>symbol</code> is <code>&#39;arrow&#39;</code> , one usually ingore that <code>symbolRotate</code> will be forced to set to tangent angle. </p>\n"
                            },
                            "symbolOffset": {
                              "type": [
                                "Array"
                              ],
                              "descriptionCN": "<p>finishing pointLabel the offset relative to the original location. By default, label will be centrally placed in corresponding location, but if symbol is custom vector path or picture , there is a chance that symbol would not be wanted to be in the center. Then the configuration item can be used to configure symbol to offset relative to origin center. This can be absolute pixel value or relative percentage.</p>\n<p>For example <code>[0, &#39;50%&#39;]</code>moves half way up, when symbol praphic is bubble, arrow beneath the graphic can be pointed to data point.</p>\n",
                              "default": "[0, 0]"
                            },
                            "lineStyle": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data line, <code>lineStyle</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "color": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>line color.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n",
                                      "default": "\"#000\""
                                    },
                                    "width": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>line width.</p>\n",
                                      "default": 0
                                    },
                                    "type": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>line type.</p>\n<p>Options are as followed: </p>\n<ul>\n<li><code>&#39;solid&#39;</code></li>\n<li><code>&#39;dashed&#39;</code></li>\n<li><code>&#39;dotted&#39;</code></li>\n</ul>\n",
                                      "default": "solid"
                                    },
                                    "shadowBlur": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Size of blurriness of graphic shadow. This attribute sets graphic shadow effect together with <code>shadowColor</code>,<code>shadowOffsetX</code>, <code>shadowOffsetY</code>.</p>\n<p>for example:</p>\n<pre><code class=\"lang-js\">itemStyle: {\n    normal: {\n        shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;,\n        shadowBlur: 10\n    }\n}\n</code></pre>\n"
                                    },
                                    "shadowColor": {
                                      "type": [
                                        "Color"
                                      ],
                                      "descriptionCN": "<p>Shadow color. Support same format as <code>color</code>.</p>\n"
                                    },
                                    "shadowOffsetX": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the horizontal direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "shadowOffsetY": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Offset distance on the vertical direction of the shade.</p>\n",
                                      "default": 0
                                    },
                                    "opacity": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Graphic transparency. Support number from 0 to 1, and this graphic will not be drawn when transparency is 0.6</p>\n"
                                    },
                                    "curveness": {
                                      "type": [
                                        "number"
                                      ],
                                      "descriptionCN": "<p>Edge curvature supports the value from 0 to 1, the bigger the value, the greater the curvature.</p>\n",
                                      "default": 0
                                    }
                                  }
                                }
                              }
                            },
                            "label": {
                              "type": [
                                "Object"
                              ],
                              "descriptionCN": "<p>Format of this data label,<code>label</code> of starting point and finishing point item will be merged together.</p>\n",
                              "properties": {
                                "normal": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                },
                                "emphasis": {
                                  "type": [
                                    "Object"
                                  ],
                                  "descriptionCN": "",
                                  "properties": {
                                    "show": {
                                      "type": [
                                        "boolean"
                                      ],
                                      "descriptionCN": "<p>Whether presnet label or not.</p>\n",
                                      "default": true
                                    },
                                    "position": {
                                      "type": [
                                        "string"
                                      ],
                                      "descriptionCN": "<p>position of label can be: </p>\n<ul>\n<li><code>&#39;start&#39;</code> starting point of the line.</li>\n<li><code>&#39;end&#39;</code>   finishing point of the line.</li>\n</ul>\n",
                                      "default": "'end'"
                                    },
                                    "formatter": {
                                      "type": [
                                        "string",
                                        "Function"
                                      ],
                                      "descriptionCN": "<p>Data label formatter supoports string template and callback function.</p>\n<ol>\n<li><p>string template.</p>\n<p> Model variation includes <code>{a}</code>, <code>{b}</code>, <code>{c}</code>, <code>{d}</code>, representing series name, data name, data value and percent respectively.\n <strong>example: </strong></p>\n<pre><code class=\"lang-js\"> formatter: &#39;{b}: {d}&#39;\n</code></pre>\n</li>\n<li><p>callback function.</p>\n<p> Format of callback function: </p>\n<pre><code class=\"lang-js\"> (params: Object|Array) =&gt; string\n</code></pre>\n<p> parameter <code>params</code> is the single dataset that formatter needs.Format is as followed: </p>\n<pre><code class=\"lang-js\"> {\n     // series in the incoming option.index in series\n     seriesIndex: number,\n     // Series name\n     seriesName: string,\n     // data name, category name\n     name: string,\n     // index of data in the incoming data array\n     dataIndex: number,\n     // Incoming raw data\n     data: Object,\n     // Incoming data values\n     value: number|Array,\n\n }\n</code></pre>\n</li>\n</ol>\n<p>formatter return string supports line feed with<code>\\n</code> .</p>\n"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "animation": {
                      "type": [
                        "boolean"
                      ],
                      "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                      "default": true
                    },
                    "animationDuration": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>The initial length of the animation.</p>\n",
                      "default": 1000
                    },
                    "animationEasing": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                      "default": "cubicOut"
                    },
                    "animationDurationUpdate": {
                      "type": [
                        "number"
                      ],
                      "descriptionCN": "<p>Data update animation duration.</p>\n",
                      "default": 300
                    },
                    "animationEasingUpdate": {
                      "type": [
                        "string"
                      ],
                      "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                      "default": "cubicOut"
                    }
                  }
                },
                "animation": {
                  "type": [
                    "boolean"
                  ],
                  "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
                  "default": true
                },
                "animationDuration": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>The initial length of the animation.</p>\n",
                  "default": 1000
                },
                "animationEasing": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
                  "default": "cubicOut"
                },
                "animationDurationUpdate": {
                  "type": [
                    "number"
                  ],
                  "descriptionCN": "<p>Data update animation duration.</p>\n",
                  "default": 300
                },
                "animationEasingUpdate": {
                  "type": [
                    "string"
                  ],
                  "descriptionCN": "<p>Data update animation easing effects.</p>\n",
                  "default": "cubicOut"
                }
              }
            }
          ]
        }
      },
      "color": {
        "type": [
          "Array"
        ],
        "descriptionCN": "<p>The color list of palette. If no color is set in series, the colors would be adopted sequentially and circularly from this list as the colors of series.</p>\n<p>Defaults:</p>\n<pre><code class=\"lang-js\">[&#39;#c23531&#39;,&#39;#2f4554&#39;, &#39;#61a0a8&#39;, &#39;#d48265&#39;, &#39;#91c7ae&#39;,&#39;#749f83&#39;,  &#39;#ca8622&#39;, &#39;#bda29a&#39;,&#39;#6e7074&#39;, &#39;#546570&#39;, &#39;#c4ccd3&#39;]\n</code></pre>\n"
      },
      "backgroundColor": {
        "type": [
          "Color"
        ],
        "descriptionCN": "<p>Background color. Defaults to have no background.</p>\n<blockquote>\n<p>color can be represented by RGB, for example <code>&#39;rgb(128, 128, 128)&#39;</code>, if you want to add alpha channel, you can use RGBA, for example <code>&#39;rgba(128, 128, 128, 0.5)&#39;</code>, you can also use hexadecimal format, for example <code>&#39;#ccc&#39;</code>. </p>\n</blockquote>\n"
      },
      "textStyle": {
        "type": [
          "Object"
        ],
        "descriptionCN": "<p>Global font style.</p>\n",
        "properties": {
          "color": {
            "type": [
              "Color"
            ],
            "descriptionCN": "<p>text color.</p>\n",
            "default": "\"#fff\""
          },
          "fontStyle": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Font style</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;italic&#39;</code></li>\n<li><code>&#39;oblique&#39;</code></li>\n</ul>\n",
            "default": "'normal'"
          },
          "fontWeight": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Font thickness</p>\n<p>Options are: </p>\n<ul>\n<li><code>&#39;normal&#39;</code></li>\n<li><code>&#39;bold&#39;</code></li>\n<li><code>&#39;bolder&#39;</code></li>\n<li><code>&#39;lighter&#39;</code></li>\n<li>100 | 200 | 300 | 400...</li>\n</ul>\n",
            "default": "normal"
          },
          "fontFamily": {
            "type": [
              "string"
            ],
            "descriptionCN": "<p>Font series</p>\n",
            "default": "'sans-serief'"
          },
          "fontSize": {
            "type": [
              "number"
            ],
            "descriptionCN": "<p>Font size</p>\n",
            "default": 12
          }
        }
      },
      "animation": {
        "type": [
          "boolean"
        ],
        "descriptionCN": "<p>Whether to start animation,enabled by default.</p>\n",
        "default": true
      },
      "animationDuration": {
        "type": [
          "number"
        ],
        "descriptionCN": "<p>The initial length of the animation.</p>\n",
        "default": 1000
      },
      "animationEasing": {
        "type": [
          "string"
        ],
        "descriptionCN": "<p>Easing effect of initial animation.Different easing effects can refer to <a href=\"line-easing\" target=\"_blank\">easing effect</a>. </p>\n",
        "default": "cubicOut"
      },
      "animationDurationUpdate": {
        "type": [
          "number"
        ],
        "descriptionCN": "<p>Data update animation duration.</p>\n",
        "default": 300
      },
      "animationEasingUpdate": {
        "type": [
          "string"
        ],
        "descriptionCN": "<p>Data update animation easing effects.</p>\n",
        "default": "cubicOut"
      }
    }
  }
}